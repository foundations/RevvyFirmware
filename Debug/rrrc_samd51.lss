
rrrc_samd51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000914c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001a8  20000000  0000914c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000201a8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000201a8  2**0
                  CONTENTS
  4 .bss          00000b80  200001b0  00009300  000201b0  2**4
                  ALLOC
  5 .stack        0000c000  20000d30  00009e80  000201b0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003c143  00000000  00000000  0002022f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004bbb  00000000  00000000  0005c372  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014ba7  00000000  00000000  00060f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002468  00000000  00000000  00075ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002278  00000000  00000000  00077f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034d10  00000000  00000000  0007a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000208fa  00000000  00000000  000aeec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010e2e1  00000000  00000000  000cf7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009a3c  00000000  00000000  001ddaa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 cd 00 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     0.. ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	75 43 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     uC..}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 e1 37 00 00     }...}...}....7..
      9c:	f1 37 00 00 01 38 00 00 11 38 00 00 7d 03 00 00     .7...8...8..}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	49 32 00 00 59 32 00 00 69 32 00 00 79 32 00 00     I2..Y2..i2..y2..
      cc:	89 32 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .2..}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	41 3e 00 00 9d 54 00 00 b9 54 00 00 d5 54 00 00     A>...T...T...T..
     104:	f1 54 00 00 0d 55 00 00 29 55 00 00 45 55 00 00     .T...U..)U..EU..
     114:	61 55 00 00 7d 55 00 00 99 55 00 00 b5 55 00 00     aU..}U...U...U..
     124:	d1 55 00 00 ed 55 00 00 09 56 00 00 25 56 00 00     .U...U...V..%V..
     134:	41 56 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     AV..}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 5d 56 00 00 79 56 00 00 95 56 00 00     }...]V..yV...V..
     164:	b1 56 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .V..}...}...}...
     174:	7d 03 00 00 00 00 00 00 00 00 00 00 7d 88 00 00     }...........}...
     184:	8d 88 00 00 9d 88 00 00 ad 88 00 00 00 00 00 00     ................
     194:	e9 5c 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .\..}...}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 05 5d 00 00     }...}...}....]..
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 ad 66 00 00 c9 66 00 00     }...}....f...f..
     1f4:	e5 66 00 00 01 67 00 00 1d 67 00 00 39 67 00 00     .f...g...g..9g..
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200001b0 	.word	0x200001b0
     280:	00000000 	.word	0x00000000
     284:	0000914c 	.word	0x0000914c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000914c 	.word	0x0000914c
     2c4:	200001b4 	.word	0x200001b4
     2c8:	0000914c 	.word	0x0000914c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	000014c5 	.word	0x000014c5

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	0000914c 	.word	0x0000914c
     35c:	20000000 	.word	0x20000000
     360:	200001a8 	.word	0x200001a8
     364:	200001b0 	.word	0x200001b0
     368:	20000d30 	.word	0x20000d30
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	00008d55 	.word	0x00008d55
     378:	00008c39 	.word	0x00008c39

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	691b      	ldr	r3, [r3, #16]
     3b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	695b      	ldr	r3, [r3, #20]
     3d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	695b      	ldr	r3, [r3, #20]
     3f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     408:	b480      	push	{r7}
     40a:	b083      	sub	sp, #12
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     410:	687b      	ldr	r3, [r7, #4]
     412:	695b      	ldr	r3, [r3, #20]
     414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     418:	687b      	ldr	r3, [r7, #4]
     41a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     41c:	bf00      	nop
     41e:	370c      	adds	r7, #12
     420:	46bd      	mov	sp, r7
     422:	f85d 7b04 	ldr.w	r7, [sp], #4
     426:	4770      	bx	lr

00000428 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     428:	b480      	push	{r7}
     42a:	b083      	sub	sp, #12
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     430:	687b      	ldr	r3, [r7, #4]
     432:	695b      	ldr	r3, [r3, #20]
     434:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     438:	687b      	ldr	r3, [r7, #4]
     43a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43c:	bf00      	nop
     43e:	370c      	adds	r7, #12
     440:	46bd      	mov	sp, r7
     442:	f85d 7b04 	ldr.w	r7, [sp], #4
     446:	4770      	bx	lr

00000448 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     448:	b480      	push	{r7}
     44a:	b083      	sub	sp, #12
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     450:	687b      	ldr	r3, [r7, #4]
     452:	695b      	ldr	r3, [r3, #20]
     454:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     458:	687b      	ldr	r3, [r7, #4]
     45a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45c:	bf00      	nop
     45e:	370c      	adds	r7, #12
     460:	46bd      	mov	sp, r7
     462:	f85d 7b04 	ldr.w	r7, [sp], #4
     466:	4770      	bx	lr

00000468 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     468:	b480      	push	{r7}
     46a:	b083      	sub	sp, #12
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     470:	687b      	ldr	r3, [r7, #4]
     472:	695b      	ldr	r3, [r3, #20]
     474:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     478:	687b      	ldr	r3, [r7, #4]
     47a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47c:	bf00      	nop
     47e:	370c      	adds	r7, #12
     480:	46bd      	mov	sp, r7
     482:	f85d 7b04 	ldr.w	r7, [sp], #4
     486:	4770      	bx	lr

00000488 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     488:	b480      	push	{r7}
     48a:	b083      	sub	sp, #12
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     490:	687b      	ldr	r3, [r7, #4]
     492:	695b      	ldr	r3, [r3, #20]
     494:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     498:	687b      	ldr	r3, [r7, #4]
     49a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     49c:	bf00      	nop
     49e:	370c      	adds	r7, #12
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     4a8:	b480      	push	{r7}
     4aa:	b083      	sub	sp, #12
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	699b      	ldr	r3, [r3, #24]
     4b4:	f043 0201 	orr.w	r2, r3, #1
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4bc:	bf00      	nop
     4be:	370c      	adds	r7, #12
     4c0:	46bd      	mov	sp, r7
     4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c6:	4770      	bx	lr

000004c8 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
     4c8:	b480      	push	{r7}
     4ca:	b083      	sub	sp, #12
     4cc:	af00      	add	r7, sp, #0
     4ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	699b      	ldr	r3, [r3, #24]
     4d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4dc:	bf00      	nop
     4de:	370c      	adds	r7, #12
     4e0:	46bd      	mov	sp, r7
     4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e6:	4770      	bx	lr

000004e8 <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
     4e8:	b480      	push	{r7}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	699b      	ldr	r3, [r3, #24]
     4f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4fc:	bf00      	nop
     4fe:	370c      	adds	r7, #12
     500:	46bd      	mov	sp, r7
     502:	f85d 7b04 	ldr.w	r7, [sp], #4
     506:	4770      	bx	lr

00000508 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     508:	b480      	push	{r7}
     50a:	b083      	sub	sp, #12
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     510:	687b      	ldr	r3, [r7, #4]
     512:	699b      	ldr	r3, [r3, #24]
     514:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     518:	687b      	ldr	r3, [r7, #4]
     51a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     51c:	bf00      	nop
     51e:	370c      	adds	r7, #12
     520:	46bd      	mov	sp, r7
     522:	f85d 7b04 	ldr.w	r7, [sp], #4
     526:	4770      	bx	lr

00000528 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     528:	b480      	push	{r7}
     52a:	b083      	sub	sp, #12
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     530:	687b      	ldr	r3, [r7, #4]
     532:	699b      	ldr	r3, [r3, #24]
     534:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     538:	687b      	ldr	r3, [r7, #4]
     53a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     53c:	bf00      	nop
     53e:	370c      	adds	r7, #12
     540:	46bd      	mov	sp, r7
     542:	f85d 7b04 	ldr.w	r7, [sp], #4
     546:	4770      	bx	lr

00000548 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     548:	b480      	push	{r7}
     54a:	b083      	sub	sp, #12
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     550:	687b      	ldr	r3, [r7, #4]
     552:	699b      	ldr	r3, [r3, #24]
     554:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     558:	687b      	ldr	r3, [r7, #4]
     55a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     55c:	bf00      	nop
     55e:	370c      	adds	r7, #12
     560:	46bd      	mov	sp, r7
     562:	f85d 7b04 	ldr.w	r7, [sp], #4
     566:	4770      	bx	lr

00000568 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     568:	b480      	push	{r7}
     56a:	b083      	sub	sp, #12
     56c:	af00      	add	r7, sp, #0
     56e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     570:	687b      	ldr	r3, [r7, #4]
     572:	699b      	ldr	r3, [r3, #24]
     574:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     578:	687b      	ldr	r3, [r7, #4]
     57a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     57c:	bf00      	nop
     57e:	370c      	adds	r7, #12
     580:	46bd      	mov	sp, r7
     582:	f85d 7b04 	ldr.w	r7, [sp], #4
     586:	4770      	bx	lr

00000588 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     588:	b480      	push	{r7}
     58a:	b083      	sub	sp, #12
     58c:	af00      	add	r7, sp, #0
     58e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     590:	687b      	ldr	r3, [r7, #4]
     592:	69db      	ldr	r3, [r3, #28]
     594:	f043 0220 	orr.w	r2, r3, #32
     598:	687b      	ldr	r3, [r7, #4]
     59a:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     59c:	bf00      	nop
     59e:	370c      	adds	r7, #12
     5a0:	46bd      	mov	sp, r7
     5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a6:	4770      	bx	lr

000005a8 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     5a8:	b480      	push	{r7}
     5aa:	b083      	sub	sp, #12
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	69db      	ldr	r3, [r3, #28]
     5b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5bc:	bf00      	nop
     5be:	370c      	adds	r7, #12
     5c0:	46bd      	mov	sp, r7
     5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c6:	4770      	bx	lr

000005c8 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     5c8:	b480      	push	{r7}
     5ca:	b083      	sub	sp, #12
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     5d0:	687b      	ldr	r3, [r7, #4]
     5d2:	6a1b      	ldr	r3, [r3, #32]
     5d4:	f043 0204 	orr.w	r2, r3, #4
     5d8:	687b      	ldr	r3, [r7, #4]
     5da:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5dc:	bf00      	nop
     5de:	370c      	adds	r7, #12
     5e0:	46bd      	mov	sp, r7
     5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e6:	4770      	bx	lr

000005e8 <hri_mclk_set_APBDMASK_ADC0_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC7;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	6a1b      	ldr	r3, [r3, #32]
     5f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5fc:	bf00      	nop
     5fe:	370c      	adds	r7, #12
     600:	46bd      	mov	sp, r7
     602:	f85d 7b04 	ldr.w	r7, [sp], #4
     606:	4770      	bx	lr

00000608 <hri_mclk_set_APBDMASK_ADC1_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_ADC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
     608:	b480      	push	{r7}
     60a:	b083      	sub	sp, #12
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     610:	687b      	ldr	r3, [r7, #4]
     612:	6a1b      	ldr	r3, [r3, #32]
     614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     618:	687b      	ldr	r3, [r7, #4]
     61a:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     61c:	bf00      	nop
     61e:	370c      	adds	r7, #12
     620:	46bd      	mov	sp, r7
     622:	f85d 7b04 	ldr.w	r7, [sp], #4
     626:	4770      	bx	lr

00000628 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     628:	b480      	push	{r7}
     62a:	b085      	sub	sp, #20
     62c:	af00      	add	r7, sp, #0
     62e:	60f8      	str	r0, [r7, #12]
     630:	460b      	mov	r3, r1
     632:	607a      	str	r2, [r7, #4]
     634:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     636:	7afb      	ldrb	r3, [r7, #11]
     638:	68fa      	ldr	r2, [r7, #12]
     63a:	01db      	lsls	r3, r3, #7
     63c:	4413      	add	r3, r2
     63e:	3308      	adds	r3, #8
     640:	687a      	ldr	r2, [r7, #4]
     642:	601a      	str	r2, [r3, #0]
}
     644:	bf00      	nop
     646:	3714      	adds	r7, #20
     648:	46bd      	mov	sp, r7
     64a:	f85d 7b04 	ldr.w	r7, [sp], #4
     64e:	4770      	bx	lr

00000650 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     650:	b480      	push	{r7}
     652:	b085      	sub	sp, #20
     654:	af00      	add	r7, sp, #0
     656:	60f8      	str	r0, [r7, #12]
     658:	460b      	mov	r3, r1
     65a:	607a      	str	r2, [r7, #4]
     65c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     65e:	7afb      	ldrb	r3, [r7, #11]
     660:	68fa      	ldr	r2, [r7, #12]
     662:	01db      	lsls	r3, r3, #7
     664:	4413      	add	r3, r2
     666:	3304      	adds	r3, #4
     668:	687a      	ldr	r2, [r7, #4]
     66a:	601a      	str	r2, [r3, #0]
}
     66c:	bf00      	nop
     66e:	3714      	adds	r7, #20
     670:	46bd      	mov	sp, r7
     672:	f85d 7b04 	ldr.w	r7, [sp], #4
     676:	4770      	bx	lr

00000678 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     678:	b480      	push	{r7}
     67a:	b085      	sub	sp, #20
     67c:	af00      	add	r7, sp, #0
     67e:	60f8      	str	r0, [r7, #12]
     680:	460b      	mov	r3, r1
     682:	607a      	str	r2, [r7, #4]
     684:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     686:	7afb      	ldrb	r3, [r7, #11]
     688:	68fa      	ldr	r2, [r7, #12]
     68a:	01db      	lsls	r3, r3, #7
     68c:	4413      	add	r3, r2
     68e:	3318      	adds	r3, #24
     690:	687a      	ldr	r2, [r7, #4]
     692:	601a      	str	r2, [r3, #0]
}
     694:	bf00      	nop
     696:	3714      	adds	r7, #20
     698:	46bd      	mov	sp, r7
     69a:	f85d 7b04 	ldr.w	r7, [sp], #4
     69e:	4770      	bx	lr

000006a0 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     6a0:	b480      	push	{r7}
     6a2:	b085      	sub	sp, #20
     6a4:	af00      	add	r7, sp, #0
     6a6:	60f8      	str	r0, [r7, #12]
     6a8:	460b      	mov	r3, r1
     6aa:	607a      	str	r2, [r7, #4]
     6ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6ae:	7afb      	ldrb	r3, [r7, #11]
     6b0:	68fa      	ldr	r2, [r7, #12]
     6b2:	01db      	lsls	r3, r3, #7
     6b4:	4413      	add	r3, r2
     6b6:	3314      	adds	r3, #20
     6b8:	687a      	ldr	r2, [r7, #4]
     6ba:	601a      	str	r2, [r3, #0]
}
     6bc:	bf00      	nop
     6be:	3714      	adds	r7, #20
     6c0:	46bd      	mov	sp, r7
     6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c6:	4770      	bx	lr

000006c8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     6c8:	b480      	push	{r7}
     6ca:	b085      	sub	sp, #20
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
     6d0:	4608      	mov	r0, r1
     6d2:	4611      	mov	r1, r2
     6d4:	461a      	mov	r2, r3
     6d6:	4603      	mov	r3, r0
     6d8:	70fb      	strb	r3, [r7, #3]
     6da:	460b      	mov	r3, r1
     6dc:	70bb      	strb	r3, [r7, #2]
     6de:	4613      	mov	r3, r2
     6e0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e2:	78fa      	ldrb	r2, [r7, #3]
     6e4:	78bb      	ldrb	r3, [r7, #2]
     6e6:	6879      	ldr	r1, [r7, #4]
     6e8:	01d2      	lsls	r2, r2, #7
     6ea:	440a      	add	r2, r1
     6ec:	4413      	add	r3, r2
     6ee:	3330      	adds	r3, #48	; 0x30
     6f0:	781b      	ldrb	r3, [r3, #0]
     6f2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6f4:	7bfb      	ldrb	r3, [r7, #15]
     6f6:	f023 030f 	bic.w	r3, r3, #15
     6fa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     6fc:	787b      	ldrb	r3, [r7, #1]
     6fe:	f003 030f 	and.w	r3, r3, #15
     702:	b2da      	uxtb	r2, r3
     704:	7bfb      	ldrb	r3, [r7, #15]
     706:	4313      	orrs	r3, r2
     708:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70a:	78fa      	ldrb	r2, [r7, #3]
     70c:	78bb      	ldrb	r3, [r7, #2]
     70e:	6879      	ldr	r1, [r7, #4]
     710:	01d2      	lsls	r2, r2, #7
     712:	440a      	add	r2, r1
     714:	4413      	add	r3, r2
     716:	3330      	adds	r3, #48	; 0x30
     718:	7bfa      	ldrb	r2, [r7, #15]
     71a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     71c:	bf00      	nop
     71e:	3714      	adds	r7, #20
     720:	46bd      	mov	sp, r7
     722:	f85d 7b04 	ldr.w	r7, [sp], #4
     726:	4770      	bx	lr

00000728 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     728:	b480      	push	{r7}
     72a:	b085      	sub	sp, #20
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
     730:	4608      	mov	r0, r1
     732:	4611      	mov	r1, r2
     734:	461a      	mov	r2, r3
     736:	4603      	mov	r3, r0
     738:	70fb      	strb	r3, [r7, #3]
     73a:	460b      	mov	r3, r1
     73c:	70bb      	strb	r3, [r7, #2]
     73e:	4613      	mov	r3, r2
     740:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     742:	78fa      	ldrb	r2, [r7, #3]
     744:	78bb      	ldrb	r3, [r7, #2]
     746:	6879      	ldr	r1, [r7, #4]
     748:	01d2      	lsls	r2, r2, #7
     74a:	440a      	add	r2, r1
     74c:	4413      	add	r3, r2
     74e:	3330      	adds	r3, #48	; 0x30
     750:	781b      	ldrb	r3, [r3, #0]
     752:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     754:	7bfb      	ldrb	r3, [r7, #15]
     756:	f003 030f 	and.w	r3, r3, #15
     75a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     75c:	787b      	ldrb	r3, [r7, #1]
     75e:	011b      	lsls	r3, r3, #4
     760:	b2da      	uxtb	r2, r3
     762:	7bfb      	ldrb	r3, [r7, #15]
     764:	4313      	orrs	r3, r2
     766:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     768:	78fa      	ldrb	r2, [r7, #3]
     76a:	78bb      	ldrb	r3, [r7, #2]
     76c:	6879      	ldr	r1, [r7, #4]
     76e:	01d2      	lsls	r2, r2, #7
     770:	440a      	add	r2, r1
     772:	4413      	add	r3, r2
     774:	3330      	adds	r3, #48	; 0x30
     776:	7bfa      	ldrb	r2, [r7, #15]
     778:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     77a:	bf00      	nop
     77c:	3714      	adds	r7, #20
     77e:	46bd      	mov	sp, r7
     780:	f85d 7b04 	ldr.w	r7, [sp], #4
     784:	4770      	bx	lr

00000786 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     786:	b480      	push	{r7}
     788:	b085      	sub	sp, #20
     78a:	af00      	add	r7, sp, #0
     78c:	6078      	str	r0, [r7, #4]
     78e:	4608      	mov	r0, r1
     790:	4611      	mov	r1, r2
     792:	461a      	mov	r2, r3
     794:	4603      	mov	r3, r0
     796:	70fb      	strb	r3, [r7, #3]
     798:	460b      	mov	r3, r1
     79a:	70bb      	strb	r3, [r7, #2]
     79c:	4613      	mov	r3, r2
     79e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a0:	78fa      	ldrb	r2, [r7, #3]
     7a2:	78bb      	ldrb	r3, [r7, #2]
     7a4:	6879      	ldr	r1, [r7, #4]
     7a6:	01d2      	lsls	r2, r2, #7
     7a8:	440a      	add	r2, r1
     7aa:	4413      	add	r3, r2
     7ac:	3340      	adds	r3, #64	; 0x40
     7ae:	781b      	ldrb	r3, [r3, #0]
     7b0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b2:	7bfb      	ldrb	r3, [r7, #15]
     7b4:	f023 0301 	bic.w	r3, r3, #1
     7b8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7ba:	787a      	ldrb	r2, [r7, #1]
     7bc:	7bfb      	ldrb	r3, [r7, #15]
     7be:	4313      	orrs	r3, r2
     7c0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c2:	78fa      	ldrb	r2, [r7, #3]
     7c4:	78bb      	ldrb	r3, [r7, #2]
     7c6:	6879      	ldr	r1, [r7, #4]
     7c8:	01d2      	lsls	r2, r2, #7
     7ca:	440a      	add	r2, r1
     7cc:	4413      	add	r3, r2
     7ce:	3340      	adds	r3, #64	; 0x40
     7d0:	7bfa      	ldrb	r2, [r7, #15]
     7d2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7d4:	bf00      	nop
     7d6:	3714      	adds	r7, #20
     7d8:	46bd      	mov	sp, r7
     7da:	f85d 7b04 	ldr.w	r7, [sp], #4
     7de:	4770      	bx	lr

000007e0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     7e0:	b490      	push	{r4, r7}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
     7e6:	6078      	str	r0, [r7, #4]
     7e8:	460b      	mov	r3, r1
     7ea:	70fb      	strb	r3, [r7, #3]
     7ec:	4613      	mov	r3, r2
     7ee:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     7f0:	78fa      	ldrb	r2, [r7, #3]
     7f2:	78bb      	ldrb	r3, [r7, #2]
     7f4:	78f8      	ldrb	r0, [r7, #3]
     7f6:	78b9      	ldrb	r1, [r7, #2]
     7f8:	687c      	ldr	r4, [r7, #4]
     7fa:	01c0      	lsls	r0, r0, #7
     7fc:	4420      	add	r0, r4
     7fe:	4401      	add	r1, r0
     800:	3140      	adds	r1, #64	; 0x40
     802:	7809      	ldrb	r1, [r1, #0]
     804:	b2c9      	uxtb	r1, r1
     806:	f041 0104 	orr.w	r1, r1, #4
     80a:	b2c8      	uxtb	r0, r1
     80c:	6879      	ldr	r1, [r7, #4]
     80e:	01d2      	lsls	r2, r2, #7
     810:	440a      	add	r2, r1
     812:	4413      	add	r3, r2
     814:	3340      	adds	r3, #64	; 0x40
     816:	4602      	mov	r2, r0
     818:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     81a:	bf00      	nop
     81c:	3708      	adds	r7, #8
     81e:	46bd      	mov	sp, r7
     820:	bc90      	pop	{r4, r7}
     822:	4770      	bx	lr

00000824 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     824:	b490      	push	{r4, r7}
     826:	b082      	sub	sp, #8
     828:	af00      	add	r7, sp, #0
     82a:	6078      	str	r0, [r7, #4]
     82c:	460b      	mov	r3, r1
     82e:	70fb      	strb	r3, [r7, #3]
     830:	4613      	mov	r3, r2
     832:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     834:	78fa      	ldrb	r2, [r7, #3]
     836:	78bb      	ldrb	r3, [r7, #2]
     838:	78f8      	ldrb	r0, [r7, #3]
     83a:	78b9      	ldrb	r1, [r7, #2]
     83c:	687c      	ldr	r4, [r7, #4]
     83e:	01c0      	lsls	r0, r0, #7
     840:	4420      	add	r0, r4
     842:	4401      	add	r1, r0
     844:	3140      	adds	r1, #64	; 0x40
     846:	7809      	ldrb	r1, [r1, #0]
     848:	b2c9      	uxtb	r1, r1
     84a:	f021 0104 	bic.w	r1, r1, #4
     84e:	b2c8      	uxtb	r0, r1
     850:	6879      	ldr	r1, [r7, #4]
     852:	01d2      	lsls	r2, r2, #7
     854:	440a      	add	r2, r1
     856:	4413      	add	r3, r2
     858:	3340      	adds	r3, #64	; 0x40
     85a:	4602      	mov	r2, r0
     85c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     85e:	bf00      	nop
     860:	3708      	adds	r7, #8
     862:	46bd      	mov	sp, r7
     864:	bc90      	pop	{r4, r7}
     866:	4770      	bx	lr

00000868 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     868:	b480      	push	{r7}
     86a:	b085      	sub	sp, #20
     86c:	af00      	add	r7, sp, #0
     86e:	60f8      	str	r0, [r7, #12]
     870:	460b      	mov	r3, r1
     872:	607a      	str	r2, [r7, #4]
     874:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     876:	7afb      	ldrb	r3, [r7, #11]
     878:	68fa      	ldr	r2, [r7, #12]
     87a:	01db      	lsls	r3, r3, #7
     87c:	4413      	add	r3, r2
     87e:	3328      	adds	r3, #40	; 0x28
     880:	687a      	ldr	r2, [r7, #4]
     882:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     884:	bf00      	nop
     886:	3714      	adds	r7, #20
     888:	46bd      	mov	sp, r7
     88a:	f85d 7b04 	ldr.w	r7, [sp], #4
     88e:	4770      	bx	lr

00000890 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	4603      	mov	r3, r0
     898:	6039      	str	r1, [r7, #0]
     89a:	71fb      	strb	r3, [r7, #7]
     89c:	4613      	mov	r3, r2
     89e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     8a0:	79bb      	ldrb	r3, [r7, #6]
     8a2:	2b01      	cmp	r3, #1
     8a4:	d01c      	beq.n	8e0 <_gpio_set_direction+0x50>
     8a6:	2b02      	cmp	r3, #2
     8a8:	d037      	beq.n	91a <_gpio_set_direction+0x8a>
     8aa:	2b00      	cmp	r3, #0
     8ac:	d14e      	bne.n	94c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     8ae:	79fb      	ldrb	r3, [r7, #7]
     8b0:	683a      	ldr	r2, [r7, #0]
     8b2:	4619      	mov	r1, r3
     8b4:	482a      	ldr	r0, [pc, #168]	; (960 <_gpio_set_direction+0xd0>)
     8b6:	4b2b      	ldr	r3, [pc, #172]	; (964 <_gpio_set_direction+0xd4>)
     8b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     8ba:	683b      	ldr	r3, [r7, #0]
     8bc:	b29b      	uxth	r3, r3
     8be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     8c2:	79fb      	ldrb	r3, [r7, #7]
     8c4:	4619      	mov	r1, r3
     8c6:	4826      	ldr	r0, [pc, #152]	; (960 <_gpio_set_direction+0xd0>)
     8c8:	4b27      	ldr	r3, [pc, #156]	; (968 <_gpio_set_direction+0xd8>)
     8ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     8cc:	683b      	ldr	r3, [r7, #0]
     8ce:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     8d0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     8d4:	79fb      	ldrb	r3, [r7, #7]
     8d6:	4619      	mov	r1, r3
     8d8:	4821      	ldr	r0, [pc, #132]	; (960 <_gpio_set_direction+0xd0>)
     8da:	4b23      	ldr	r3, [pc, #140]	; (968 <_gpio_set_direction+0xd8>)
     8dc:	4798      	blx	r3
		break;
     8de:	e03a      	b.n	956 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     8e0:	79fb      	ldrb	r3, [r7, #7]
     8e2:	683a      	ldr	r2, [r7, #0]
     8e4:	4619      	mov	r1, r3
     8e6:	481e      	ldr	r0, [pc, #120]	; (960 <_gpio_set_direction+0xd0>)
     8e8:	4b1e      	ldr	r3, [pc, #120]	; (964 <_gpio_set_direction+0xd4>)
     8ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     8ec:	683b      	ldr	r3, [r7, #0]
     8ee:	b29b      	uxth	r3, r3
     8f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     8f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     8f8:	79f9      	ldrb	r1, [r7, #7]
     8fa:	461a      	mov	r2, r3
     8fc:	4818      	ldr	r0, [pc, #96]	; (960 <_gpio_set_direction+0xd0>)
     8fe:	4b1a      	ldr	r3, [pc, #104]	; (968 <_gpio_set_direction+0xd8>)
     900:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     902:	683b      	ldr	r3, [r7, #0]
     904:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     906:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     90a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     90e:	79f9      	ldrb	r1, [r7, #7]
     910:	461a      	mov	r2, r3
     912:	4813      	ldr	r0, [pc, #76]	; (960 <_gpio_set_direction+0xd0>)
     914:	4b14      	ldr	r3, [pc, #80]	; (968 <_gpio_set_direction+0xd8>)
     916:	4798      	blx	r3
		break;
     918:	e01d      	b.n	956 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     91a:	79fb      	ldrb	r3, [r7, #7]
     91c:	683a      	ldr	r2, [r7, #0]
     91e:	4619      	mov	r1, r3
     920:	480f      	ldr	r0, [pc, #60]	; (960 <_gpio_set_direction+0xd0>)
     922:	4b12      	ldr	r3, [pc, #72]	; (96c <_gpio_set_direction+0xdc>)
     924:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     926:	683b      	ldr	r3, [r7, #0]
     928:	b29b      	uxth	r3, r3
     92a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     92e:	79fb      	ldrb	r3, [r7, #7]
     930:	4619      	mov	r1, r3
     932:	480b      	ldr	r0, [pc, #44]	; (960 <_gpio_set_direction+0xd0>)
     934:	4b0c      	ldr	r3, [pc, #48]	; (968 <_gpio_set_direction+0xd8>)
     936:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     938:	683b      	ldr	r3, [r7, #0]
     93a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     93c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     940:	79fb      	ldrb	r3, [r7, #7]
     942:	4619      	mov	r1, r3
     944:	4806      	ldr	r0, [pc, #24]	; (960 <_gpio_set_direction+0xd0>)
     946:	4b08      	ldr	r3, [pc, #32]	; (968 <_gpio_set_direction+0xd8>)
     948:	4798      	blx	r3
		break;
     94a:	e004      	b.n	956 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     94c:	2246      	movs	r2, #70	; 0x46
     94e:	4908      	ldr	r1, [pc, #32]	; (970 <_gpio_set_direction+0xe0>)
     950:	2000      	movs	r0, #0
     952:	4b08      	ldr	r3, [pc, #32]	; (974 <_gpio_set_direction+0xe4>)
     954:	4798      	blx	r3
	}
}
     956:	bf00      	nop
     958:	3708      	adds	r7, #8
     95a:	46bd      	mov	sp, r7
     95c:	bd80      	pop	{r7, pc}
     95e:	bf00      	nop
     960:	41008000 	.word	0x41008000
     964:	00000651 	.word	0x00000651
     968:	00000869 	.word	0x00000869
     96c:	00000629 	.word	0x00000629
     970:	00008dc4 	.word	0x00008dc4
     974:	00002249 	.word	0x00002249

00000978 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     978:	b580      	push	{r7, lr}
     97a:	b082      	sub	sp, #8
     97c:	af00      	add	r7, sp, #0
     97e:	4603      	mov	r3, r0
     980:	6039      	str	r1, [r7, #0]
     982:	71fb      	strb	r3, [r7, #7]
     984:	4613      	mov	r3, r2
     986:	71bb      	strb	r3, [r7, #6]
	if (level) {
     988:	79bb      	ldrb	r3, [r7, #6]
     98a:	2b00      	cmp	r3, #0
     98c:	d006      	beq.n	99c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     98e:	79fb      	ldrb	r3, [r7, #7]
     990:	683a      	ldr	r2, [r7, #0]
     992:	4619      	mov	r1, r3
     994:	4806      	ldr	r0, [pc, #24]	; (9b0 <_gpio_set_level+0x38>)
     996:	4b07      	ldr	r3, [pc, #28]	; (9b4 <_gpio_set_level+0x3c>)
     998:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     99a:	e005      	b.n	9a8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     99c:	79fb      	ldrb	r3, [r7, #7]
     99e:	683a      	ldr	r2, [r7, #0]
     9a0:	4619      	mov	r1, r3
     9a2:	4803      	ldr	r0, [pc, #12]	; (9b0 <_gpio_set_level+0x38>)
     9a4:	4b04      	ldr	r3, [pc, #16]	; (9b8 <_gpio_set_level+0x40>)
     9a6:	4798      	blx	r3
}
     9a8:	bf00      	nop
     9aa:	3708      	adds	r7, #8
     9ac:	46bd      	mov	sp, r7
     9ae:	bd80      	pop	{r7, pc}
     9b0:	41008000 	.word	0x41008000
     9b4:	00000679 	.word	0x00000679
     9b8:	000006a1 	.word	0x000006a1

000009bc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b082      	sub	sp, #8
     9c0:	af00      	add	r7, sp, #0
     9c2:	4603      	mov	r3, r0
     9c4:	71fb      	strb	r3, [r7, #7]
     9c6:	460b      	mov	r3, r1
     9c8:	71bb      	strb	r3, [r7, #6]
     9ca:	4613      	mov	r3, r2
     9cc:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     9ce:	797b      	ldrb	r3, [r7, #5]
     9d0:	2b01      	cmp	r3, #1
     9d2:	d00a      	beq.n	9ea <_gpio_set_pin_pull_mode+0x2e>
     9d4:	2b02      	cmp	r3, #2
     9d6:	d01f      	beq.n	a18 <_gpio_set_pin_pull_mode+0x5c>
     9d8:	2b00      	cmp	r3, #0
     9da:	d134      	bne.n	a46 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     9dc:	79ba      	ldrb	r2, [r7, #6]
     9de:	79fb      	ldrb	r3, [r7, #7]
     9e0:	4619      	mov	r1, r3
     9e2:	481e      	ldr	r0, [pc, #120]	; (a5c <_gpio_set_pin_pull_mode+0xa0>)
     9e4:	4b1e      	ldr	r3, [pc, #120]	; (a60 <_gpio_set_pin_pull_mode+0xa4>)
     9e6:	4798      	blx	r3
		break;
     9e8:	e033      	b.n	a52 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     9ea:	79bb      	ldrb	r3, [r7, #6]
     9ec:	2201      	movs	r2, #1
     9ee:	409a      	lsls	r2, r3
     9f0:	79fb      	ldrb	r3, [r7, #7]
     9f2:	4619      	mov	r1, r3
     9f4:	4819      	ldr	r0, [pc, #100]	; (a5c <_gpio_set_pin_pull_mode+0xa0>)
     9f6:	4b1b      	ldr	r3, [pc, #108]	; (a64 <_gpio_set_pin_pull_mode+0xa8>)
     9f8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     9fa:	79ba      	ldrb	r2, [r7, #6]
     9fc:	79fb      	ldrb	r3, [r7, #7]
     9fe:	4619      	mov	r1, r3
     a00:	4816      	ldr	r0, [pc, #88]	; (a5c <_gpio_set_pin_pull_mode+0xa0>)
     a02:	4b19      	ldr	r3, [pc, #100]	; (a68 <_gpio_set_pin_pull_mode+0xac>)
     a04:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     a06:	79bb      	ldrb	r3, [r7, #6]
     a08:	2201      	movs	r2, #1
     a0a:	409a      	lsls	r2, r3
     a0c:	79fb      	ldrb	r3, [r7, #7]
     a0e:	4619      	mov	r1, r3
     a10:	4812      	ldr	r0, [pc, #72]	; (a5c <_gpio_set_pin_pull_mode+0xa0>)
     a12:	4b16      	ldr	r3, [pc, #88]	; (a6c <_gpio_set_pin_pull_mode+0xb0>)
     a14:	4798      	blx	r3
		break;
     a16:	e01c      	b.n	a52 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a18:	79bb      	ldrb	r3, [r7, #6]
     a1a:	2201      	movs	r2, #1
     a1c:	409a      	lsls	r2, r3
     a1e:	79fb      	ldrb	r3, [r7, #7]
     a20:	4619      	mov	r1, r3
     a22:	480e      	ldr	r0, [pc, #56]	; (a5c <_gpio_set_pin_pull_mode+0xa0>)
     a24:	4b0f      	ldr	r3, [pc, #60]	; (a64 <_gpio_set_pin_pull_mode+0xa8>)
     a26:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     a28:	79ba      	ldrb	r2, [r7, #6]
     a2a:	79fb      	ldrb	r3, [r7, #7]
     a2c:	4619      	mov	r1, r3
     a2e:	480b      	ldr	r0, [pc, #44]	; (a5c <_gpio_set_pin_pull_mode+0xa0>)
     a30:	4b0d      	ldr	r3, [pc, #52]	; (a68 <_gpio_set_pin_pull_mode+0xac>)
     a32:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     a34:	79bb      	ldrb	r3, [r7, #6]
     a36:	2201      	movs	r2, #1
     a38:	409a      	lsls	r2, r3
     a3a:	79fb      	ldrb	r3, [r7, #7]
     a3c:	4619      	mov	r1, r3
     a3e:	4807      	ldr	r0, [pc, #28]	; (a5c <_gpio_set_pin_pull_mode+0xa0>)
     a40:	4b0b      	ldr	r3, [pc, #44]	; (a70 <_gpio_set_pin_pull_mode+0xb4>)
     a42:	4798      	blx	r3
		break;
     a44:	e005      	b.n	a52 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     a46:	2289      	movs	r2, #137	; 0x89
     a48:	490a      	ldr	r1, [pc, #40]	; (a74 <_gpio_set_pin_pull_mode+0xb8>)
     a4a:	2000      	movs	r0, #0
     a4c:	4b0a      	ldr	r3, [pc, #40]	; (a78 <_gpio_set_pin_pull_mode+0xbc>)
     a4e:	4798      	blx	r3
		break;
     a50:	bf00      	nop
	}
}
     a52:	bf00      	nop
     a54:	3708      	adds	r7, #8
     a56:	46bd      	mov	sp, r7
     a58:	bd80      	pop	{r7, pc}
     a5a:	bf00      	nop
     a5c:	41008000 	.word	0x41008000
     a60:	00000825 	.word	0x00000825
     a64:	00000651 	.word	0x00000651
     a68:	000007e1 	.word	0x000007e1
     a6c:	00000679 	.word	0x00000679
     a70:	000006a1 	.word	0x000006a1
     a74:	00008dc4 	.word	0x00008dc4
     a78:	00002249 	.word	0x00002249

00000a7c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     a7c:	b590      	push	{r4, r7, lr}
     a7e:	b085      	sub	sp, #20
     a80:	af00      	add	r7, sp, #0
     a82:	6078      	str	r0, [r7, #4]
     a84:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	095b      	lsrs	r3, r3, #5
     a8a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	b2db      	uxtb	r3, r3
     a90:	f003 031f 	and.w	r3, r3, #31
     a94:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     a96:	683b      	ldr	r3, [r7, #0]
     a98:	f1b3 3fff 	cmp.w	r3, #4294967295
     a9c:	d106      	bne.n	aac <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     a9e:	7bba      	ldrb	r2, [r7, #14]
     aa0:	7bf9      	ldrb	r1, [r7, #15]
     aa2:	2300      	movs	r3, #0
     aa4:	4812      	ldr	r0, [pc, #72]	; (af0 <_gpio_set_pin_function+0x74>)
     aa6:	4c13      	ldr	r4, [pc, #76]	; (af4 <_gpio_set_pin_function+0x78>)
     aa8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     aaa:	e01d      	b.n	ae8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     aac:	7bba      	ldrb	r2, [r7, #14]
     aae:	7bf9      	ldrb	r1, [r7, #15]
     ab0:	2301      	movs	r3, #1
     ab2:	480f      	ldr	r0, [pc, #60]	; (af0 <_gpio_set_pin_function+0x74>)
     ab4:	4c0f      	ldr	r4, [pc, #60]	; (af4 <_gpio_set_pin_function+0x78>)
     ab6:	47a0      	blx	r4
		if (pin & 1) {
     ab8:	7bbb      	ldrb	r3, [r7, #14]
     aba:	f003 0301 	and.w	r3, r3, #1
     abe:	2b00      	cmp	r3, #0
     ac0:	d009      	beq.n	ad6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     ac2:	7bbb      	ldrb	r3, [r7, #14]
     ac4:	085b      	lsrs	r3, r3, #1
     ac6:	b2da      	uxtb	r2, r3
     ac8:	683b      	ldr	r3, [r7, #0]
     aca:	b2db      	uxtb	r3, r3
     acc:	7bf9      	ldrb	r1, [r7, #15]
     ace:	4808      	ldr	r0, [pc, #32]	; (af0 <_gpio_set_pin_function+0x74>)
     ad0:	4c09      	ldr	r4, [pc, #36]	; (af8 <_gpio_set_pin_function+0x7c>)
     ad2:	47a0      	blx	r4
}
     ad4:	e008      	b.n	ae8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     ad6:	7bbb      	ldrb	r3, [r7, #14]
     ad8:	085b      	lsrs	r3, r3, #1
     ada:	b2da      	uxtb	r2, r3
     adc:	683b      	ldr	r3, [r7, #0]
     ade:	b2db      	uxtb	r3, r3
     ae0:	7bf9      	ldrb	r1, [r7, #15]
     ae2:	4803      	ldr	r0, [pc, #12]	; (af0 <_gpio_set_pin_function+0x74>)
     ae4:	4c05      	ldr	r4, [pc, #20]	; (afc <_gpio_set_pin_function+0x80>)
     ae6:	47a0      	blx	r4
}
     ae8:	bf00      	nop
     aea:	3714      	adds	r7, #20
     aec:	46bd      	mov	sp, r7
     aee:	bd90      	pop	{r4, r7, pc}
     af0:	41008000 	.word	0x41008000
     af4:	00000787 	.word	0x00000787
     af8:	00000729 	.word	0x00000729
     afc:	000006c9 	.word	0x000006c9

00000b00 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
     b06:	4603      	mov	r3, r0
     b08:	460a      	mov	r2, r1
     b0a:	71fb      	strb	r3, [r7, #7]
     b0c:	4613      	mov	r3, r2
     b0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     b10:	79fb      	ldrb	r3, [r7, #7]
     b12:	095b      	lsrs	r3, r3, #5
     b14:	b2d8      	uxtb	r0, r3
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	f003 031f 	and.w	r3, r3, #31
     b1c:	b2db      	uxtb	r3, r3
     b1e:	79ba      	ldrb	r2, [r7, #6]
     b20:	4619      	mov	r1, r3
     b22:	4b03      	ldr	r3, [pc, #12]	; (b30 <gpio_set_pin_pull_mode+0x30>)
     b24:	4798      	blx	r3
}
     b26:	bf00      	nop
     b28:	3708      	adds	r7, #8
     b2a:	46bd      	mov	sp, r7
     b2c:	bd80      	pop	{r7, pc}
     b2e:	bf00      	nop
     b30:	000009bd 	.word	0x000009bd

00000b34 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     b34:	b580      	push	{r7, lr}
     b36:	b082      	sub	sp, #8
     b38:	af00      	add	r7, sp, #0
     b3a:	6078      	str	r0, [r7, #4]
     b3c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     b3e:	6839      	ldr	r1, [r7, #0]
     b40:	6878      	ldr	r0, [r7, #4]
     b42:	4b03      	ldr	r3, [pc, #12]	; (b50 <gpio_set_pin_function+0x1c>)
     b44:	4798      	blx	r3
}
     b46:	bf00      	nop
     b48:	3708      	adds	r7, #8
     b4a:	46bd      	mov	sp, r7
     b4c:	bd80      	pop	{r7, pc}
     b4e:	bf00      	nop
     b50:	00000a7d 	.word	0x00000a7d

00000b54 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     b54:	b580      	push	{r7, lr}
     b56:	b082      	sub	sp, #8
     b58:	af00      	add	r7, sp, #0
     b5a:	4603      	mov	r3, r0
     b5c:	460a      	mov	r2, r1
     b5e:	71fb      	strb	r3, [r7, #7]
     b60:	4613      	mov	r3, r2
     b62:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     b64:	79fb      	ldrb	r3, [r7, #7]
     b66:	095b      	lsrs	r3, r3, #5
     b68:	b2d8      	uxtb	r0, r3
     b6a:	79fb      	ldrb	r3, [r7, #7]
     b6c:	f003 031f 	and.w	r3, r3, #31
     b70:	2201      	movs	r2, #1
     b72:	fa02 f303 	lsl.w	r3, r2, r3
     b76:	79ba      	ldrb	r2, [r7, #6]
     b78:	4619      	mov	r1, r3
     b7a:	4b03      	ldr	r3, [pc, #12]	; (b88 <gpio_set_pin_direction+0x34>)
     b7c:	4798      	blx	r3
}
     b7e:	bf00      	nop
     b80:	3708      	adds	r7, #8
     b82:	46bd      	mov	sp, r7
     b84:	bd80      	pop	{r7, pc}
     b86:	bf00      	nop
     b88:	00000891 	.word	0x00000891

00000b8c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	4603      	mov	r3, r0
     b94:	460a      	mov	r2, r1
     b96:	71fb      	strb	r3, [r7, #7]
     b98:	4613      	mov	r3, r2
     b9a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     b9c:	79fb      	ldrb	r3, [r7, #7]
     b9e:	095b      	lsrs	r3, r3, #5
     ba0:	b2d8      	uxtb	r0, r3
     ba2:	79fb      	ldrb	r3, [r7, #7]
     ba4:	f003 031f 	and.w	r3, r3, #31
     ba8:	2201      	movs	r2, #1
     baa:	fa02 f303 	lsl.w	r3, r2, r3
     bae:	79ba      	ldrb	r2, [r7, #6]
     bb0:	4619      	mov	r1, r3
     bb2:	4b03      	ldr	r3, [pc, #12]	; (bc0 <gpio_set_pin_level+0x34>)
     bb4:	4798      	blx	r3
}
     bb6:	bf00      	nop
     bb8:	3708      	adds	r7, #8
     bba:	46bd      	mov	sp, r7
     bbc:	bd80      	pop	{r7, pc}
     bbe:	bf00      	nop
     bc0:	00000979 	.word	0x00000979

00000bc4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	af00      	add	r7, sp, #0
	_init_chip();
     bc8:	4b01      	ldr	r3, [pc, #4]	; (bd0 <init_mcu+0xc>)
     bca:	4798      	blx	r3
}
     bcc:	bf00      	nop
     bce:	bd80      	pop	{r7, pc}
     bd0:	00002c45 	.word	0x00002c45

00000bd4 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     bd4:	b580      	push	{r7, lr}
     bd6:	b082      	sub	sp, #8
     bd8:	af00      	add	r7, sp, #0
     bda:	6078      	str	r0, [r7, #4]
     bdc:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	2b00      	cmp	r3, #0
     be2:	d004      	beq.n	bee <wdt_init+0x1a>
     be4:	683b      	ldr	r3, [r7, #0]
     be6:	2b00      	cmp	r3, #0
     be8:	d001      	beq.n	bee <wdt_init+0x1a>
     bea:	2301      	movs	r3, #1
     bec:	e000      	b.n	bf0 <wdt_init+0x1c>
     bee:	2300      	movs	r3, #0
     bf0:	f003 0301 	and.w	r3, r3, #1
     bf4:	b2db      	uxtb	r3, r3
     bf6:	2248      	movs	r2, #72	; 0x48
     bf8:	4907      	ldr	r1, [pc, #28]	; (c18 <wdt_init+0x44>)
     bfa:	4618      	mov	r0, r3
     bfc:	4b07      	ldr	r3, [pc, #28]	; (c1c <wdt_init+0x48>)
     bfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c00:	687b      	ldr	r3, [r7, #4]
     c02:	683a      	ldr	r2, [r7, #0]
     c04:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	4618      	mov	r0, r3
     c0a:	4b05      	ldr	r3, [pc, #20]	; (c20 <wdt_init+0x4c>)
     c0c:	4798      	blx	r3
     c0e:	4603      	mov	r3, r0
}
     c10:	4618      	mov	r0, r3
     c12:	3708      	adds	r7, #8
     c14:	46bd      	mov	sp, r7
     c16:	bd80      	pop	{r7, pc}
     c18:	00008de0 	.word	0x00008de0
     c1c:	00002249 	.word	0x00002249
     c20:	000089b9 	.word	0x000089b9

00000c24 <ADC_0_PORT_init>:
struct timer_descriptor TIMER_8;

struct wdt_descriptor WDT_0;

void ADC_0_PORT_init(void)
{
     c24:	b580      	push	{r7, lr}
     c26:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);
     c28:	2100      	movs	r1, #0
     c2a:	2002      	movs	r0, #2
     c2c:	4b0f      	ldr	r3, [pc, #60]	; (c6c <ADC_0_PORT_init+0x48>)
     c2e:	4798      	blx	r3

	gpio_set_pin_function(PA02, PINMUX_PA02B_ADC0_AIN0);
     c30:	490f      	ldr	r1, [pc, #60]	; (c70 <ADC_0_PORT_init+0x4c>)
     c32:	2002      	movs	r0, #2
     c34:	4b0f      	ldr	r3, [pc, #60]	; (c74 <ADC_0_PORT_init+0x50>)
     c36:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_OFF);
     c38:	2100      	movs	r1, #0
     c3a:	2003      	movs	r0, #3
     c3c:	4b0b      	ldr	r3, [pc, #44]	; (c6c <ADC_0_PORT_init+0x48>)
     c3e:	4798      	blx	r3

	gpio_set_pin_function(PA03, PINMUX_PA03B_ADC0_AIN1);
     c40:	490d      	ldr	r1, [pc, #52]	; (c78 <ADC_0_PORT_init+0x54>)
     c42:	2003      	movs	r0, #3
     c44:	4b0b      	ldr	r3, [pc, #44]	; (c74 <ADC_0_PORT_init+0x50>)
     c46:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB00, GPIO_DIRECTION_OFF);
     c48:	2100      	movs	r1, #0
     c4a:	2020      	movs	r0, #32
     c4c:	4b07      	ldr	r3, [pc, #28]	; (c6c <ADC_0_PORT_init+0x48>)
     c4e:	4798      	blx	r3

	gpio_set_pin_function(PB00, PINMUX_PB00B_ADC0_AIN12);
     c50:	490a      	ldr	r1, [pc, #40]	; (c7c <ADC_0_PORT_init+0x58>)
     c52:	2020      	movs	r0, #32
     c54:	4b07      	ldr	r3, [pc, #28]	; (c74 <ADC_0_PORT_init+0x50>)
     c56:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_OFF);
     c58:	2100      	movs	r1, #0
     c5a:	2021      	movs	r0, #33	; 0x21
     c5c:	4b03      	ldr	r3, [pc, #12]	; (c6c <ADC_0_PORT_init+0x48>)
     c5e:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01B_ADC0_AIN13);
     c60:	4907      	ldr	r1, [pc, #28]	; (c80 <ADC_0_PORT_init+0x5c>)
     c62:	2021      	movs	r0, #33	; 0x21
     c64:	4b03      	ldr	r3, [pc, #12]	; (c74 <ADC_0_PORT_init+0x50>)
     c66:	4798      	blx	r3
}
     c68:	bf00      	nop
     c6a:	bd80      	pop	{r7, pc}
     c6c:	00000b55 	.word	0x00000b55
     c70:	00020001 	.word	0x00020001
     c74:	00000b35 	.word	0x00000b35
     c78:	00030001 	.word	0x00030001
     c7c:	00200001 	.word	0x00200001
     c80:	00210001 	.word	0x00210001

00000c84 <ADC_0_CLOCK_init>:

void ADC_0_CLOCK_init(void)
{
     c84:	b580      	push	{r7, lr}
     c86:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
     c88:	4804      	ldr	r0, [pc, #16]	; (c9c <ADC_0_CLOCK_init+0x18>)
     c8a:	4b05      	ldr	r3, [pc, #20]	; (ca0 <ADC_0_CLOCK_init+0x1c>)
     c8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c8e:	2241      	movs	r2, #65	; 0x41
     c90:	2128      	movs	r1, #40	; 0x28
     c92:	4804      	ldr	r0, [pc, #16]	; (ca4 <ADC_0_CLOCK_init+0x20>)
     c94:	4b04      	ldr	r3, [pc, #16]	; (ca8 <ADC_0_CLOCK_init+0x24>)
     c96:	4798      	blx	r3
}
     c98:	bf00      	nop
     c9a:	bd80      	pop	{r7, pc}
     c9c:	40000800 	.word	0x40000800
     ca0:	000005e9 	.word	0x000005e9
     ca4:	40001c00 	.word	0x40001c00
     ca8:	00000383 	.word	0x00000383

00000cac <ADC_0_init>:

void ADC_0_init(void)
{
     cac:	b580      	push	{r7, lr}
     cae:	af00      	add	r7, sp, #0
	ADC_0_CLOCK_init();
     cb0:	4b05      	ldr	r3, [pc, #20]	; (cc8 <ADC_0_init+0x1c>)
     cb2:	4798      	blx	r3
	ADC_0_PORT_init();
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <ADC_0_init+0x20>)
     cb6:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     cb8:	2200      	movs	r2, #0
     cba:	4905      	ldr	r1, [pc, #20]	; (cd0 <ADC_0_init+0x24>)
     cbc:	4805      	ldr	r0, [pc, #20]	; (cd4 <ADC_0_init+0x28>)
     cbe:	4b06      	ldr	r3, [pc, #24]	; (cd8 <ADC_0_init+0x2c>)
     cc0:	4798      	blx	r3
}
     cc2:	bf00      	nop
     cc4:	bd80      	pop	{r7, pc}
     cc6:	bf00      	nop
     cc8:	00000c85 	.word	0x00000c85
     ccc:	00000c25 	.word	0x00000c25
     cd0:	43001c00 	.word	0x43001c00
     cd4:	200006ec 	.word	0x200006ec
     cd8:	00001575 	.word	0x00001575

00000cdc <ADC_1_PORT_init>:

void ADC_1_PORT_init(void)
{
     cdc:	b580      	push	{r7, lr}
     cde:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);
     ce0:	2100      	movs	r1, #0
     ce2:	2042      	movs	r0, #66	; 0x42
     ce4:	4b0b      	ldr	r3, [pc, #44]	; (d14 <ADC_1_PORT_init+0x38>)
     ce6:	4798      	blx	r3

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
     ce8:	490b      	ldr	r1, [pc, #44]	; (d18 <ADC_1_PORT_init+0x3c>)
     cea:	2042      	movs	r0, #66	; 0x42
     cec:	4b0b      	ldr	r3, [pc, #44]	; (d1c <ADC_1_PORT_init+0x40>)
     cee:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC00, GPIO_DIRECTION_OFF);
     cf0:	2100      	movs	r1, #0
     cf2:	2040      	movs	r0, #64	; 0x40
     cf4:	4b07      	ldr	r3, [pc, #28]	; (d14 <ADC_1_PORT_init+0x38>)
     cf6:	4798      	blx	r3

	gpio_set_pin_function(PC00, PINMUX_PC00B_ADC1_AIN10);
     cf8:	4909      	ldr	r1, [pc, #36]	; (d20 <ADC_1_PORT_init+0x44>)
     cfa:	2040      	movs	r0, #64	; 0x40
     cfc:	4b07      	ldr	r3, [pc, #28]	; (d1c <ADC_1_PORT_init+0x40>)
     cfe:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC01, GPIO_DIRECTION_OFF);
     d00:	2100      	movs	r1, #0
     d02:	2041      	movs	r0, #65	; 0x41
     d04:	4b03      	ldr	r3, [pc, #12]	; (d14 <ADC_1_PORT_init+0x38>)
     d06:	4798      	blx	r3

	gpio_set_pin_function(PC01, PINMUX_PC01B_ADC1_AIN11);
     d08:	4906      	ldr	r1, [pc, #24]	; (d24 <ADC_1_PORT_init+0x48>)
     d0a:	2041      	movs	r0, #65	; 0x41
     d0c:	4b03      	ldr	r3, [pc, #12]	; (d1c <ADC_1_PORT_init+0x40>)
     d0e:	4798      	blx	r3
}
     d10:	bf00      	nop
     d12:	bd80      	pop	{r7, pc}
     d14:	00000b55 	.word	0x00000b55
     d18:	00420001 	.word	0x00420001
     d1c:	00000b35 	.word	0x00000b35
     d20:	00400001 	.word	0x00400001
     d24:	00410001 	.word	0x00410001

00000d28 <ADC_1_CLOCK_init>:

void ADC_1_CLOCK_init(void)
{
     d28:	b580      	push	{r7, lr}
     d2a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
     d2c:	4804      	ldr	r0, [pc, #16]	; (d40 <ADC_1_CLOCK_init+0x18>)
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <ADC_1_CLOCK_init+0x1c>)
     d30:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d32:	2241      	movs	r2, #65	; 0x41
     d34:	2129      	movs	r1, #41	; 0x29
     d36:	4804      	ldr	r0, [pc, #16]	; (d48 <ADC_1_CLOCK_init+0x20>)
     d38:	4b04      	ldr	r3, [pc, #16]	; (d4c <ADC_1_CLOCK_init+0x24>)
     d3a:	4798      	blx	r3
}
     d3c:	bf00      	nop
     d3e:	bd80      	pop	{r7, pc}
     d40:	40000800 	.word	0x40000800
     d44:	00000609 	.word	0x00000609
     d48:	40001c00 	.word	0x40001c00
     d4c:	00000383 	.word	0x00000383

00000d50 <ADC_1_init>:

void ADC_1_init(void)
{
     d50:	b580      	push	{r7, lr}
     d52:	af00      	add	r7, sp, #0
	ADC_1_CLOCK_init();
     d54:	4b05      	ldr	r3, [pc, #20]	; (d6c <ADC_1_init+0x1c>)
     d56:	4798      	blx	r3
	ADC_1_PORT_init();
     d58:	4b05      	ldr	r3, [pc, #20]	; (d70 <ADC_1_init+0x20>)
     d5a:	4798      	blx	r3
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     d5c:	2200      	movs	r2, #0
     d5e:	4905      	ldr	r1, [pc, #20]	; (d74 <ADC_1_init+0x24>)
     d60:	4805      	ldr	r0, [pc, #20]	; (d78 <ADC_1_init+0x28>)
     d62:	4b06      	ldr	r3, [pc, #24]	; (d7c <ADC_1_init+0x2c>)
     d64:	4798      	blx	r3
}
     d66:	bf00      	nop
     d68:	bd80      	pop	{r7, pc}
     d6a:	bf00      	nop
     d6c:	00000d29 	.word	0x00000d29
     d70:	00000cdd 	.word	0x00000cdd
     d74:	43002000 	.word	0x43002000
     d78:	20000854 	.word	0x20000854
     d7c:	00001575 	.word	0x00001575

00000d80 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     d80:	b580      	push	{r7, lr}
     d82:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d84:	2241      	movs	r2, #65	; 0x41
     d86:	2104      	movs	r1, #4
     d88:	481e      	ldr	r0, [pc, #120]	; (e04 <EXTERNAL_IRQ_0_init+0x84>)
     d8a:	4b1f      	ldr	r3, [pc, #124]	; (e08 <EXTERNAL_IRQ_0_init+0x88>)
     d8c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     d8e:	481f      	ldr	r0, [pc, #124]	; (e0c <EXTERNAL_IRQ_0_init+0x8c>)
     d90:	4b1f      	ldr	r3, [pc, #124]	; (e10 <EXTERNAL_IRQ_0_init+0x90>)
     d92:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB10, GPIO_DIRECTION_IN);
     d94:	2101      	movs	r1, #1
     d96:	202a      	movs	r0, #42	; 0x2a
     d98:	4b1e      	ldr	r3, [pc, #120]	; (e14 <EXTERNAL_IRQ_0_init+0x94>)
     d9a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB10,
     d9c:	2100      	movs	r1, #0
     d9e:	202a      	movs	r0, #42	; 0x2a
     da0:	4b1d      	ldr	r3, [pc, #116]	; (e18 <EXTERNAL_IRQ_0_init+0x98>)
     da2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10A_EIC_EXTINT10);
     da4:	f44f 1128 	mov.w	r1, #2752512	; 0x2a0000
     da8:	202a      	movs	r0, #42	; 0x2a
     daa:	4b1c      	ldr	r3, [pc, #112]	; (e1c <EXTERNAL_IRQ_0_init+0x9c>)
     dac:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
     dae:	2101      	movs	r1, #1
     db0:	202b      	movs	r0, #43	; 0x2b
     db2:	4b18      	ldr	r3, [pc, #96]	; (e14 <EXTERNAL_IRQ_0_init+0x94>)
     db4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB11,
     db6:	2100      	movs	r1, #0
     db8:	202b      	movs	r0, #43	; 0x2b
     dba:	4b17      	ldr	r3, [pc, #92]	; (e18 <EXTERNAL_IRQ_0_init+0x98>)
     dbc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB11, PINMUX_PB11A_EIC_EXTINT11);
     dbe:	f44f 112c 	mov.w	r1, #2818048	; 0x2b0000
     dc2:	202b      	movs	r0, #43	; 0x2b
     dc4:	4b15      	ldr	r3, [pc, #84]	; (e1c <EXTERNAL_IRQ_0_init+0x9c>)
     dc6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB12, GPIO_DIRECTION_IN);
     dc8:	2101      	movs	r1, #1
     dca:	202c      	movs	r0, #44	; 0x2c
     dcc:	4b11      	ldr	r3, [pc, #68]	; (e14 <EXTERNAL_IRQ_0_init+0x94>)
     dce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB12,
     dd0:	2100      	movs	r1, #0
     dd2:	202c      	movs	r0, #44	; 0x2c
     dd4:	4b10      	ldr	r3, [pc, #64]	; (e18 <EXTERNAL_IRQ_0_init+0x98>)
     dd6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB12, PINMUX_PB12A_EIC_EXTINT12);
     dd8:	f44f 1130 	mov.w	r1, #2883584	; 0x2c0000
     ddc:	202c      	movs	r0, #44	; 0x2c
     dde:	4b0f      	ldr	r3, [pc, #60]	; (e1c <EXTERNAL_IRQ_0_init+0x9c>)
     de0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB13, GPIO_DIRECTION_IN);
     de2:	2101      	movs	r1, #1
     de4:	202d      	movs	r0, #45	; 0x2d
     de6:	4b0b      	ldr	r3, [pc, #44]	; (e14 <EXTERNAL_IRQ_0_init+0x94>)
     de8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB13,
     dea:	2100      	movs	r1, #0
     dec:	202d      	movs	r0, #45	; 0x2d
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <EXTERNAL_IRQ_0_init+0x98>)
     df0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB13, PINMUX_PB13A_EIC_EXTINT13);
     df2:	f44f 1134 	mov.w	r1, #2949120	; 0x2d0000
     df6:	202d      	movs	r0, #45	; 0x2d
     df8:	4b08      	ldr	r3, [pc, #32]	; (e1c <EXTERNAL_IRQ_0_init+0x9c>)
     dfa:	4798      	blx	r3

	ext_irq_init();
     dfc:	4b08      	ldr	r3, [pc, #32]	; (e20 <EXTERNAL_IRQ_0_init+0xa0>)
     dfe:	4798      	blx	r3
}
     e00:	bf00      	nop
     e02:	bd80      	pop	{r7, pc}
     e04:	40001c00 	.word	0x40001c00
     e08:	00000383 	.word	0x00000383
     e0c:	40000800 	.word	0x40000800
     e10:	00000409 	.word	0x00000409
     e14:	00000b55 	.word	0x00000b55
     e18:	00000b01 	.word	0x00000b01
     e1c:	00000b35 	.word	0x00000b35
     e20:	0000164d 	.word	0x0000164d

00000e24 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     e24:	b580      	push	{r7, lr}
     e26:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     e28:	4806      	ldr	r0, [pc, #24]	; (e44 <TIMER_0_init+0x20>)
     e2a:	4b07      	ldr	r3, [pc, #28]	; (e48 <TIMER_0_init+0x24>)
     e2c:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     e2e:	4b07      	ldr	r3, [pc, #28]	; (e4c <TIMER_0_init+0x28>)
     e30:	4798      	blx	r3
     e32:	4603      	mov	r3, r0
     e34:	461a      	mov	r2, r3
     e36:	4906      	ldr	r1, [pc, #24]	; (e50 <TIMER_0_init+0x2c>)
     e38:	4806      	ldr	r0, [pc, #24]	; (e54 <TIMER_0_init+0x30>)
     e3a:	4b07      	ldr	r3, [pc, #28]	; (e58 <TIMER_0_init+0x34>)
     e3c:	4798      	blx	r3
}
     e3e:	bf00      	nop
     e40:	bd80      	pop	{r7, pc}
     e42:	bf00      	nop
     e44:	40000800 	.word	0x40000800
     e48:	000003e9 	.word	0x000003e9
     e4c:	00004361 	.word	0x00004361
     e50:	40002400 	.word	0x40002400
     e54:	200008c0 	.word	0x200008c0
     e58:	00001c15 	.word	0x00001c15

00000e5c <I2C_4_PORT_init>:

void I2C_4_PORT_init(void)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA08,
     e60:	2100      	movs	r1, #0
     e62:	2008      	movs	r0, #8
     e64:	4b07      	ldr	r3, [pc, #28]	; (e84 <I2C_4_PORT_init+0x28>)
     e66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08, PINMUX_PA08C_SERCOM0_PAD0);
     e68:	4907      	ldr	r1, [pc, #28]	; (e88 <I2C_4_PORT_init+0x2c>)
     e6a:	2008      	movs	r0, #8
     e6c:	4b07      	ldr	r3, [pc, #28]	; (e8c <I2C_4_PORT_init+0x30>)
     e6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA09,
     e70:	2100      	movs	r1, #0
     e72:	2009      	movs	r0, #9
     e74:	4b03      	ldr	r3, [pc, #12]	; (e84 <I2C_4_PORT_init+0x28>)
     e76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
     e78:	4905      	ldr	r1, [pc, #20]	; (e90 <I2C_4_PORT_init+0x34>)
     e7a:	2009      	movs	r0, #9
     e7c:	4b03      	ldr	r3, [pc, #12]	; (e8c <I2C_4_PORT_init+0x30>)
     e7e:	4798      	blx	r3
}
     e80:	bf00      	nop
     e82:	bd80      	pop	{r7, pc}
     e84:	00000b01 	.word	0x00000b01
     e88:	00080002 	.word	0x00080002
     e8c:	00000b35 	.word	0x00000b35
     e90:	00090002 	.word	0x00090002

00000e94 <I2C_4_CLOCK_init>:

void I2C_4_CLOCK_init(void)
{
     e94:	b580      	push	{r7, lr}
     e96:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e98:	2241      	movs	r2, #65	; 0x41
     e9a:	2107      	movs	r1, #7
     e9c:	4806      	ldr	r0, [pc, #24]	; (eb8 <I2C_4_CLOCK_init+0x24>)
     e9e:	4b07      	ldr	r3, [pc, #28]	; (ebc <I2C_4_CLOCK_init+0x28>)
     ea0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ea2:	2242      	movs	r2, #66	; 0x42
     ea4:	2103      	movs	r1, #3
     ea6:	4804      	ldr	r0, [pc, #16]	; (eb8 <I2C_4_CLOCK_init+0x24>)
     ea8:	4b04      	ldr	r3, [pc, #16]	; (ebc <I2C_4_CLOCK_init+0x28>)
     eaa:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     eac:	4804      	ldr	r0, [pc, #16]	; (ec0 <I2C_4_CLOCK_init+0x2c>)
     eae:	4b05      	ldr	r3, [pc, #20]	; (ec4 <I2C_4_CLOCK_init+0x30>)
     eb0:	4798      	blx	r3
}
     eb2:	bf00      	nop
     eb4:	bd80      	pop	{r7, pc}
     eb6:	bf00      	nop
     eb8:	40001c00 	.word	0x40001c00
     ebc:	00000383 	.word	0x00000383
     ec0:	40000800 	.word	0x40000800
     ec4:	00000429 	.word	0x00000429

00000ec8 <I2C_4_init>:

void I2C_4_init(void)
{
     ec8:	b580      	push	{r7, lr}
     eca:	af00      	add	r7, sp, #0
	I2C_4_CLOCK_init();
     ecc:	4b04      	ldr	r3, [pc, #16]	; (ee0 <I2C_4_init+0x18>)
     ece:	4798      	blx	r3
	i2c_m_async_init(&I2C_4, SERCOM0);
     ed0:	4904      	ldr	r1, [pc, #16]	; (ee4 <I2C_4_init+0x1c>)
     ed2:	4805      	ldr	r0, [pc, #20]	; (ee8 <I2C_4_init+0x20>)
     ed4:	4b05      	ldr	r3, [pc, #20]	; (eec <I2C_4_init+0x24>)
     ed6:	4798      	blx	r3
	I2C_4_PORT_init();
     ed8:	4b05      	ldr	r3, [pc, #20]	; (ef0 <I2C_4_init+0x28>)
     eda:	4798      	blx	r3
}
     edc:	bf00      	nop
     ede:	bd80      	pop	{r7, pc}
     ee0:	00000e95 	.word	0x00000e95
     ee4:	40003000 	.word	0x40003000
     ee8:	200008e0 	.word	0x200008e0
     eec:	00001859 	.word	0x00001859
     ef0:	00000e5d 	.word	0x00000e5d

00000ef4 <I2C_1_PORT_init>:

void I2C_1_PORT_init(void)
{
     ef4:	b580      	push	{r7, lr}
     ef6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
     ef8:	2100      	movs	r1, #0
     efa:	2010      	movs	r0, #16
     efc:	4b07      	ldr	r3, [pc, #28]	; (f1c <I2C_1_PORT_init+0x28>)
     efe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
     f00:	4907      	ldr	r1, [pc, #28]	; (f20 <I2C_1_PORT_init+0x2c>)
     f02:	2010      	movs	r0, #16
     f04:	4b07      	ldr	r3, [pc, #28]	; (f24 <I2C_1_PORT_init+0x30>)
     f06:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
     f08:	2100      	movs	r1, #0
     f0a:	2011      	movs	r0, #17
     f0c:	4b03      	ldr	r3, [pc, #12]	; (f1c <I2C_1_PORT_init+0x28>)
     f0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
     f10:	4905      	ldr	r1, [pc, #20]	; (f28 <I2C_1_PORT_init+0x34>)
     f12:	2011      	movs	r0, #17
     f14:	4b03      	ldr	r3, [pc, #12]	; (f24 <I2C_1_PORT_init+0x30>)
     f16:	4798      	blx	r3
}
     f18:	bf00      	nop
     f1a:	bd80      	pop	{r7, pc}
     f1c:	00000b01 	.word	0x00000b01
     f20:	00100002 	.word	0x00100002
     f24:	00000b35 	.word	0x00000b35
     f28:	00110002 	.word	0x00110002

00000f2c <I2C_1_CLOCK_init>:

void I2C_1_CLOCK_init(void)
{
     f2c:	b580      	push	{r7, lr}
     f2e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f30:	2241      	movs	r2, #65	; 0x41
     f32:	2108      	movs	r1, #8
     f34:	4806      	ldr	r0, [pc, #24]	; (f50 <I2C_1_CLOCK_init+0x24>)
     f36:	4b07      	ldr	r3, [pc, #28]	; (f54 <I2C_1_CLOCK_init+0x28>)
     f38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f3a:	2242      	movs	r2, #66	; 0x42
     f3c:	2103      	movs	r1, #3
     f3e:	4804      	ldr	r0, [pc, #16]	; (f50 <I2C_1_CLOCK_init+0x24>)
     f40:	4b04      	ldr	r3, [pc, #16]	; (f54 <I2C_1_CLOCK_init+0x28>)
     f42:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
     f44:	4804      	ldr	r0, [pc, #16]	; (f58 <I2C_1_CLOCK_init+0x2c>)
     f46:	4b05      	ldr	r3, [pc, #20]	; (f5c <I2C_1_CLOCK_init+0x30>)
     f48:	4798      	blx	r3
}
     f4a:	bf00      	nop
     f4c:	bd80      	pop	{r7, pc}
     f4e:	bf00      	nop
     f50:	40001c00 	.word	0x40001c00
     f54:	00000383 	.word	0x00000383
     f58:	40000800 	.word	0x40000800
     f5c:	00000449 	.word	0x00000449

00000f60 <I2C_1_init>:

void I2C_1_init(void)
{
     f60:	b580      	push	{r7, lr}
     f62:	af00      	add	r7, sp, #0
	I2C_1_CLOCK_init();
     f64:	4b04      	ldr	r3, [pc, #16]	; (f78 <I2C_1_init+0x18>)
     f66:	4798      	blx	r3
	i2c_m_async_init(&I2C_1, SERCOM1);
     f68:	4904      	ldr	r1, [pc, #16]	; (f7c <I2C_1_init+0x1c>)
     f6a:	4805      	ldr	r0, [pc, #20]	; (f80 <I2C_1_init+0x20>)
     f6c:	4b05      	ldr	r3, [pc, #20]	; (f84 <I2C_1_init+0x24>)
     f6e:	4798      	blx	r3
	I2C_1_PORT_init();
     f70:	4b05      	ldr	r3, [pc, #20]	; (f88 <I2C_1_init+0x28>)
     f72:	4798      	blx	r3
}
     f74:	bf00      	nop
     f76:	bd80      	pop	{r7, pc}
     f78:	00000f2d 	.word	0x00000f2d
     f7c:	40003400 	.word	0x40003400
     f80:	200006ac 	.word	0x200006ac
     f84:	00001859 	.word	0x00001859
     f88:	00000ef5 	.word	0x00000ef5

00000f8c <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     f8c:	b580      	push	{r7, lr}
     f8e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
     f90:	2100      	movs	r1, #0
     f92:	200c      	movs	r0, #12
     f94:	4b07      	ldr	r3, [pc, #28]	; (fb4 <I2C_0_PORT_init+0x28>)
     f96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
     f98:	4907      	ldr	r1, [pc, #28]	; (fb8 <I2C_0_PORT_init+0x2c>)
     f9a:	200c      	movs	r0, #12
     f9c:	4b07      	ldr	r3, [pc, #28]	; (fbc <I2C_0_PORT_init+0x30>)
     f9e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
     fa0:	2100      	movs	r1, #0
     fa2:	200d      	movs	r0, #13
     fa4:	4b03      	ldr	r3, [pc, #12]	; (fb4 <I2C_0_PORT_init+0x28>)
     fa6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
     fa8:	4905      	ldr	r1, [pc, #20]	; (fc0 <I2C_0_PORT_init+0x34>)
     faa:	200d      	movs	r0, #13
     fac:	4b03      	ldr	r3, [pc, #12]	; (fbc <I2C_0_PORT_init+0x30>)
     fae:	4798      	blx	r3
}
     fb0:	bf00      	nop
     fb2:	bd80      	pop	{r7, pc}
     fb4:	00000b01 	.word	0x00000b01
     fb8:	000c0002 	.word	0x000c0002
     fbc:	00000b35 	.word	0x00000b35
     fc0:	000d0002 	.word	0x000d0002

00000fc4 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fc8:	2241      	movs	r2, #65	; 0x41
     fca:	2117      	movs	r1, #23
     fcc:	4806      	ldr	r0, [pc, #24]	; (fe8 <I2C_0_CLOCK_init+0x24>)
     fce:	4b07      	ldr	r3, [pc, #28]	; (fec <I2C_0_CLOCK_init+0x28>)
     fd0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fd2:	2242      	movs	r2, #66	; 0x42
     fd4:	2103      	movs	r1, #3
     fd6:	4804      	ldr	r0, [pc, #16]	; (fe8 <I2C_0_CLOCK_init+0x24>)
     fd8:	4b04      	ldr	r3, [pc, #16]	; (fec <I2C_0_CLOCK_init+0x28>)
     fda:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
     fdc:	4804      	ldr	r0, [pc, #16]	; (ff0 <I2C_0_CLOCK_init+0x2c>)
     fde:	4b05      	ldr	r3, [pc, #20]	; (ff4 <I2C_0_CLOCK_init+0x30>)
     fe0:	4798      	blx	r3
}
     fe2:	bf00      	nop
     fe4:	bd80      	pop	{r7, pc}
     fe6:	bf00      	nop
     fe8:	40001c00 	.word	0x40001c00
     fec:	00000383 	.word	0x00000383
     ff0:	40000800 	.word	0x40000800
     ff4:	000004c9 	.word	0x000004c9

00000ff8 <I2C_0_init>:

void I2C_0_init(void)
{
     ff8:	b598      	push	{r3, r4, r7, lr}
     ffa:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
     ffc:	4b05      	ldr	r3, [pc, #20]	; (1014 <I2C_0_init+0x1c>)
     ffe:	4798      	blx	r3
	i2c_s_async_init(&I2C_0, SERCOM2, SERCOM2_i2c_s_buffer, SERCOM2_I2CS_BUFFER_SIZE);
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	4a05      	ldr	r2, [pc, #20]	; (1018 <I2C_0_init+0x20>)
    1004:	4905      	ldr	r1, [pc, #20]	; (101c <I2C_0_init+0x24>)
    1006:	4806      	ldr	r0, [pc, #24]	; (1020 <I2C_0_init+0x28>)
    1008:	4c06      	ldr	r4, [pc, #24]	; (1024 <I2C_0_init+0x2c>)
    100a:	47a0      	blx	r4
	I2C_0_PORT_init();
    100c:	4b06      	ldr	r3, [pc, #24]	; (1028 <I2C_0_init+0x30>)
    100e:	4798      	blx	r3
}
    1010:	bf00      	nop
    1012:	bd98      	pop	{r3, r4, r7, pc}
    1014:	00000fc5 	.word	0x00000fc5
    1018:	20000774 	.word	0x20000774
    101c:	41012000 	.word	0x41012000
    1020:	20000878 	.word	0x20000878
    1024:	000018ed 	.word	0x000018ed
    1028:	00000f8d 	.word	0x00000f8d

0000102c <I2C_3_PORT_init>:

void I2C_3_PORT_init(void)
{
    102c:	b580      	push	{r7, lr}
    102e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA22,
    1030:	2100      	movs	r1, #0
    1032:	2016      	movs	r0, #22
    1034:	4b07      	ldr	r3, [pc, #28]	; (1054 <I2C_3_PORT_init+0x28>)
    1036:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
    1038:	4907      	ldr	r1, [pc, #28]	; (1058 <I2C_3_PORT_init+0x2c>)
    103a:	2016      	movs	r0, #22
    103c:	4b07      	ldr	r3, [pc, #28]	; (105c <I2C_3_PORT_init+0x30>)
    103e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA23,
    1040:	2100      	movs	r1, #0
    1042:	2017      	movs	r0, #23
    1044:	4b03      	ldr	r3, [pc, #12]	; (1054 <I2C_3_PORT_init+0x28>)
    1046:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
    1048:	4905      	ldr	r1, [pc, #20]	; (1060 <I2C_3_PORT_init+0x34>)
    104a:	2017      	movs	r0, #23
    104c:	4b03      	ldr	r3, [pc, #12]	; (105c <I2C_3_PORT_init+0x30>)
    104e:	4798      	blx	r3
}
    1050:	bf00      	nop
    1052:	bd80      	pop	{r7, pc}
    1054:	00000b01 	.word	0x00000b01
    1058:	00160002 	.word	0x00160002
    105c:	00000b35 	.word	0x00000b35
    1060:	00170002 	.word	0x00170002

00001064 <I2C_3_CLOCK_init>:

void I2C_3_CLOCK_init(void)
{
    1064:	b580      	push	{r7, lr}
    1066:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1068:	2241      	movs	r2, #65	; 0x41
    106a:	2118      	movs	r1, #24
    106c:	4806      	ldr	r0, [pc, #24]	; (1088 <I2C_3_CLOCK_init+0x24>)
    106e:	4b07      	ldr	r3, [pc, #28]	; (108c <I2C_3_CLOCK_init+0x28>)
    1070:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1072:	2242      	movs	r2, #66	; 0x42
    1074:	2103      	movs	r1, #3
    1076:	4804      	ldr	r0, [pc, #16]	; (1088 <I2C_3_CLOCK_init+0x24>)
    1078:	4b04      	ldr	r3, [pc, #16]	; (108c <I2C_3_CLOCK_init+0x28>)
    107a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    107c:	4804      	ldr	r0, [pc, #16]	; (1090 <I2C_3_CLOCK_init+0x2c>)
    107e:	4b05      	ldr	r3, [pc, #20]	; (1094 <I2C_3_CLOCK_init+0x30>)
    1080:	4798      	blx	r3
}
    1082:	bf00      	nop
    1084:	bd80      	pop	{r7, pc}
    1086:	bf00      	nop
    1088:	40001c00 	.word	0x40001c00
    108c:	00000383 	.word	0x00000383
    1090:	40000800 	.word	0x40000800
    1094:	000004e9 	.word	0x000004e9

00001098 <I2C_3_init>:

void I2C_3_init(void)
{
    1098:	b580      	push	{r7, lr}
    109a:	af00      	add	r7, sp, #0
	I2C_3_CLOCK_init();
    109c:	4b04      	ldr	r3, [pc, #16]	; (10b0 <I2C_3_init+0x18>)
    109e:	4798      	blx	r3
	i2c_m_async_init(&I2C_3, SERCOM3);
    10a0:	4904      	ldr	r1, [pc, #16]	; (10b4 <I2C_3_init+0x1c>)
    10a2:	4805      	ldr	r0, [pc, #20]	; (10b8 <I2C_3_init+0x20>)
    10a4:	4b05      	ldr	r3, [pc, #20]	; (10bc <I2C_3_init+0x24>)
    10a6:	4798      	blx	r3
	I2C_3_PORT_init();
    10a8:	4b05      	ldr	r3, [pc, #20]	; (10c0 <I2C_3_init+0x28>)
    10aa:	4798      	blx	r3
}
    10ac:	bf00      	nop
    10ae:	bd80      	pop	{r7, pc}
    10b0:	00001065 	.word	0x00001065
    10b4:	41014000 	.word	0x41014000
    10b8:	20000814 	.word	0x20000814
    10bc:	00001859 	.word	0x00001859
    10c0:	0000102d 	.word	0x0000102d

000010c4 <I2C_2_PORT_init>:

void I2C_2_PORT_init(void)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD09,
    10c8:	2100      	movs	r1, #0
    10ca:	2069      	movs	r0, #105	; 0x69
    10cc:	4b07      	ldr	r3, [pc, #28]	; (10ec <I2C_2_PORT_init+0x28>)
    10ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09D_SERCOM6_PAD0);
    10d0:	4907      	ldr	r1, [pc, #28]	; (10f0 <I2C_2_PORT_init+0x2c>)
    10d2:	2069      	movs	r0, #105	; 0x69
    10d4:	4b07      	ldr	r3, [pc, #28]	; (10f4 <I2C_2_PORT_init+0x30>)
    10d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD08,
    10d8:	2100      	movs	r1, #0
    10da:	2068      	movs	r0, #104	; 0x68
    10dc:	4b03      	ldr	r3, [pc, #12]	; (10ec <I2C_2_PORT_init+0x28>)
    10de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08D_SERCOM6_PAD1);
    10e0:	4905      	ldr	r1, [pc, #20]	; (10f8 <I2C_2_PORT_init+0x34>)
    10e2:	2068      	movs	r0, #104	; 0x68
    10e4:	4b03      	ldr	r3, [pc, #12]	; (10f4 <I2C_2_PORT_init+0x30>)
    10e6:	4798      	blx	r3
}
    10e8:	bf00      	nop
    10ea:	bd80      	pop	{r7, pc}
    10ec:	00000b01 	.word	0x00000b01
    10f0:	00690003 	.word	0x00690003
    10f4:	00000b35 	.word	0x00000b35
    10f8:	00680003 	.word	0x00680003

000010fc <I2C_2_CLOCK_init>:

void I2C_2_CLOCK_init(void)
{
    10fc:	b580      	push	{r7, lr}
    10fe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1100:	2241      	movs	r2, #65	; 0x41
    1102:	2124      	movs	r1, #36	; 0x24
    1104:	4806      	ldr	r0, [pc, #24]	; (1120 <I2C_2_CLOCK_init+0x24>)
    1106:	4b07      	ldr	r3, [pc, #28]	; (1124 <I2C_2_CLOCK_init+0x28>)
    1108:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    110a:	2242      	movs	r2, #66	; 0x42
    110c:	2103      	movs	r1, #3
    110e:	4804      	ldr	r0, [pc, #16]	; (1120 <I2C_2_CLOCK_init+0x24>)
    1110:	4b04      	ldr	r3, [pc, #16]	; (1124 <I2C_2_CLOCK_init+0x28>)
    1112:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1114:	4804      	ldr	r0, [pc, #16]	; (1128 <I2C_2_CLOCK_init+0x2c>)
    1116:	4b05      	ldr	r3, [pc, #20]	; (112c <I2C_2_CLOCK_init+0x30>)
    1118:	4798      	blx	r3
}
    111a:	bf00      	nop
    111c:	bd80      	pop	{r7, pc}
    111e:	bf00      	nop
    1120:	40001c00 	.word	0x40001c00
    1124:	00000383 	.word	0x00000383
    1128:	40000800 	.word	0x40000800
    112c:	000005c9 	.word	0x000005c9

00001130 <I2C_2_init>:

void I2C_2_init(void)
{
    1130:	b580      	push	{r7, lr}
    1132:	af00      	add	r7, sp, #0
	I2C_2_CLOCK_init();
    1134:	4b04      	ldr	r3, [pc, #16]	; (1148 <I2C_2_init+0x18>)
    1136:	4798      	blx	r3
	i2c_m_async_init(&I2C_2, SERCOM6);
    1138:	4904      	ldr	r1, [pc, #16]	; (114c <I2C_2_init+0x1c>)
    113a:	4805      	ldr	r0, [pc, #20]	; (1150 <I2C_2_init+0x20>)
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <I2C_2_init+0x24>)
    113e:	4798      	blx	r3
	I2C_2_PORT_init();
    1140:	4b05      	ldr	r3, [pc, #20]	; (1158 <I2C_2_init+0x28>)
    1142:	4798      	blx	r3
}
    1144:	bf00      	nop
    1146:	bd80      	pop	{r7, pc}
    1148:	000010fd 	.word	0x000010fd
    114c:	43000800 	.word	0x43000800
    1150:	2000062c 	.word	0x2000062c
    1154:	00001859 	.word	0x00001859
    1158:	000010c5 	.word	0x000010c5

0000115c <delay_driver_init>:

void delay_driver_init(void)
{
    115c:	b580      	push	{r7, lr}
    115e:	af00      	add	r7, sp, #0
	delay_init(SysTick);
    1160:	4802      	ldr	r0, [pc, #8]	; (116c <delay_driver_init+0x10>)
    1162:	4b03      	ldr	r3, [pc, #12]	; (1170 <delay_driver_init+0x14>)
    1164:	4798      	blx	r3
}
    1166:	bf00      	nop
    1168:	bd80      	pop	{r7, pc}
    116a:	bf00      	nop
    116c:	e000e010 	.word	0xe000e010
    1170:	00001625 	.word	0x00001625

00001174 <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
    1174:	b580      	push	{r7, lr}
    1176:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1178:	4808      	ldr	r0, [pc, #32]	; (119c <TIMER_1_init+0x28>)
    117a:	4b09      	ldr	r3, [pc, #36]	; (11a0 <TIMER_1_init+0x2c>)
    117c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    117e:	2241      	movs	r2, #65	; 0x41
    1180:	2109      	movs	r1, #9
    1182:	4808      	ldr	r0, [pc, #32]	; (11a4 <TIMER_1_init+0x30>)
    1184:	4b08      	ldr	r3, [pc, #32]	; (11a8 <TIMER_1_init+0x34>)
    1186:	4798      	blx	r3

	timer_init(&TIMER_1, TC0, _tc_get_timer());
    1188:	4b08      	ldr	r3, [pc, #32]	; (11ac <TIMER_1_init+0x38>)
    118a:	4798      	blx	r3
    118c:	4603      	mov	r3, r0
    118e:	461a      	mov	r2, r3
    1190:	4907      	ldr	r1, [pc, #28]	; (11b0 <TIMER_1_init+0x3c>)
    1192:	4808      	ldr	r0, [pc, #32]	; (11b4 <TIMER_1_init+0x40>)
    1194:	4b08      	ldr	r3, [pc, #32]	; (11b8 <TIMER_1_init+0x44>)
    1196:	4798      	blx	r3
}
    1198:	bf00      	nop
    119a:	bd80      	pop	{r7, pc}
    119c:	40000800 	.word	0x40000800
    11a0:	00000469 	.word	0x00000469
    11a4:	40001c00 	.word	0x40001c00
    11a8:	00000383 	.word	0x00000383
    11ac:	00006601 	.word	0x00006601
    11b0:	40003800 	.word	0x40003800
    11b4:	20000734 	.word	0x20000734
    11b8:	00001c15 	.word	0x00001c15

000011bc <TIMER_2_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_2_init(void)
{
    11bc:	b580      	push	{r7, lr}
    11be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    11c0:	4808      	ldr	r0, [pc, #32]	; (11e4 <TIMER_2_init+0x28>)
    11c2:	4b09      	ldr	r3, [pc, #36]	; (11e8 <TIMER_2_init+0x2c>)
    11c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11c6:	2241      	movs	r2, #65	; 0x41
    11c8:	2109      	movs	r1, #9
    11ca:	4808      	ldr	r0, [pc, #32]	; (11ec <TIMER_2_init+0x30>)
    11cc:	4b08      	ldr	r3, [pc, #32]	; (11f0 <TIMER_2_init+0x34>)
    11ce:	4798      	blx	r3

	timer_init(&TIMER_2, TC1, _tc_get_timer());
    11d0:	4b08      	ldr	r3, [pc, #32]	; (11f4 <TIMER_2_init+0x38>)
    11d2:	4798      	blx	r3
    11d4:	4603      	mov	r3, r0
    11d6:	461a      	mov	r2, r3
    11d8:	4907      	ldr	r1, [pc, #28]	; (11f8 <TIMER_2_init+0x3c>)
    11da:	4808      	ldr	r0, [pc, #32]	; (11fc <TIMER_2_init+0x40>)
    11dc:	4b08      	ldr	r3, [pc, #32]	; (1200 <TIMER_2_init+0x44>)
    11de:	4798      	blx	r3
}
    11e0:	bf00      	nop
    11e2:	bd80      	pop	{r7, pc}
    11e4:	40000800 	.word	0x40000800
    11e8:	00000489 	.word	0x00000489
    11ec:	40001c00 	.word	0x40001c00
    11f0:	00000383 	.word	0x00000383
    11f4:	00006601 	.word	0x00006601
    11f8:	40003c00 	.word	0x40003c00
    11fc:	2000066c 	.word	0x2000066c
    1200:	00001c15 	.word	0x00001c15

00001204 <TIMER_3_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_3_init(void)
{
    1204:	b580      	push	{r7, lr}
    1206:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1208:	4808      	ldr	r0, [pc, #32]	; (122c <TIMER_3_init+0x28>)
    120a:	4b09      	ldr	r3, [pc, #36]	; (1230 <TIMER_3_init+0x2c>)
    120c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    120e:	2241      	movs	r2, #65	; 0x41
    1210:	211a      	movs	r1, #26
    1212:	4808      	ldr	r0, [pc, #32]	; (1234 <TIMER_3_init+0x30>)
    1214:	4b08      	ldr	r3, [pc, #32]	; (1238 <TIMER_3_init+0x34>)
    1216:	4798      	blx	r3

	timer_init(&TIMER_3, TC2, _tc_get_timer());
    1218:	4b08      	ldr	r3, [pc, #32]	; (123c <TIMER_3_init+0x38>)
    121a:	4798      	blx	r3
    121c:	4603      	mov	r3, r0
    121e:	461a      	mov	r2, r3
    1220:	4907      	ldr	r1, [pc, #28]	; (1240 <TIMER_3_init+0x3c>)
    1222:	4808      	ldr	r0, [pc, #32]	; (1244 <TIMER_3_init+0x40>)
    1224:	4b08      	ldr	r3, [pc, #32]	; (1248 <TIMER_3_init+0x44>)
    1226:	4798      	blx	r3
}
    1228:	bf00      	nop
    122a:	bd80      	pop	{r7, pc}
    122c:	40000800 	.word	0x40000800
    1230:	00000549 	.word	0x00000549
    1234:	40001c00 	.word	0x40001c00
    1238:	00000383 	.word	0x00000383
    123c:	00006601 	.word	0x00006601
    1240:	4101a000 	.word	0x4101a000
    1244:	20000858 	.word	0x20000858
    1248:	00001c15 	.word	0x00001c15

0000124c <TIMER_4_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_4_init(void)
{
    124c:	b580      	push	{r7, lr}
    124e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    1250:	4808      	ldr	r0, [pc, #32]	; (1274 <TIMER_4_init+0x28>)
    1252:	4b09      	ldr	r3, [pc, #36]	; (1278 <TIMER_4_init+0x2c>)
    1254:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1256:	2241      	movs	r2, #65	; 0x41
    1258:	211a      	movs	r1, #26
    125a:	4808      	ldr	r0, [pc, #32]	; (127c <TIMER_4_init+0x30>)
    125c:	4b08      	ldr	r3, [pc, #32]	; (1280 <TIMER_4_init+0x34>)
    125e:	4798      	blx	r3

	timer_init(&TIMER_4, TC3, _tc_get_timer());
    1260:	4b08      	ldr	r3, [pc, #32]	; (1284 <TIMER_4_init+0x38>)
    1262:	4798      	blx	r3
    1264:	4603      	mov	r3, r0
    1266:	461a      	mov	r2, r3
    1268:	4907      	ldr	r1, [pc, #28]	; (1288 <TIMER_4_init+0x3c>)
    126a:	4808      	ldr	r0, [pc, #32]	; (128c <TIMER_4_init+0x40>)
    126c:	4b08      	ldr	r3, [pc, #32]	; (1290 <TIMER_4_init+0x44>)
    126e:	4798      	blx	r3
}
    1270:	bf00      	nop
    1272:	bd80      	pop	{r7, pc}
    1274:	40000800 	.word	0x40000800
    1278:	00000569 	.word	0x00000569
    127c:	40001c00 	.word	0x40001c00
    1280:	00000383 	.word	0x00000383
    1284:	00006601 	.word	0x00006601
    1288:	4101c000 	.word	0x4101c000
    128c:	200006f0 	.word	0x200006f0
    1290:	00001c15 	.word	0x00001c15

00001294 <TIMER_5_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_5_init(void)
{
    1294:	b580      	push	{r7, lr}
    1296:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1298:	4808      	ldr	r0, [pc, #32]	; (12bc <TIMER_5_init+0x28>)
    129a:	4b09      	ldr	r3, [pc, #36]	; (12c0 <TIMER_5_init+0x2c>)
    129c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    129e:	2241      	movs	r2, #65	; 0x41
    12a0:	211e      	movs	r1, #30
    12a2:	4808      	ldr	r0, [pc, #32]	; (12c4 <TIMER_5_init+0x30>)
    12a4:	4b08      	ldr	r3, [pc, #32]	; (12c8 <TIMER_5_init+0x34>)
    12a6:	4798      	blx	r3

	timer_init(&TIMER_5, TC4, _tc_get_timer());
    12a8:	4b08      	ldr	r3, [pc, #32]	; (12cc <TIMER_5_init+0x38>)
    12aa:	4798      	blx	r3
    12ac:	4603      	mov	r3, r0
    12ae:	461a      	mov	r2, r3
    12b0:	4907      	ldr	r1, [pc, #28]	; (12d0 <TIMER_5_init+0x3c>)
    12b2:	4808      	ldr	r0, [pc, #32]	; (12d4 <TIMER_5_init+0x40>)
    12b4:	4b08      	ldr	r3, [pc, #32]	; (12d8 <TIMER_5_init+0x44>)
    12b6:	4798      	blx	r3
}
    12b8:	bf00      	nop
    12ba:	bd80      	pop	{r7, pc}
    12bc:	40000800 	.word	0x40000800
    12c0:	00000589 	.word	0x00000589
    12c4:	40001c00 	.word	0x40001c00
    12c8:	00000383 	.word	0x00000383
    12cc:	00006601 	.word	0x00006601
    12d0:	42001400 	.word	0x42001400
    12d4:	20000754 	.word	0x20000754
    12d8:	00001c15 	.word	0x00001c15

000012dc <TIMER_6_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_6_init(void)
{
    12dc:	b580      	push	{r7, lr}
    12de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    12e0:	4808      	ldr	r0, [pc, #32]	; (1304 <TIMER_6_init+0x28>)
    12e2:	4b09      	ldr	r3, [pc, #36]	; (1308 <TIMER_6_init+0x2c>)
    12e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12e6:	2241      	movs	r2, #65	; 0x41
    12e8:	211e      	movs	r1, #30
    12ea:	4808      	ldr	r0, [pc, #32]	; (130c <TIMER_6_init+0x30>)
    12ec:	4b08      	ldr	r3, [pc, #32]	; (1310 <TIMER_6_init+0x34>)
    12ee:	4798      	blx	r3

	timer_init(&TIMER_6, TC5, _tc_get_timer());
    12f0:	4b08      	ldr	r3, [pc, #32]	; (1314 <TIMER_6_init+0x38>)
    12f2:	4798      	blx	r3
    12f4:	4603      	mov	r3, r0
    12f6:	461a      	mov	r2, r3
    12f8:	4907      	ldr	r1, [pc, #28]	; (1318 <TIMER_6_init+0x3c>)
    12fa:	4808      	ldr	r0, [pc, #32]	; (131c <TIMER_6_init+0x40>)
    12fc:	4b08      	ldr	r3, [pc, #32]	; (1320 <TIMER_6_init+0x44>)
    12fe:	4798      	blx	r3
}
    1300:	bf00      	nop
    1302:	bd80      	pop	{r7, pc}
    1304:	40000800 	.word	0x40000800
    1308:	000005a9 	.word	0x000005a9
    130c:	40001c00 	.word	0x40001c00
    1310:	00000383 	.word	0x00000383
    1314:	00006601 	.word	0x00006601
    1318:	42001800 	.word	0x42001800
    131c:	200007f4 	.word	0x200007f4
    1320:	00001c15 	.word	0x00001c15

00001324 <TIMER_7_CLOCK_init>:

void TIMER_7_CLOCK_init(void)
{
    1324:	b580      	push	{r7, lr}
    1326:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1328:	4804      	ldr	r0, [pc, #16]	; (133c <TIMER_7_CLOCK_init+0x18>)
    132a:	4b05      	ldr	r3, [pc, #20]	; (1340 <TIMER_7_CLOCK_init+0x1c>)
    132c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    132e:	2241      	movs	r2, #65	; 0x41
    1330:	2119      	movs	r1, #25
    1332:	4804      	ldr	r0, [pc, #16]	; (1344 <TIMER_7_CLOCK_init+0x20>)
    1334:	4b04      	ldr	r3, [pc, #16]	; (1348 <TIMER_7_CLOCK_init+0x24>)
    1336:	4798      	blx	r3
}
    1338:	bf00      	nop
    133a:	bd80      	pop	{r7, pc}
    133c:	40000800 	.word	0x40000800
    1340:	00000509 	.word	0x00000509
    1344:	40001c00 	.word	0x40001c00
    1348:	00000383 	.word	0x00000383

0000134c <TIMER_7_init>:

void TIMER_7_init(void)
{
    134c:	b580      	push	{r7, lr}
    134e:	af00      	add	r7, sp, #0
	TIMER_7_CLOCK_init();
    1350:	4b05      	ldr	r3, [pc, #20]	; (1368 <TIMER_7_init+0x1c>)
    1352:	4798      	blx	r3
	timer_init(&TIMER_7, TCC0, _tcc_get_timer());
    1354:	4b05      	ldr	r3, [pc, #20]	; (136c <TIMER_7_init+0x20>)
    1356:	4798      	blx	r3
    1358:	4603      	mov	r3, r0
    135a:	461a      	mov	r2, r3
    135c:	4904      	ldr	r1, [pc, #16]	; (1370 <TIMER_7_init+0x24>)
    135e:	4805      	ldr	r0, [pc, #20]	; (1374 <TIMER_7_init+0x28>)
    1360:	4b05      	ldr	r3, [pc, #20]	; (1378 <TIMER_7_init+0x2c>)
    1362:	4798      	blx	r3
}
    1364:	bf00      	nop
    1366:	bd80      	pop	{r7, pc}
    1368:	00001325 	.word	0x00001325
    136c:	00005c61 	.word	0x00005c61
    1370:	41016000 	.word	0x41016000
    1374:	2000068c 	.word	0x2000068c
    1378:	00001c15 	.word	0x00001c15

0000137c <TIMER_8_CLOCK_init>:

void TIMER_8_CLOCK_init(void)
{
    137c:	b580      	push	{r7, lr}
    137e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1380:	4804      	ldr	r0, [pc, #16]	; (1394 <TIMER_8_CLOCK_init+0x18>)
    1382:	4b05      	ldr	r3, [pc, #20]	; (1398 <TIMER_8_CLOCK_init+0x1c>)
    1384:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1386:	2241      	movs	r2, #65	; 0x41
    1388:	2119      	movs	r1, #25
    138a:	4804      	ldr	r0, [pc, #16]	; (139c <TIMER_8_CLOCK_init+0x20>)
    138c:	4b04      	ldr	r3, [pc, #16]	; (13a0 <TIMER_8_CLOCK_init+0x24>)
    138e:	4798      	blx	r3
}
    1390:	bf00      	nop
    1392:	bd80      	pop	{r7, pc}
    1394:	40000800 	.word	0x40000800
    1398:	00000529 	.word	0x00000529
    139c:	40001c00 	.word	0x40001c00
    13a0:	00000383 	.word	0x00000383

000013a4 <TIMER_8_init>:

void TIMER_8_init(void)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	af00      	add	r7, sp, #0
	TIMER_8_CLOCK_init();
    13a8:	4b05      	ldr	r3, [pc, #20]	; (13c0 <TIMER_8_init+0x1c>)
    13aa:	4798      	blx	r3
	timer_init(&TIMER_8, TCC1, _tcc_get_timer());
    13ac:	4b05      	ldr	r3, [pc, #20]	; (13c4 <TIMER_8_init+0x20>)
    13ae:	4798      	blx	r3
    13b0:	4603      	mov	r3, r0
    13b2:	461a      	mov	r2, r3
    13b4:	4904      	ldr	r1, [pc, #16]	; (13c8 <TIMER_8_init+0x24>)
    13b6:	4805      	ldr	r0, [pc, #20]	; (13cc <TIMER_8_init+0x28>)
    13b8:	4b05      	ldr	r3, [pc, #20]	; (13d0 <TIMER_8_init+0x2c>)
    13ba:	4798      	blx	r3
}
    13bc:	bf00      	nop
    13be:	bd80      	pop	{r7, pc}
    13c0:	0000137d 	.word	0x0000137d
    13c4:	00005c61 	.word	0x00005c61
    13c8:	41018000 	.word	0x41018000
    13cc:	20000714 	.word	0x20000714
    13d0:	00001c15 	.word	0x00001c15

000013d4 <USB_0_PORT_init>:

void USB_0_PORT_init(void)
{
    13d4:	b580      	push	{r7, lr}
    13d6:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    13d8:	2102      	movs	r1, #2
    13da:	2018      	movs	r0, #24
    13dc:	4b0f      	ldr	r3, [pc, #60]	; (141c <USB_0_PORT_init+0x48>)
    13de:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    13e0:	2100      	movs	r1, #0
    13e2:	2018      	movs	r0, #24
    13e4:	4b0e      	ldr	r3, [pc, #56]	; (1420 <USB_0_PORT_init+0x4c>)
    13e6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    13e8:	2100      	movs	r1, #0
    13ea:	2018      	movs	r0, #24
    13ec:	4b0d      	ldr	r3, [pc, #52]	; (1424 <USB_0_PORT_init+0x50>)
    13ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    13f0:	490d      	ldr	r1, [pc, #52]	; (1428 <USB_0_PORT_init+0x54>)
    13f2:	2018      	movs	r0, #24
    13f4:	4b0d      	ldr	r3, [pc, #52]	; (142c <USB_0_PORT_init+0x58>)
    13f6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    13f8:	2102      	movs	r1, #2
    13fa:	2019      	movs	r0, #25
    13fc:	4b07      	ldr	r3, [pc, #28]	; (141c <USB_0_PORT_init+0x48>)
    13fe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1400:	2100      	movs	r1, #0
    1402:	2019      	movs	r0, #25
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <USB_0_PORT_init+0x4c>)
    1406:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1408:	2100      	movs	r1, #0
    140a:	2019      	movs	r0, #25
    140c:	4b05      	ldr	r3, [pc, #20]	; (1424 <USB_0_PORT_init+0x50>)
    140e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1410:	4907      	ldr	r1, [pc, #28]	; (1430 <USB_0_PORT_init+0x5c>)
    1412:	2019      	movs	r0, #25
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <USB_0_PORT_init+0x58>)
    1416:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1418:	bf00      	nop
    141a:	bd80      	pop	{r7, pc}
    141c:	00000b55 	.word	0x00000b55
    1420:	00000b8d 	.word	0x00000b8d
    1424:	00000b01 	.word	0x00000b01
    1428:	00180007 	.word	0x00180007
    142c:	00000b35 	.word	0x00000b35
    1430:	00190007 	.word	0x00190007

00001434 <USB_0_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void USB_0_CLOCK_init(void)
{
    1434:	b580      	push	{r7, lr}
    1436:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1438:	2243      	movs	r2, #67	; 0x43
    143a:	210a      	movs	r1, #10
    143c:	4805      	ldr	r0, [pc, #20]	; (1454 <USB_0_CLOCK_init+0x20>)
    143e:	4b06      	ldr	r3, [pc, #24]	; (1458 <USB_0_CLOCK_init+0x24>)
    1440:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <USB_0_CLOCK_init+0x28>)
    1444:	4b06      	ldr	r3, [pc, #24]	; (1460 <USB_0_CLOCK_init+0x2c>)
    1446:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1448:	4804      	ldr	r0, [pc, #16]	; (145c <USB_0_CLOCK_init+0x28>)
    144a:	4b06      	ldr	r3, [pc, #24]	; (1464 <USB_0_CLOCK_init+0x30>)
    144c:	4798      	blx	r3
}
    144e:	bf00      	nop
    1450:	bd80      	pop	{r7, pc}
    1452:	bf00      	nop
    1454:	40001c00 	.word	0x40001c00
    1458:	00000383 	.word	0x00000383
    145c:	40000800 	.word	0x40000800
    1460:	000003a9 	.word	0x000003a9
    1464:	000004a9 	.word	0x000004a9

00001468 <USB_0_init>:

void USB_0_init(void)
{
    1468:	b580      	push	{r7, lr}
    146a:	af00      	add	r7, sp, #0
	USB_0_CLOCK_init();
    146c:	4b03      	ldr	r3, [pc, #12]	; (147c <USB_0_init+0x14>)
    146e:	4798      	blx	r3
	usb_d_init();
    1470:	4b03      	ldr	r3, [pc, #12]	; (1480 <USB_0_init+0x18>)
    1472:	4798      	blx	r3
	USB_0_PORT_init();
    1474:	4b03      	ldr	r3, [pc, #12]	; (1484 <USB_0_init+0x1c>)
    1476:	4798      	blx	r3
}
    1478:	bf00      	nop
    147a:	bd80      	pop	{r7, pc}
    147c:	00001435 	.word	0x00001435
    1480:	0000219d 	.word	0x0000219d
    1484:	000013d5 	.word	0x000013d5

00001488 <WDT_0_CLOCK_init>:

void WDT_0_CLOCK_init(void)
{
    1488:	b580      	push	{r7, lr}
    148a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    148c:	4802      	ldr	r0, [pc, #8]	; (1498 <WDT_0_CLOCK_init+0x10>)
    148e:	4b03      	ldr	r3, [pc, #12]	; (149c <WDT_0_CLOCK_init+0x14>)
    1490:	4798      	blx	r3
}
    1492:	bf00      	nop
    1494:	bd80      	pop	{r7, pc}
    1496:	bf00      	nop
    1498:	40000800 	.word	0x40000800
    149c:	000003c9 	.word	0x000003c9

000014a0 <WDT_0_init>:

void WDT_0_init(void)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	af00      	add	r7, sp, #0
	WDT_0_CLOCK_init();
    14a4:	4b03      	ldr	r3, [pc, #12]	; (14b4 <WDT_0_init+0x14>)
    14a6:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
    14a8:	4903      	ldr	r1, [pc, #12]	; (14b8 <WDT_0_init+0x18>)
    14aa:	4804      	ldr	r0, [pc, #16]	; (14bc <WDT_0_init+0x1c>)
    14ac:	4b04      	ldr	r3, [pc, #16]	; (14c0 <WDT_0_init+0x20>)
    14ae:	4798      	blx	r3
}
    14b0:	bf00      	nop
    14b2:	bd80      	pop	{r7, pc}
    14b4:	00001489 	.word	0x00001489
    14b8:	40002000 	.word	0x40002000
    14bc:	20000710 	.word	0x20000710
    14c0:	00000bd5 	.word	0x00000bd5

000014c4 <system_init>:

void system_init(void)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	af00      	add	r7, sp, #0
	init_mcu();
    14c8:	4b15      	ldr	r3, [pc, #84]	; (1520 <system_init+0x5c>)
    14ca:	4798      	blx	r3

	ADC_0_init();
    14cc:	4b15      	ldr	r3, [pc, #84]	; (1524 <system_init+0x60>)
    14ce:	4798      	blx	r3

	ADC_1_init();
    14d0:	4b15      	ldr	r3, [pc, #84]	; (1528 <system_init+0x64>)
    14d2:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    14d4:	4b15      	ldr	r3, [pc, #84]	; (152c <system_init+0x68>)
    14d6:	4798      	blx	r3

	TIMER_0_init();
    14d8:	4b15      	ldr	r3, [pc, #84]	; (1530 <system_init+0x6c>)
    14da:	4798      	blx	r3

	I2C_4_init();
    14dc:	4b15      	ldr	r3, [pc, #84]	; (1534 <system_init+0x70>)
    14de:	4798      	blx	r3

	I2C_1_init();
    14e0:	4b15      	ldr	r3, [pc, #84]	; (1538 <system_init+0x74>)
    14e2:	4798      	blx	r3

	I2C_0_init();
    14e4:	4b15      	ldr	r3, [pc, #84]	; (153c <system_init+0x78>)
    14e6:	4798      	blx	r3

	I2C_3_init();
    14e8:	4b15      	ldr	r3, [pc, #84]	; (1540 <system_init+0x7c>)
    14ea:	4798      	blx	r3

	I2C_2_init();
    14ec:	4b15      	ldr	r3, [pc, #84]	; (1544 <system_init+0x80>)
    14ee:	4798      	blx	r3

	delay_driver_init();
    14f0:	4b15      	ldr	r3, [pc, #84]	; (1548 <system_init+0x84>)
    14f2:	4798      	blx	r3

	TIMER_1_init();
    14f4:	4b15      	ldr	r3, [pc, #84]	; (154c <system_init+0x88>)
    14f6:	4798      	blx	r3
	TIMER_2_init();
    14f8:	4b15      	ldr	r3, [pc, #84]	; (1550 <system_init+0x8c>)
    14fa:	4798      	blx	r3
	TIMER_3_init();
    14fc:	4b15      	ldr	r3, [pc, #84]	; (1554 <system_init+0x90>)
    14fe:	4798      	blx	r3
	TIMER_4_init();
    1500:	4b15      	ldr	r3, [pc, #84]	; (1558 <system_init+0x94>)
    1502:	4798      	blx	r3
	TIMER_5_init();
    1504:	4b15      	ldr	r3, [pc, #84]	; (155c <system_init+0x98>)
    1506:	4798      	blx	r3
	TIMER_6_init();
    1508:	4b15      	ldr	r3, [pc, #84]	; (1560 <system_init+0x9c>)
    150a:	4798      	blx	r3
	TIMER_7_init();
    150c:	4b15      	ldr	r3, [pc, #84]	; (1564 <system_init+0xa0>)
    150e:	4798      	blx	r3

	TIMER_8_init();
    1510:	4b15      	ldr	r3, [pc, #84]	; (1568 <system_init+0xa4>)
    1512:	4798      	blx	r3

	USB_0_init();
    1514:	4b15      	ldr	r3, [pc, #84]	; (156c <system_init+0xa8>)
    1516:	4798      	blx	r3

	WDT_0_init();
    1518:	4b15      	ldr	r3, [pc, #84]	; (1570 <system_init+0xac>)
    151a:	4798      	blx	r3
}
    151c:	bf00      	nop
    151e:	bd80      	pop	{r7, pc}
    1520:	00000bc5 	.word	0x00000bc5
    1524:	00000cad 	.word	0x00000cad
    1528:	00000d51 	.word	0x00000d51
    152c:	00000d81 	.word	0x00000d81
    1530:	00000e25 	.word	0x00000e25
    1534:	00000ec9 	.word	0x00000ec9
    1538:	00000f61 	.word	0x00000f61
    153c:	00000ff9 	.word	0x00000ff9
    1540:	00001099 	.word	0x00001099
    1544:	00001131 	.word	0x00001131
    1548:	0000115d 	.word	0x0000115d
    154c:	00001175 	.word	0x00001175
    1550:	000011bd 	.word	0x000011bd
    1554:	00001205 	.word	0x00001205
    1558:	0000124d 	.word	0x0000124d
    155c:	00001295 	.word	0x00001295
    1560:	000012dd 	.word	0x000012dd
    1564:	0000134d 	.word	0x0000134d
    1568:	000013a5 	.word	0x000013a5
    156c:	00001469 	.word	0x00001469
    1570:	000014a1 	.word	0x000014a1

00001574 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	60f8      	str	r0, [r7, #12]
    157c:	60b9      	str	r1, [r7, #8]
    157e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	2b00      	cmp	r3, #0
    1584:	d004      	beq.n	1590 <adc_sync_init+0x1c>
    1586:	68bb      	ldr	r3, [r7, #8]
    1588:	2b00      	cmp	r3, #0
    158a:	d001      	beq.n	1590 <adc_sync_init+0x1c>
    158c:	2301      	movs	r3, #1
    158e:	e000      	b.n	1592 <adc_sync_init+0x1e>
    1590:	2300      	movs	r3, #0
    1592:	f003 0301 	and.w	r3, r3, #1
    1596:	b2db      	uxtb	r3, r3
    1598:	2239      	movs	r2, #57	; 0x39
    159a:	4907      	ldr	r1, [pc, #28]	; (15b8 <adc_sync_init+0x44>)
    159c:	4618      	mov	r0, r3
    159e:	4b07      	ldr	r3, [pc, #28]	; (15bc <adc_sync_init+0x48>)
    15a0:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	68b9      	ldr	r1, [r7, #8]
    15a6:	4618      	mov	r0, r3
    15a8:	4b05      	ldr	r3, [pc, #20]	; (15c0 <adc_sync_init+0x4c>)
    15aa:	4798      	blx	r3
    15ac:	4603      	mov	r3, r0
}
    15ae:	4618      	mov	r0, r3
    15b0:	3710      	adds	r7, #16
    15b2:	46bd      	mov	sp, r7
    15b4:	bd80      	pop	{r7, pc}
    15b6:	bf00      	nop
    15b8:	00008dfc 	.word	0x00008dfc
    15bc:	00002249 	.word	0x00002249
    15c0:	000029a1 	.word	0x000029a1

000015c4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    15c4:	b480      	push	{r7}
    15c6:	b085      	sub	sp, #20
    15c8:	af00      	add	r7, sp, #0
    15ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    15cc:	f3ef 8310 	mrs	r3, PRIMASK
    15d0:	60fb      	str	r3, [r7, #12]
  return(result);
    15d2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    15d8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    15da:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    15de:	bf00      	nop
    15e0:	3714      	adds	r7, #20
    15e2:	46bd      	mov	sp, r7
    15e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15e8:	4770      	bx	lr

000015ea <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    15ea:	b480      	push	{r7}
    15ec:	b085      	sub	sp, #20
    15ee:	af00      	add	r7, sp, #0
    15f0:	6078      	str	r0, [r7, #4]
    15f2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    15fc:	68fb      	ldr	r3, [r7, #12]
    15fe:	f383 8810 	msr	PRIMASK, r3
}
    1602:	bf00      	nop
    1604:	3714      	adds	r7, #20
    1606:	46bd      	mov	sp, r7
    1608:	f85d 7b04 	ldr.w	r7, [sp], #4
    160c:	4770      	bx	lr
	...

00001610 <cache_init>:

/**
 * \brief Initialize cache module
 */
int32_t cache_init(void)
{
    1610:	b580      	push	{r7, lr}
    1612:	af00      	add	r7, sp, #0
	return _cmcc_init();
    1614:	4b02      	ldr	r3, [pc, #8]	; (1620 <cache_init+0x10>)
    1616:	4798      	blx	r3
    1618:	4603      	mov	r3, r0
}
    161a:	4618      	mov	r0, r3
    161c:	bd80      	pop	{r7, pc}
    161e:	bf00      	nop
    1620:	00002b2d 	.word	0x00002b2d

00001624 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1624:	b580      	push	{r7, lr}
    1626:	b082      	sub	sp, #8
    1628:	af00      	add	r7, sp, #0
    162a:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    162c:	4a05      	ldr	r2, [pc, #20]	; (1644 <delay_init+0x20>)
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	6013      	str	r3, [r2, #0]
    1632:	4b04      	ldr	r3, [pc, #16]	; (1644 <delay_init+0x20>)
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	4618      	mov	r0, r3
    1638:	4b03      	ldr	r3, [pc, #12]	; (1648 <delay_init+0x24>)
    163a:	4798      	blx	r3
}
    163c:	bf00      	nop
    163e:	3708      	adds	r7, #8
    1640:	46bd      	mov	sp, r7
    1642:	bd80      	pop	{r7, pc}
    1644:	200001cc 	.word	0x200001cc
    1648:	000056f5 	.word	0x000056f5

0000164c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    164c:	b580      	push	{r7, lr}
    164e:	b082      	sub	sp, #8
    1650:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1652:	2300      	movs	r3, #0
    1654:	80fb      	strh	r3, [r7, #6]
    1656:	e00e      	b.n	1676 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1658:	88fb      	ldrh	r3, [r7, #6]
    165a:	4a0c      	ldr	r2, [pc, #48]	; (168c <ext_irq_init+0x40>)
    165c:	00db      	lsls	r3, r3, #3
    165e:	4413      	add	r3, r2
    1660:	f04f 32ff 	mov.w	r2, #4294967295
    1664:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1666:	88fb      	ldrh	r3, [r7, #6]
    1668:	4a08      	ldr	r2, [pc, #32]	; (168c <ext_irq_init+0x40>)
    166a:	2100      	movs	r1, #0
    166c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1670:	88fb      	ldrh	r3, [r7, #6]
    1672:	3301      	adds	r3, #1
    1674:	80fb      	strh	r3, [r7, #6]
    1676:	88fb      	ldrh	r3, [r7, #6]
    1678:	2b03      	cmp	r3, #3
    167a:	d9ed      	bls.n	1658 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    167c:	4804      	ldr	r0, [pc, #16]	; (1690 <ext_irq_init+0x44>)
    167e:	4b05      	ldr	r3, [pc, #20]	; (1694 <ext_irq_init+0x48>)
    1680:	4798      	blx	r3
    1682:	4603      	mov	r3, r0
}
    1684:	4618      	mov	r0, r3
    1686:	3708      	adds	r7, #8
    1688:	46bd      	mov	sp, r7
    168a:	bd80      	pop	{r7, pc}
    168c:	200001d0 	.word	0x200001d0
    1690:	00001699 	.word	0x00001699
    1694:	00003581 	.word	0x00003581

00001698 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1698:	b580      	push	{r7, lr}
    169a:	b084      	sub	sp, #16
    169c:	af00      	add	r7, sp, #0
    169e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    16a0:	2300      	movs	r3, #0
    16a2:	73fb      	strb	r3, [r7, #15]
    16a4:	2304      	movs	r3, #4
    16a6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    16a8:	e02a      	b.n	1700 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    16aa:	7bba      	ldrb	r2, [r7, #14]
    16ac:	7bfb      	ldrb	r3, [r7, #15]
    16ae:	4413      	add	r3, r2
    16b0:	105b      	asrs	r3, r3, #1
    16b2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    16b4:	7b7b      	ldrb	r3, [r7, #13]
    16b6:	2b03      	cmp	r3, #3
    16b8:	d827      	bhi.n	170a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    16ba:	7b7b      	ldrb	r3, [r7, #13]
    16bc:	4a16      	ldr	r2, [pc, #88]	; (1718 <process_ext_irq+0x80>)
    16be:	00db      	lsls	r3, r3, #3
    16c0:	4413      	add	r3, r2
    16c2:	685a      	ldr	r2, [r3, #4]
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	429a      	cmp	r2, r3
    16c8:	d10b      	bne.n	16e2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    16ca:	7b7b      	ldrb	r3, [r7, #13]
    16cc:	4a12      	ldr	r2, [pc, #72]	; (1718 <process_ext_irq+0x80>)
    16ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d01b      	beq.n	170e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    16d6:	7b7b      	ldrb	r3, [r7, #13]
    16d8:	4a0f      	ldr	r2, [pc, #60]	; (1718 <process_ext_irq+0x80>)
    16da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    16de:	4798      	blx	r3
			}
			return;
    16e0:	e015      	b.n	170e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    16e2:	7b7b      	ldrb	r3, [r7, #13]
    16e4:	4a0c      	ldr	r2, [pc, #48]	; (1718 <process_ext_irq+0x80>)
    16e6:	00db      	lsls	r3, r3, #3
    16e8:	4413      	add	r3, r2
    16ea:	685a      	ldr	r2, [r3, #4]
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	429a      	cmp	r2, r3
    16f0:	d203      	bcs.n	16fa <process_ext_irq+0x62>
			lower = middle + 1;
    16f2:	7b7b      	ldrb	r3, [r7, #13]
    16f4:	3301      	adds	r3, #1
    16f6:	73fb      	strb	r3, [r7, #15]
    16f8:	e002      	b.n	1700 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    16fa:	7b7b      	ldrb	r3, [r7, #13]
    16fc:	3b01      	subs	r3, #1
    16fe:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1700:	7bba      	ldrb	r2, [r7, #14]
    1702:	7bfb      	ldrb	r3, [r7, #15]
    1704:	429a      	cmp	r2, r3
    1706:	d2d0      	bcs.n	16aa <process_ext_irq+0x12>
    1708:	e002      	b.n	1710 <process_ext_irq+0x78>
			return;
    170a:	bf00      	nop
    170c:	e000      	b.n	1710 <process_ext_irq+0x78>
			return;
    170e:	bf00      	nop
		}
	}
}
    1710:	3710      	adds	r7, #16
    1712:	46bd      	mov	sp, r7
    1714:	bd80      	pop	{r7, pc}
    1716:	bf00      	nop
    1718:	200001d0 	.word	0x200001d0

0000171c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    171c:	b580      	push	{r7, lr}
    171e:	b084      	sub	sp, #16
    1720:	af00      	add	r7, sp, #0
    1722:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1724:	687b      	ldr	r3, [r7, #4]
    1726:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	885b      	ldrh	r3, [r3, #2]
    172c:	b29b      	uxth	r3, r3
    172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1732:	2b00      	cmp	r3, #0
    1734:	d107      	bne.n	1746 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1736:	68fb      	ldr	r3, [r7, #12]
    1738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    173a:	2b00      	cmp	r3, #0
    173c:	d003      	beq.n	1746 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    173e:	68fb      	ldr	r3, [r7, #12]
    1740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1742:	68f8      	ldr	r0, [r7, #12]
    1744:	4798      	blx	r3
		}
	}
}
    1746:	bf00      	nop
    1748:	3710      	adds	r7, #16
    174a:	46bd      	mov	sp, r7
    174c:	bd80      	pop	{r7, pc}

0000174e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    174e:	b580      	push	{r7, lr}
    1750:	b084      	sub	sp, #16
    1752:	af00      	add	r7, sp, #0
    1754:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	885b      	ldrh	r3, [r3, #2]
    175e:	b29b      	uxth	r3, r3
    1760:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1764:	2b00      	cmp	r3, #0
    1766:	d107      	bne.n	1778 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1768:	68fb      	ldr	r3, [r7, #12]
    176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    176c:	2b00      	cmp	r3, #0
    176e:	d003      	beq.n	1778 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1774:	68f8      	ldr	r0, [r7, #12]
    1776:	4798      	blx	r3
		}
	}
}
    1778:	bf00      	nop
    177a:	3710      	adds	r7, #16
    177c:	46bd      	mov	sp, r7
    177e:	bd80      	pop	{r7, pc}

00001780 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1780:	b580      	push	{r7, lr}
    1782:	b084      	sub	sp, #16
    1784:	af00      	add	r7, sp, #0
    1786:	6078      	str	r0, [r7, #4]
    1788:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    178e:	687b      	ldr	r3, [r7, #4]
    1790:	885b      	ldrh	r3, [r3, #2]
    1792:	b29b      	uxth	r3, r3
    1794:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1798:	2b00      	cmp	r3, #0
    179a:	d108      	bne.n	17ae <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    17a0:	2b00      	cmp	r3, #0
    17a2:	d004      	beq.n	17ae <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    17a8:	6839      	ldr	r1, [r7, #0]
    17aa:	68f8      	ldr	r0, [r7, #12]
    17ac:	4798      	blx	r3
		}
	}
}
    17ae:	bf00      	nop
    17b0:	3710      	adds	r7, #16
    17b2:	46bd      	mov	sp, r7
    17b4:	bd80      	pop	{r7, pc}
	...

000017b8 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    17b8:	b580      	push	{r7, lr}
    17ba:	b08a      	sub	sp, #40	; 0x28
    17bc:	af00      	add	r7, sp, #0
    17be:	60f8      	str	r0, [r7, #12]
    17c0:	60b9      	str	r1, [r7, #8]
    17c2:	4613      	mov	r3, r2
    17c4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    17c6:	68fb      	ldr	r3, [r7, #12]
    17c8:	3b28      	subs	r3, #40	; 0x28
    17ca:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    17cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    17d0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    17d2:	88fb      	ldrh	r3, [r7, #6]
    17d4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    17d6:	f248 0301 	movw	r3, #32769	; 0x8001
    17da:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    17dc:	68bb      	ldr	r3, [r7, #8]
    17de:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    17e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17e2:	f107 0214 	add.w	r2, r7, #20
    17e6:	4611      	mov	r1, r2
    17e8:	4618      	mov	r0, r3
    17ea:	4b06      	ldr	r3, [pc, #24]	; (1804 <i2c_m_async_read+0x4c>)
    17ec:	4798      	blx	r3
    17ee:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    17f0:	6a3b      	ldr	r3, [r7, #32]
    17f2:	2b00      	cmp	r3, #0
    17f4:	d001      	beq.n	17fa <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    17f6:	6a3b      	ldr	r3, [r7, #32]
    17f8:	e000      	b.n	17fc <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    17fa:	88fb      	ldrh	r3, [r7, #6]
}
    17fc:	4618      	mov	r0, r3
    17fe:	3728      	adds	r7, #40	; 0x28
    1800:	46bd      	mov	sp, r7
    1802:	bd80      	pop	{r7, pc}
    1804:	00004f51 	.word	0x00004f51

00001808 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1808:	b580      	push	{r7, lr}
    180a:	b08a      	sub	sp, #40	; 0x28
    180c:	af00      	add	r7, sp, #0
    180e:	60f8      	str	r0, [r7, #12]
    1810:	60b9      	str	r1, [r7, #8]
    1812:	4613      	mov	r3, r2
    1814:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1816:	68fb      	ldr	r3, [r7, #12]
    1818:	3b28      	subs	r3, #40	; 0x28
    181a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    181e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1820:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1822:	88fb      	ldrh	r3, [r7, #6]
    1824:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    182a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    182c:	68bb      	ldr	r3, [r7, #8]
    182e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1832:	f107 0214 	add.w	r2, r7, #20
    1836:	4611      	mov	r1, r2
    1838:	4618      	mov	r0, r3
    183a:	4b06      	ldr	r3, [pc, #24]	; (1854 <i2c_m_async_write+0x4c>)
    183c:	4798      	blx	r3
    183e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1840:	6a3b      	ldr	r3, [r7, #32]
    1842:	2b00      	cmp	r3, #0
    1844:	d001      	beq.n	184a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1846:	6a3b      	ldr	r3, [r7, #32]
    1848:	e000      	b.n	184c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    184a:	88fb      	ldrh	r3, [r7, #6]
}
    184c:	4618      	mov	r0, r3
    184e:	3728      	adds	r7, #40	; 0x28
    1850:	46bd      	mov	sp, r7
    1852:	bd80      	pop	{r7, pc}
    1854:	00004f51 	.word	0x00004f51

00001858 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1858:	b580      	push	{r7, lr}
    185a:	b084      	sub	sp, #16
    185c:	af00      	add	r7, sp, #0
    185e:	6078      	str	r0, [r7, #4]
    1860:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	2b00      	cmp	r3, #0
    1866:	bf14      	ite	ne
    1868:	2301      	movne	r3, #1
    186a:	2300      	moveq	r3, #0
    186c:	b2db      	uxtb	r3, r3
    186e:	2289      	movs	r2, #137	; 0x89
    1870:	4915      	ldr	r1, [pc, #84]	; (18c8 <i2c_m_async_init+0x70>)
    1872:	4618      	mov	r0, r3
    1874:	4b15      	ldr	r3, [pc, #84]	; (18cc <i2c_m_async_init+0x74>)
    1876:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	6839      	ldr	r1, [r7, #0]
    187c:	4618      	mov	r0, r3
    187e:	4b14      	ldr	r3, [pc, #80]	; (18d0 <i2c_m_async_init+0x78>)
    1880:	4798      	blx	r3
    1882:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1884:	68fb      	ldr	r3, [r7, #12]
    1886:	2b00      	cmp	r3, #0
    1888:	d001      	beq.n	188e <i2c_m_async_init+0x36>
		return init_status;
    188a:	68fb      	ldr	r3, [r7, #12]
    188c:	e018      	b.n	18c0 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	4a10      	ldr	r2, [pc, #64]	; (18d4 <i2c_m_async_init+0x7c>)
    1892:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	4a10      	ldr	r2, [pc, #64]	; (18d8 <i2c_m_async_init+0x80>)
    1898:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	4a0f      	ldr	r2, [pc, #60]	; (18dc <i2c_m_async_init+0x84>)
    189e:	2101      	movs	r1, #1
    18a0:	4618      	mov	r0, r3
    18a2:	4b0f      	ldr	r3, [pc, #60]	; (18e0 <i2c_m_async_init+0x88>)
    18a4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	4a0e      	ldr	r2, [pc, #56]	; (18e4 <i2c_m_async_init+0x8c>)
    18aa:	2102      	movs	r1, #2
    18ac:	4618      	mov	r0, r3
    18ae:	4b0c      	ldr	r3, [pc, #48]	; (18e0 <i2c_m_async_init+0x88>)
    18b0:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	4a0c      	ldr	r2, [pc, #48]	; (18e8 <i2c_m_async_init+0x90>)
    18b6:	2100      	movs	r1, #0
    18b8:	4618      	mov	r0, r3
    18ba:	4b09      	ldr	r3, [pc, #36]	; (18e0 <i2c_m_async_init+0x88>)
    18bc:	4798      	blx	r3

	return ERR_NONE;
    18be:	2300      	movs	r3, #0
}
    18c0:	4618      	mov	r0, r3
    18c2:	3710      	adds	r7, #16
    18c4:	46bd      	mov	sp, r7
    18c6:	bd80      	pop	{r7, pc}
    18c8:	00008e18 	.word	0x00008e18
    18cc:	00002249 	.word	0x00002249
    18d0:	00004da1 	.word	0x00004da1
    18d4:	000017b9 	.word	0x000017b9
    18d8:	00001809 	.word	0x00001809
    18dc:	0000171d 	.word	0x0000171d
    18e0:	00005025 	.word	0x00005025
    18e4:	0000174f 	.word	0x0000174f
    18e8:	00001781 	.word	0x00001781

000018ec <i2c_s_async_init>:
/**
 * \brief Initialize asynchronous i2c slave interface
 */
int32_t i2c_s_async_init(struct i2c_s_async_descriptor *const descr, void *const hw, uint8_t *const rx_buffer,
                         const uint16_t rx_buffer_length)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	b086      	sub	sp, #24
    18f0:	af00      	add	r7, sp, #0
    18f2:	60f8      	str	r0, [r7, #12]
    18f4:	60b9      	str	r1, [r7, #8]
    18f6:	607a      	str	r2, [r7, #4]
    18f8:	807b      	strh	r3, [r7, #2]
	int32_t init_status;

	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    18fa:	68fb      	ldr	r3, [r7, #12]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d00a      	beq.n	1916 <i2c_s_async_init+0x2a>
    1900:	68bb      	ldr	r3, [r7, #8]
    1902:	2b00      	cmp	r3, #0
    1904:	d007      	beq.n	1916 <i2c_s_async_init+0x2a>
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	2b00      	cmp	r3, #0
    190a:	d004      	beq.n	1916 <i2c_s_async_init+0x2a>
    190c:	887b      	ldrh	r3, [r7, #2]
    190e:	2b00      	cmp	r3, #0
    1910:	d001      	beq.n	1916 <i2c_s_async_init+0x2a>
    1912:	2301      	movs	r3, #1
    1914:	e000      	b.n	1918 <i2c_s_async_init+0x2c>
    1916:	2300      	movs	r3, #0
    1918:	f003 0301 	and.w	r3, r3, #1
    191c:	b2db      	uxtb	r3, r3
    191e:	223a      	movs	r2, #58	; 0x3a
    1920:	491b      	ldr	r1, [pc, #108]	; (1990 <i2c_s_async_init+0xa4>)
    1922:	4618      	mov	r0, r3
    1924:	4b1b      	ldr	r3, [pc, #108]	; (1994 <i2c_s_async_init+0xa8>)
    1926:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1928:	68fb      	ldr	r3, [r7, #12]
    192a:	3330      	adds	r3, #48	; 0x30
    192c:	887a      	ldrh	r2, [r7, #2]
    192e:	6879      	ldr	r1, [r7, #4]
    1930:	4618      	mov	r0, r3
    1932:	4b19      	ldr	r3, [pc, #100]	; (1998 <i2c_s_async_init+0xac>)
    1934:	4798      	blx	r3
    1936:	4603      	mov	r3, r0
    1938:	2b00      	cmp	r3, #0
    193a:	d002      	beq.n	1942 <i2c_s_async_init+0x56>
		return ERR_INVALID_ARG;
    193c:	f06f 030c 	mvn.w	r3, #12
    1940:	e022      	b.n	1988 <i2c_s_async_init+0x9c>
	}

	init_status = _i2c_s_async_init(&descr->device, hw);
    1942:	68fb      	ldr	r3, [r7, #12]
    1944:	68b9      	ldr	r1, [r7, #8]
    1946:	4618      	mov	r0, r3
    1948:	4b14      	ldr	r3, [pc, #80]	; (199c <i2c_s_async_init+0xb0>)
    194a:	4798      	blx	r3
    194c:	6178      	str	r0, [r7, #20]
	if (init_status) {
    194e:	697b      	ldr	r3, [r7, #20]
    1950:	2b00      	cmp	r3, #0
    1952:	d001      	beq.n	1958 <i2c_s_async_init+0x6c>
		return init_status;
    1954:	697b      	ldr	r3, [r7, #20]
    1956:	e017      	b.n	1988 <i2c_s_async_init+0x9c>
	}

	descr->io.read  = i2c_s_async_read;
    1958:	68fb      	ldr	r3, [r7, #12]
    195a:	4a11      	ldr	r2, [pc, #68]	; (19a0 <i2c_s_async_init+0xb4>)
    195c:	61da      	str	r2, [r3, #28]
	descr->io.write = i2c_s_async_write;
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	4a10      	ldr	r2, [pc, #64]	; (19a4 <i2c_s_async_init+0xb8>)
    1962:	619a      	str	r2, [r3, #24]

	descr->device.cb.error   = i2c_s_async_error;
    1964:	68fb      	ldr	r3, [r7, #12]
    1966:	4a10      	ldr	r2, [pc, #64]	; (19a8 <i2c_s_async_init+0xbc>)
    1968:	605a      	str	r2, [r3, #4]
	descr->device.cb.tx      = i2c_s_async_tx;
    196a:	68fb      	ldr	r3, [r7, #12]
    196c:	4a0f      	ldr	r2, [pc, #60]	; (19ac <i2c_s_async_init+0xc0>)
    196e:	609a      	str	r2, [r3, #8]
	descr->device.cb.rx_done = i2c_s_async_byte_received;
    1970:	68fb      	ldr	r3, [r7, #12]
    1972:	4a0f      	ldr	r2, [pc, #60]	; (19b0 <i2c_s_async_init+0xc4>)
    1974:	60da      	str	r2, [r3, #12]

	descr->tx_por           = 0;
    1976:	68fb      	ldr	r3, [r7, #12]
    1978:	2200      	movs	r2, #0
    197a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	descr->tx_buffer_length = 0;
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	2200      	movs	r2, #0
    1982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	return ERR_NONE;
    1986:	2300      	movs	r3, #0
}
    1988:	4618      	mov	r0, r3
    198a:	3718      	adds	r7, #24
    198c:	46bd      	mov	sp, r7
    198e:	bd80      	pop	{r7, pc}
    1990:	00008e38 	.word	0x00008e38
    1994:	00002249 	.word	0x00002249
    1998:	00002359 	.word	0x00002359
    199c:	000051a9 	.word	0x000051a9
    19a0:	00001aa1 	.word	0x00001aa1
    19a4:	00001b51 	.word	0x00001b51
    19a8:	00001a7d 	.word	0x00001a7d
    19ac:	000019b5 	.word	0x000019b5
    19b0:	00001a41 	.word	0x00001a41

000019b4 <i2c_s_async_tx>:
 * \internal Callback function for data sending
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_tx(struct _i2c_s_async_device *const device)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b084      	sub	sp, #16
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	60fb      	str	r3, [r7, #12]

	if (!descr->tx_buffer_length) {
    19c0:	68fb      	ldr	r3, [r7, #12]
    19c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    19c6:	2b00      	cmp	r3, #0
    19c8:	d108      	bne.n	19dc <i2c_s_async_tx+0x28>
		if (descr->cbs.tx_pending) {
    19ca:	68fb      	ldr	r3, [r7, #12]
    19cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19ce:	2b00      	cmp	r3, #0
    19d0:	d030      	beq.n	1a34 <i2c_s_async_tx+0x80>
			descr->cbs.tx_pending(descr);
    19d2:	68fb      	ldr	r3, [r7, #12]
    19d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19d6:	68f8      	ldr	r0, [r7, #12]
    19d8:	4798      	blx	r3
		descr->tx_buffer_length = 0;
		if (descr->cbs.tx) {
			descr->cbs.tx(descr);
		}
	}
}
    19da:	e02b      	b.n	1a34 <i2c_s_async_tx+0x80>
	} else if (++descr->tx_por != descr->tx_buffer_length) {
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    19e2:	3301      	adds	r3, #1
    19e4:	b29a      	uxth	r2, r3
    19e6:	68fb      	ldr	r3, [r7, #12]
    19e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    19f8:	429a      	cmp	r2, r3
    19fa:	d00b      	beq.n	1a14 <i2c_s_async_tx+0x60>
		_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por]);
    19fc:	68f8      	ldr	r0, [r7, #12]
    19fe:	68fb      	ldr	r3, [r7, #12]
    1a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a02:	68fa      	ldr	r2, [r7, #12]
    1a04:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
    1a08:	4413      	add	r3, r2
    1a0a:	781b      	ldrb	r3, [r3, #0]
    1a0c:	4619      	mov	r1, r3
    1a0e:	4b0b      	ldr	r3, [pc, #44]	; (1a3c <i2c_s_async_tx+0x88>)
    1a10:	4798      	blx	r3
}
    1a12:	e00f      	b.n	1a34 <i2c_s_async_tx+0x80>
		descr->tx_por           = 0;
    1a14:	68fb      	ldr	r3, [r7, #12]
    1a16:	2200      	movs	r2, #0
    1a18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		descr->tx_buffer_length = 0;
    1a1c:	68fb      	ldr	r3, [r7, #12]
    1a1e:	2200      	movs	r2, #0
    1a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (descr->cbs.tx) {
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d003      	beq.n	1a34 <i2c_s_async_tx+0x80>
			descr->cbs.tx(descr);
    1a2c:	68fb      	ldr	r3, [r7, #12]
    1a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a30:	68f8      	ldr	r0, [r7, #12]
    1a32:	4798      	blx	r3
}
    1a34:	bf00      	nop
    1a36:	3710      	adds	r7, #16
    1a38:	46bd      	mov	sp, r7
    1a3a:	bd80      	pop	{r7, pc}
    1a3c:	00005255 	.word	0x00005255

00001a40 <i2c_s_async_byte_received>:
 * \internal Callback function for data receipt
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_byte_received(struct _i2c_s_async_device *const device, const uint8_t data)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	b084      	sub	sp, #16
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]
    1a48:	460b      	mov	r3, r1
    1a4a:	70fb      	strb	r3, [r7, #3]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	3330      	adds	r3, #48	; 0x30
    1a54:	78fa      	ldrb	r2, [r7, #3]
    1a56:	4611      	mov	r1, r2
    1a58:	4618      	mov	r0, r3
    1a5a:	4b07      	ldr	r3, [pc, #28]	; (1a78 <i2c_s_async_byte_received+0x38>)
    1a5c:	4798      	blx	r3

	if (descr->cbs.rx) {
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a62:	2b00      	cmp	r3, #0
    1a64:	d003      	beq.n	1a6e <i2c_s_async_byte_received+0x2e>
		descr->cbs.rx(descr);
    1a66:	68fb      	ldr	r3, [r7, #12]
    1a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a6a:	68f8      	ldr	r0, [r7, #12]
    1a6c:	4798      	blx	r3
	}
}
    1a6e:	bf00      	nop
    1a70:	3710      	adds	r7, #16
    1a72:	46bd      	mov	sp, r7
    1a74:	bd80      	pop	{r7, pc}
    1a76:	bf00      	nop
    1a78:	0000243d 	.word	0x0000243d

00001a7c <i2c_s_async_error>:
 * \internal Callback function for error
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_error(struct _i2c_s_async_device *const device)
{
    1a7c:	b580      	push	{r7, lr}
    1a7e:	b084      	sub	sp, #16
    1a80:	af00      	add	r7, sp, #0
    1a82:	6078      	str	r0, [r7, #4]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	60fb      	str	r3, [r7, #12]

	if (descr->cbs.error) {
    1a88:	68fb      	ldr	r3, [r7, #12]
    1a8a:	6a1b      	ldr	r3, [r3, #32]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d003      	beq.n	1a98 <i2c_s_async_error+0x1c>
		descr->cbs.error(descr);
    1a90:	68fb      	ldr	r3, [r7, #12]
    1a92:	6a1b      	ldr	r3, [r3, #32]
    1a94:	68f8      	ldr	r0, [r7, #12]
    1a96:	4798      	blx	r3
	}
}
    1a98:	bf00      	nop
    1a9a:	3710      	adds	r7, #16
    1a9c:	46bd      	mov	sp, r7
    1a9e:	bd80      	pop	{r7, pc}

00001aa0 <i2c_s_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t i2c_s_async_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length)
{
    1aa0:	b580      	push	{r7, lr}
    1aa2:	b088      	sub	sp, #32
    1aa4:	af00      	add	r7, sp, #0
    1aa6:	60f8      	str	r0, [r7, #12]
    1aa8:	60b9      	str	r1, [r7, #8]
    1aaa:	4613      	mov	r3, r2
    1aac:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
    1aae:	2300      	movs	r3, #0
    1ab0:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(io, struct i2c_s_async_descriptor, io);
    1ab2:	68fb      	ldr	r3, [r7, #12]
    1ab4:	3b18      	subs	r3, #24
    1ab6:	61bb      	str	r3, [r7, #24]

	ASSERT(io && buf && length);
    1ab8:	68fb      	ldr	r3, [r7, #12]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d007      	beq.n	1ace <i2c_s_async_read+0x2e>
    1abe:	68bb      	ldr	r3, [r7, #8]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d004      	beq.n	1ace <i2c_s_async_read+0x2e>
    1ac4:	88fb      	ldrh	r3, [r7, #6]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d001      	beq.n	1ace <i2c_s_async_read+0x2e>
    1aca:	2301      	movs	r3, #1
    1acc:	e000      	b.n	1ad0 <i2c_s_async_read+0x30>
    1ace:	2300      	movs	r3, #0
    1ad0:	f003 0301 	and.w	r3, r3, #1
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	f44f 729b 	mov.w	r2, #310	; 0x136
    1ada:	4917      	ldr	r1, [pc, #92]	; (1b38 <i2c_s_async_read+0x98>)
    1adc:	4618      	mov	r0, r3
    1ade:	4b17      	ldr	r3, [pc, #92]	; (1b3c <i2c_s_async_read+0x9c>)
    1ae0:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1ae2:	f107 0310 	add.w	r3, r7, #16
    1ae6:	4618      	mov	r0, r3
    1ae8:	4b15      	ldr	r3, [pc, #84]	; (1b40 <i2c_s_async_read+0xa0>)
    1aea:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1aec:	69bb      	ldr	r3, [r7, #24]
    1aee:	3330      	adds	r3, #48	; 0x30
    1af0:	4618      	mov	r0, r3
    1af2:	4b14      	ldr	r3, [pc, #80]	; (1b44 <i2c_s_async_read+0xa4>)
    1af4:	4798      	blx	r3
    1af6:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    1af8:	f107 0310 	add.w	r3, r7, #16
    1afc:	4618      	mov	r0, r3
    1afe:	4b12      	ldr	r3, [pc, #72]	; (1b48 <i2c_s_async_read+0xa8>)
    1b00:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    1b02:	e00c      	b.n	1b1e <i2c_s_async_read+0x7e>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1b04:	69bb      	ldr	r3, [r7, #24]
    1b06:	f103 0230 	add.w	r2, r3, #48	; 0x30
    1b0a:	8bfb      	ldrh	r3, [r7, #30]
    1b0c:	1c59      	adds	r1, r3, #1
    1b0e:	83f9      	strh	r1, [r7, #30]
    1b10:	4619      	mov	r1, r3
    1b12:	68bb      	ldr	r3, [r7, #8]
    1b14:	440b      	add	r3, r1
    1b16:	4619      	mov	r1, r3
    1b18:	4610      	mov	r0, r2
    1b1a:	4b0c      	ldr	r3, [pc, #48]	; (1b4c <i2c_s_async_read+0xac>)
    1b1c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1b1e:	8bfa      	ldrh	r2, [r7, #30]
    1b20:	697b      	ldr	r3, [r7, #20]
    1b22:	429a      	cmp	r2, r3
    1b24:	d203      	bcs.n	1b2e <i2c_s_async_read+0x8e>
    1b26:	8bfa      	ldrh	r2, [r7, #30]
    1b28:	88fb      	ldrh	r3, [r7, #6]
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d3ea      	bcc.n	1b04 <i2c_s_async_read+0x64>
	}

	return (int32_t)was_read;
    1b2e:	8bfb      	ldrh	r3, [r7, #30]
}
    1b30:	4618      	mov	r0, r3
    1b32:	3720      	adds	r7, #32
    1b34:	46bd      	mov	sp, r7
    1b36:	bd80      	pop	{r7, pc}
    1b38:	00008e38 	.word	0x00008e38
    1b3c:	00002249 	.word	0x00002249
    1b40:	000015c5 	.word	0x000015c5
    1b44:	000024b1 	.word	0x000024b1
    1b48:	000015eb 	.word	0x000015eb
    1b4c:	000023cd 	.word	0x000023cd

00001b50 <i2c_s_async_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_async_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	b086      	sub	sp, #24
    1b54:	af00      	add	r7, sp, #0
    1b56:	60f8      	str	r0, [r7, #12]
    1b58:	60b9      	str	r1, [r7, #8]
    1b5a:	4613      	mov	r3, r2
    1b5c:	80fb      	strh	r3, [r7, #6]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(io, struct i2c_s_async_descriptor, io);
    1b5e:	68fb      	ldr	r3, [r7, #12]
    1b60:	3b18      	subs	r3, #24
    1b62:	617b      	str	r3, [r7, #20]

	ASSERT(io && buf && length);
    1b64:	68fb      	ldr	r3, [r7, #12]
    1b66:	2b00      	cmp	r3, #0
    1b68:	d007      	beq.n	1b7a <i2c_s_async_write+0x2a>
    1b6a:	68bb      	ldr	r3, [r7, #8]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d004      	beq.n	1b7a <i2c_s_async_write+0x2a>
    1b70:	88fb      	ldrh	r3, [r7, #6]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d001      	beq.n	1b7a <i2c_s_async_write+0x2a>
    1b76:	2301      	movs	r3, #1
    1b78:	e000      	b.n	1b7c <i2c_s_async_write+0x2c>
    1b7a:	2300      	movs	r3, #0
    1b7c:	f003 0301 	and.w	r3, r3, #1
    1b80:	b2db      	uxtb	r3, r3
    1b82:	f240 1251 	movw	r2, #337	; 0x151
    1b86:	4911      	ldr	r1, [pc, #68]	; (1bcc <i2c_s_async_write+0x7c>)
    1b88:	4618      	mov	r0, r3
    1b8a:	4b11      	ldr	r3, [pc, #68]	; (1bd0 <i2c_s_async_write+0x80>)
    1b8c:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1b8e:	697b      	ldr	r3, [r7, #20]
    1b90:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
    1b94:	697b      	ldr	r3, [r7, #20]
    1b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    1b9a:	429a      	cmp	r2, r3
    1b9c:	d002      	beq.n	1ba4 <i2c_s_async_write+0x54>
		return ERR_BUSY;
    1b9e:	f06f 0303 	mvn.w	r3, #3
    1ba2:	e00f      	b.n	1bc4 <i2c_s_async_write+0x74>
	}

	descr->tx_buffer        = (uint8_t *)buf;
    1ba4:	697b      	ldr	r3, [r7, #20]
    1ba6:	68ba      	ldr	r2, [r7, #8]
    1ba8:	641a      	str	r2, [r3, #64]	; 0x40
	descr->tx_buffer_length = length;
    1baa:	697b      	ldr	r3, [r7, #20]
    1bac:	88fa      	ldrh	r2, [r7, #6]
    1bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[0]);
    1bb2:	697a      	ldr	r2, [r7, #20]
    1bb4:	697b      	ldr	r3, [r7, #20]
    1bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	4619      	mov	r1, r3
    1bbc:	4610      	mov	r0, r2
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <i2c_s_async_write+0x84>)
    1bc0:	4798      	blx	r3

	return (int32_t)length;
    1bc2:	88fb      	ldrh	r3, [r7, #6]
}
    1bc4:	4618      	mov	r0, r3
    1bc6:	3718      	adds	r7, #24
    1bc8:	46bd      	mov	sp, r7
    1bca:	bd80      	pop	{r7, pc}
    1bcc:	00008e38 	.word	0x00008e38
    1bd0:	00002249 	.word	0x00002249
    1bd4:	00005255 	.word	0x00005255

00001bd8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	681b      	ldr	r3, [r3, #0]
}
    1be4:	4618      	mov	r0, r3
    1be6:	370c      	adds	r7, #12
    1be8:	46bd      	mov	sp, r7
    1bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bee:	4770      	bx	lr

00001bf0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    1bf0:	b480      	push	{r7}
    1bf2:	b083      	sub	sp, #12
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d002      	beq.n	1c04 <list_get_next_element+0x14>
    1bfe:	687b      	ldr	r3, [r7, #4]
    1c00:	681b      	ldr	r3, [r3, #0]
    1c02:	e000      	b.n	1c06 <list_get_next_element+0x16>
    1c04:	2300      	movs	r3, #0
}
    1c06:	4618      	mov	r0, r3
    1c08:	370c      	adds	r7, #12
    1c0a:	46bd      	mov	sp, r7
    1c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c10:	4770      	bx	lr
	...

00001c14 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b084      	sub	sp, #16
    1c18:	af00      	add	r7, sp, #0
    1c1a:	60f8      	str	r0, [r7, #12]
    1c1c:	60b9      	str	r1, [r7, #8]
    1c1e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    1c20:	68fb      	ldr	r3, [r7, #12]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d007      	beq.n	1c36 <timer_init+0x22>
    1c26:	68bb      	ldr	r3, [r7, #8]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d004      	beq.n	1c36 <timer_init+0x22>
    1c2c:	687b      	ldr	r3, [r7, #4]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d001      	beq.n	1c36 <timer_init+0x22>
    1c32:	2301      	movs	r3, #1
    1c34:	e000      	b.n	1c38 <timer_init+0x24>
    1c36:	2300      	movs	r3, #0
    1c38:	f003 0301 	and.w	r3, r3, #1
    1c3c:	b2db      	uxtb	r3, r3
    1c3e:	223b      	movs	r2, #59	; 0x3b
    1c40:	490c      	ldr	r1, [pc, #48]	; (1c74 <timer_init+0x60>)
    1c42:	4618      	mov	r0, r3
    1c44:	4b0c      	ldr	r3, [pc, #48]	; (1c78 <timer_init+0x64>)
    1c46:	4798      	blx	r3
	descr->func = func;
    1c48:	68fb      	ldr	r3, [r7, #12]
    1c4a:	687a      	ldr	r2, [r7, #4]
    1c4c:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    1c4e:	68fb      	ldr	r3, [r7, #12]
    1c50:	681b      	ldr	r3, [r3, #0]
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	68fa      	ldr	r2, [r7, #12]
    1c56:	3204      	adds	r2, #4
    1c58:	68b9      	ldr	r1, [r7, #8]
    1c5a:	4610      	mov	r0, r2
    1c5c:	4798      	blx	r3
	descr->time                           = 0;
    1c5e:	68fb      	ldr	r3, [r7, #12]
    1c60:	2200      	movs	r2, #0
    1c62:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1c64:	68fb      	ldr	r3, [r7, #12]
    1c66:	4a05      	ldr	r2, [pc, #20]	; (1c7c <timer_init+0x68>)
    1c68:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    1c6a:	2300      	movs	r3, #0
}
    1c6c:	4618      	mov	r0, r3
    1c6e:	3710      	adds	r7, #16
    1c70:	46bd      	mov	sp, r7
    1c72:	bd80      	pop	{r7, pc}
    1c74:	00008e58 	.word	0x00008e58
    1c78:	00002249 	.word	0x00002249
    1c7c:	00001d31 	.word	0x00001d31

00001c80 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1c80:	b580      	push	{r7, lr}
    1c82:	b088      	sub	sp, #32
    1c84:	af00      	add	r7, sp, #0
    1c86:	60f8      	str	r0, [r7, #12]
    1c88:	60b9      	str	r1, [r7, #8]
    1c8a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1c8c:	2300      	movs	r3, #0
    1c8e:	61bb      	str	r3, [r7, #24]
    1c90:	68f8      	ldr	r0, [r7, #12]
    1c92:	4b23      	ldr	r3, [pc, #140]	; (1d20 <timer_add_timer_task+0xa0>)
    1c94:	4798      	blx	r3
    1c96:	6138      	str	r0, [r7, #16]

	if (!head) {
    1c98:	693b      	ldr	r3, [r7, #16]
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d104      	bne.n	1ca8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    1c9e:	68b9      	ldr	r1, [r7, #8]
    1ca0:	68f8      	ldr	r0, [r7, #12]
    1ca2:	4b20      	ldr	r3, [pc, #128]	; (1d24 <timer_add_timer_task+0xa4>)
    1ca4:	4798      	blx	r3
		return;
    1ca6:	e037      	b.n	1d18 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1ca8:	693b      	ldr	r3, [r7, #16]
    1caa:	61fb      	str	r3, [r7, #28]
    1cac:	e022      	b.n	1cf4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    1cae:	69fb      	ldr	r3, [r7, #28]
    1cb0:	685a      	ldr	r2, [r3, #4]
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d808      	bhi.n	1cca <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    1cb8:	69fb      	ldr	r3, [r7, #28]
    1cba:	689a      	ldr	r2, [r3, #8]
    1cbc:	69fb      	ldr	r3, [r7, #28]
    1cbe:	6859      	ldr	r1, [r3, #4]
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	1acb      	subs	r3, r1, r3
    1cc4:	4413      	add	r3, r2
    1cc6:	617b      	str	r3, [r7, #20]
    1cc8:	e009      	b.n	1cde <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1cca:	69fb      	ldr	r3, [r7, #28]
    1ccc:	689a      	ldr	r2, [r3, #8]
    1cce:	69fb      	ldr	r3, [r7, #28]
    1cd0:	685b      	ldr	r3, [r3, #4]
    1cd2:	441a      	add	r2, r3
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	425b      	negs	r3, r3
    1cd8:	4413      	add	r3, r2
    1cda:	3301      	adds	r3, #1
    1cdc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1cde:	68bb      	ldr	r3, [r7, #8]
    1ce0:	689a      	ldr	r2, [r3, #8]
    1ce2:	697b      	ldr	r3, [r7, #20]
    1ce4:	429a      	cmp	r2, r3
    1ce6:	d909      	bls.n	1cfc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    1ce8:	69fb      	ldr	r3, [r7, #28]
    1cea:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1cec:	69f8      	ldr	r0, [r7, #28]
    1cee:	4b0e      	ldr	r3, [pc, #56]	; (1d28 <timer_add_timer_task+0xa8>)
    1cf0:	4798      	blx	r3
    1cf2:	61f8      	str	r0, [r7, #28]
    1cf4:	69fb      	ldr	r3, [r7, #28]
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d1d9      	bne.n	1cae <timer_add_timer_task+0x2e>
    1cfa:	e000      	b.n	1cfe <timer_add_timer_task+0x7e>
			break;
    1cfc:	bf00      	nop
	}

	if (it == head) {
    1cfe:	69fa      	ldr	r2, [r7, #28]
    1d00:	693b      	ldr	r3, [r7, #16]
    1d02:	429a      	cmp	r2, r3
    1d04:	d104      	bne.n	1d10 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    1d06:	68b9      	ldr	r1, [r7, #8]
    1d08:	68f8      	ldr	r0, [r7, #12]
    1d0a:	4b06      	ldr	r3, [pc, #24]	; (1d24 <timer_add_timer_task+0xa4>)
    1d0c:	4798      	blx	r3
    1d0e:	e003      	b.n	1d18 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    1d10:	68b9      	ldr	r1, [r7, #8]
    1d12:	69b8      	ldr	r0, [r7, #24]
    1d14:	4b05      	ldr	r3, [pc, #20]	; (1d2c <timer_add_timer_task+0xac>)
    1d16:	4798      	blx	r3
	}
}
    1d18:	3720      	adds	r7, #32
    1d1a:	46bd      	mov	sp, r7
    1d1c:	bd80      	pop	{r7, pc}
    1d1e:	bf00      	nop
    1d20:	00001bd9 	.word	0x00001bd9
    1d24:	000022a9 	.word	0x000022a9
    1d28:	00001bf1 	.word	0x00001bf1
    1d2c:	00002301 	.word	0x00002301

00001d30 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b086      	sub	sp, #24
    1d34:	af00      	add	r7, sp, #0
    1d36:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	3b04      	subs	r3, #4
    1d3c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1d3e:	693b      	ldr	r3, [r7, #16]
    1d40:	3318      	adds	r3, #24
    1d42:	4618      	mov	r0, r3
    1d44:	4b27      	ldr	r3, [pc, #156]	; (1de4 <timer_process_counted+0xb4>)
    1d46:	4798      	blx	r3
    1d48:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1d4a:	693b      	ldr	r3, [r7, #16]
    1d4c:	695b      	ldr	r3, [r3, #20]
    1d4e:	1c5a      	adds	r2, r3, #1
    1d50:	693b      	ldr	r3, [r7, #16]
    1d52:	615a      	str	r2, [r3, #20]
    1d54:	693b      	ldr	r3, [r7, #16]
    1d56:	695b      	ldr	r3, [r3, #20]
    1d58:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1d5a:	693b      	ldr	r3, [r7, #16]
    1d5c:	7f1b      	ldrb	r3, [r3, #28]
    1d5e:	b2db      	uxtb	r3, r3
    1d60:	f003 0301 	and.w	r3, r3, #1
    1d64:	2b00      	cmp	r3, #0
    1d66:	d106      	bne.n	1d76 <timer_process_counted+0x46>
    1d68:	693b      	ldr	r3, [r7, #16]
    1d6a:	7f1b      	ldrb	r3, [r3, #28]
    1d6c:	b2db      	uxtb	r3, r3
    1d6e:	f003 0302 	and.w	r3, r3, #2
    1d72:	2b00      	cmp	r3, #0
    1d74:	d027      	beq.n	1dc6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1d76:	693b      	ldr	r3, [r7, #16]
    1d78:	7f1b      	ldrb	r3, [r3, #28]
    1d7a:	b2db      	uxtb	r3, r3
    1d7c:	f043 0302 	orr.w	r3, r3, #2
    1d80:	b2da      	uxtb	r2, r3
    1d82:	693b      	ldr	r3, [r7, #16]
    1d84:	771a      	strb	r2, [r3, #28]
		return;
    1d86:	e029      	b.n	1ddc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1d88:	697b      	ldr	r3, [r7, #20]
    1d8a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1d8c:	693b      	ldr	r3, [r7, #16]
    1d8e:	3318      	adds	r3, #24
    1d90:	4618      	mov	r0, r3
    1d92:	4b15      	ldr	r3, [pc, #84]	; (1de8 <timer_process_counted+0xb8>)
    1d94:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1d96:	68bb      	ldr	r3, [r7, #8]
    1d98:	7c1b      	ldrb	r3, [r3, #16]
    1d9a:	2b01      	cmp	r3, #1
    1d9c:	d109      	bne.n	1db2 <timer_process_counted+0x82>
			tmp->time_label = time;
    1d9e:	68bb      	ldr	r3, [r7, #8]
    1da0:	68fa      	ldr	r2, [r7, #12]
    1da2:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1da4:	693b      	ldr	r3, [r7, #16]
    1da6:	3318      	adds	r3, #24
    1da8:	68fa      	ldr	r2, [r7, #12]
    1daa:	68b9      	ldr	r1, [r7, #8]
    1dac:	4618      	mov	r0, r3
    1dae:	4b0f      	ldr	r3, [pc, #60]	; (1dec <timer_process_counted+0xbc>)
    1db0:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1db2:	693b      	ldr	r3, [r7, #16]
    1db4:	3318      	adds	r3, #24
    1db6:	4618      	mov	r0, r3
    1db8:	4b0a      	ldr	r3, [pc, #40]	; (1de4 <timer_process_counted+0xb4>)
    1dba:	4798      	blx	r3
    1dbc:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    1dbe:	68bb      	ldr	r3, [r7, #8]
    1dc0:	68db      	ldr	r3, [r3, #12]
    1dc2:	68b8      	ldr	r0, [r7, #8]
    1dc4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1dc6:	697b      	ldr	r3, [r7, #20]
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d007      	beq.n	1ddc <timer_process_counted+0xac>
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	685b      	ldr	r3, [r3, #4]
    1dd0:	68fa      	ldr	r2, [r7, #12]
    1dd2:	1ad2      	subs	r2, r2, r3
    1dd4:	697b      	ldr	r3, [r7, #20]
    1dd6:	689b      	ldr	r3, [r3, #8]
    1dd8:	429a      	cmp	r2, r3
    1dda:	d2d5      	bcs.n	1d88 <timer_process_counted+0x58>
	}
}
    1ddc:	3718      	adds	r7, #24
    1dde:	46bd      	mov	sp, r7
    1de0:	bd80      	pop	{r7, pc}
    1de2:	bf00      	nop
    1de4:	00001bd9 	.word	0x00001bd9
    1de8:	00002325 	.word	0x00002325
    1dec:	00001c81 	.word	0x00001c81

00001df0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1df0:	b480      	push	{r7}
    1df2:	b085      	sub	sp, #20
    1df4:	af00      	add	r7, sp, #0
    1df6:	4603      	mov	r3, r0
    1df8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1dfa:	2300      	movs	r3, #0
    1dfc:	73fb      	strb	r3, [r7, #15]
    1dfe:	e029      	b.n	1e54 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e04:	4a19      	ldr	r2, [pc, #100]	; (1e6c <_usb_d_find_ep+0x7c>)
    1e06:	015b      	lsls	r3, r3, #5
    1e08:	4413      	add	r3, r2
    1e0a:	3301      	adds	r3, #1
    1e0c:	781b      	ldrb	r3, [r3, #0]
    1e0e:	79fa      	ldrb	r2, [r7, #7]
    1e10:	429a      	cmp	r2, r3
    1e12:	d102      	bne.n	1e1a <_usb_d_find_ep+0x2a>
			return i;
    1e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e18:	e022      	b.n	1e60 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e1e:	4a13      	ldr	r2, [pc, #76]	; (1e6c <_usb_d_find_ep+0x7c>)
    1e20:	015b      	lsls	r3, r3, #5
    1e22:	4413      	add	r3, r2
    1e24:	781b      	ldrb	r3, [r3, #0]
    1e26:	2b00      	cmp	r3, #0
    1e28:	d10e      	bne.n	1e48 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1e2a:	79fb      	ldrb	r3, [r7, #7]
    1e2c:	f003 030f 	and.w	r3, r3, #15
    1e30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    1e34:	490d      	ldr	r1, [pc, #52]	; (1e6c <_usb_d_find_ep+0x7c>)
    1e36:	0152      	lsls	r2, r2, #5
    1e38:	440a      	add	r2, r1
    1e3a:	3201      	adds	r2, #1
    1e3c:	7812      	ldrb	r2, [r2, #0]
    1e3e:	4293      	cmp	r3, r2
    1e40:	d102      	bne.n	1e48 <_usb_d_find_ep+0x58>
			return i;
    1e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e46:	e00b      	b.n	1e60 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e4c:	b2db      	uxtb	r3, r3
    1e4e:	3301      	adds	r3, #1
    1e50:	b2db      	uxtb	r3, r3
    1e52:	73fb      	strb	r3, [r7, #15]
    1e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1e58:	2b03      	cmp	r3, #3
    1e5a:	ddd1      	ble.n	1e00 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    1e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
    1e60:	4618      	mov	r0, r3
    1e62:	3714      	adds	r7, #20
    1e64:	46bd      	mov	sp, r7
    1e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e6a:	4770      	bx	lr
    1e6c:	200001f0 	.word	0x200001f0

00001e70 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    1e70:	b580      	push	{r7, lr}
    1e72:	b088      	sub	sp, #32
    1e74:	af00      	add	r7, sp, #0
    1e76:	60ba      	str	r2, [r7, #8]
    1e78:	607b      	str	r3, [r7, #4]
    1e7a:	4603      	mov	r3, r0
    1e7c:	73fb      	strb	r3, [r7, #15]
    1e7e:	460b      	mov	r3, r1
    1e80:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    1e82:	68bb      	ldr	r3, [r7, #8]
    1e84:	617b      	str	r3, [r7, #20]
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	61bb      	str	r3, [r7, #24]
    1e8a:	7bbb      	ldrb	r3, [r7, #14]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d004      	beq.n	1e9a <_usb_d_trans+0x2a>
    1e90:	7bfb      	ldrb	r3, [r7, #15]
    1e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1e96:	b2db      	uxtb	r3, r3
    1e98:	e003      	b.n	1ea2 <_usb_d_trans+0x32>
    1e9a:	7bfb      	ldrb	r3, [r7, #15]
    1e9c:	f003 030f 	and.w	r3, r3, #15
    1ea0:	b2db      	uxtb	r3, r3
    1ea2:	773b      	strb	r3, [r7, #28]
    1ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1ea8:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    1eaa:	f107 0314 	add.w	r3, r7, #20
    1eae:	4618      	mov	r0, r3
    1eb0:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <_usb_d_trans+0x50>)
    1eb2:	4798      	blx	r3
    1eb4:	4603      	mov	r3, r0
}
    1eb6:	4618      	mov	r0, r3
    1eb8:	3720      	adds	r7, #32
    1eba:	46bd      	mov	sp, r7
    1ebc:	bd80      	pop	{r7, pc}
    1ebe:	bf00      	nop
    1ec0:	00008661 	.word	0x00008661

00001ec4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    1ec4:	b480      	push	{r7}
    1ec6:	b085      	sub	sp, #20
    1ec8:	af00      	add	r7, sp, #0
    1eca:	60f8      	str	r0, [r7, #12]
    1ecc:	60b9      	str	r1, [r7, #8]
    1ece:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    1ed0:	2300      	movs	r3, #0
}
    1ed2:	4618      	mov	r0, r3
    1ed4:	3714      	adds	r7, #20
    1ed6:	46bd      	mov	sp, r7
    1ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1edc:	4770      	bx	lr
	...

00001ee0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b086      	sub	sp, #24
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	4603      	mov	r3, r0
    1ee8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    1eea:	79fb      	ldrb	r3, [r7, #7]
    1eec:	4618      	mov	r0, r3
    1eee:	4b2a      	ldr	r3, [pc, #168]	; (1f98 <usb_d_cb_trans_setup+0xb8>)
    1ef0:	4798      	blx	r3
    1ef2:	4603      	mov	r3, r0
    1ef4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    1ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1efa:	015b      	lsls	r3, r3, #5
    1efc:	4a27      	ldr	r2, [pc, #156]	; (1f9c <usb_d_cb_trans_setup+0xbc>)
    1efe:	4413      	add	r3, r2
    1f00:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    1f02:	693b      	ldr	r3, [r7, #16]
    1f04:	330c      	adds	r3, #12
    1f06:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1f08:	79fb      	ldrb	r3, [r7, #7]
    1f0a:	68f9      	ldr	r1, [r7, #12]
    1f0c:	4618      	mov	r0, r3
    1f0e:	4b24      	ldr	r3, [pc, #144]	; (1fa0 <usb_d_cb_trans_setup+0xc0>)
    1f10:	4798      	blx	r3
    1f12:	4603      	mov	r3, r0
    1f14:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    1f16:	7afb      	ldrb	r3, [r7, #11]
    1f18:	2b08      	cmp	r3, #8
    1f1a:	d00d      	beq.n	1f38 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1f1c:	79fb      	ldrb	r3, [r7, #7]
    1f1e:	2101      	movs	r1, #1
    1f20:	4618      	mov	r0, r3
    1f22:	4b20      	ldr	r3, [pc, #128]	; (1fa4 <usb_d_cb_trans_setup+0xc4>)
    1f24:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1f26:	79fb      	ldrb	r3, [r7, #7]
    1f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1f2c:	b2db      	uxtb	r3, r3
    1f2e:	2101      	movs	r1, #1
    1f30:	4618      	mov	r0, r3
    1f32:	4b1c      	ldr	r3, [pc, #112]	; (1fa4 <usb_d_cb_trans_setup+0xc4>)
    1f34:	4798      	blx	r3
		return;
    1f36:	e02b      	b.n	1f90 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1f38:	79fb      	ldrb	r3, [r7, #7]
    1f3a:	2100      	movs	r1, #0
    1f3c:	4618      	mov	r0, r3
    1f3e:	4b19      	ldr	r3, [pc, #100]	; (1fa4 <usb_d_cb_trans_setup+0xc4>)
    1f40:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1f42:	79fb      	ldrb	r3, [r7, #7]
    1f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1f48:	b2db      	uxtb	r3, r3
    1f4a:	2100      	movs	r1, #0
    1f4c:	4618      	mov	r0, r3
    1f4e:	4b15      	ldr	r3, [pc, #84]	; (1fa4 <usb_d_cb_trans_setup+0xc4>)
    1f50:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1f52:	693b      	ldr	r3, [r7, #16]
    1f54:	2201      	movs	r2, #1
    1f56:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1f58:	693b      	ldr	r3, [r7, #16]
    1f5a:	695b      	ldr	r3, [r3, #20]
    1f5c:	79fa      	ldrb	r2, [r7, #7]
    1f5e:	68f9      	ldr	r1, [r7, #12]
    1f60:	4610      	mov	r0, r2
    1f62:	4798      	blx	r3
    1f64:	4603      	mov	r3, r0
    1f66:	f083 0301 	eor.w	r3, r3, #1
    1f6a:	b2db      	uxtb	r3, r3
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d00f      	beq.n	1f90 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1f70:	693b      	ldr	r3, [r7, #16]
    1f72:	2205      	movs	r2, #5
    1f74:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1f76:	79fb      	ldrb	r3, [r7, #7]
    1f78:	2101      	movs	r1, #1
    1f7a:	4618      	mov	r0, r3
    1f7c:	4b09      	ldr	r3, [pc, #36]	; (1fa4 <usb_d_cb_trans_setup+0xc4>)
    1f7e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1f80:	79fb      	ldrb	r3, [r7, #7]
    1f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1f86:	b2db      	uxtb	r3, r3
    1f88:	2101      	movs	r1, #1
    1f8a:	4618      	mov	r0, r3
    1f8c:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <usb_d_cb_trans_setup+0xc4>)
    1f8e:	4798      	blx	r3
	}
}
    1f90:	3718      	adds	r7, #24
    1f92:	46bd      	mov	sp, r7
    1f94:	bd80      	pop	{r7, pc}
    1f96:	bf00      	nop
    1f98:	00001df1 	.word	0x00001df1
    1f9c:	200001f0 	.word	0x200001f0
    1fa0:	000085b9 	.word	0x000085b9
    1fa4:	00008431 	.word	0x00008431

00001fa8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	b084      	sub	sp, #16
    1fac:	af00      	add	r7, sp, #0
    1fae:	4603      	mov	r3, r0
    1fb0:	6039      	str	r1, [r7, #0]
    1fb2:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fb4:	79fb      	ldrb	r3, [r7, #7]
    1fb6:	4618      	mov	r0, r3
    1fb8:	4b0d      	ldr	r3, [pc, #52]	; (1ff0 <usb_d_cb_trans_more+0x48>)
    1fba:	4798      	blx	r3
    1fbc:	4603      	mov	r3, r0
    1fbe:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    1fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1fc4:	015b      	lsls	r3, r3, #5
    1fc6:	4a0b      	ldr	r2, [pc, #44]	; (1ff4 <usb_d_cb_trans_more+0x4c>)
    1fc8:	4413      	add	r3, r2
    1fca:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1fcc:	68bb      	ldr	r3, [r7, #8]
    1fce:	789b      	ldrb	r3, [r3, #2]
    1fd0:	2b03      	cmp	r3, #3
    1fd2:	d107      	bne.n	1fe4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    1fd4:	68bb      	ldr	r3, [r7, #8]
    1fd6:	699b      	ldr	r3, [r3, #24]
    1fd8:	79fa      	ldrb	r2, [r7, #7]
    1fda:	6839      	ldr	r1, [r7, #0]
    1fdc:	4610      	mov	r0, r2
    1fde:	4798      	blx	r3
    1fe0:	4603      	mov	r3, r0
    1fe2:	e000      	b.n	1fe6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    1fe4:	2300      	movs	r3, #0
}
    1fe6:	4618      	mov	r0, r3
    1fe8:	3710      	adds	r7, #16
    1fea:	46bd      	mov	sp, r7
    1fec:	bd80      	pop	{r7, pc}
    1fee:	bf00      	nop
    1ff0:	00001df1 	.word	0x00001df1
    1ff4:	200001f0 	.word	0x200001f0

00001ff8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    1ff8:	b590      	push	{r4, r7, lr}
    1ffa:	b087      	sub	sp, #28
    1ffc:	af02      	add	r7, sp, #8
    1ffe:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	789b      	ldrb	r3, [r3, #2]
    2004:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2006:	687b      	ldr	r3, [r7, #4]
    2008:	7b1b      	ldrb	r3, [r3, #12]
    200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    200e:	2b00      	cmp	r3, #0
    2010:	bf14      	ite	ne
    2012:	2301      	movne	r3, #1
    2014:	2300      	moveq	r3, #0
    2016:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2018:	7bfb      	ldrb	r3, [r7, #15]
    201a:	2b03      	cmp	r3, #3
    201c:	d13a      	bne.n	2094 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	69db      	ldr	r3, [r3, #28]
    2022:	687a      	ldr	r2, [r7, #4]
    2024:	7850      	ldrb	r0, [r2, #1]
    2026:	687a      	ldr	r2, [r7, #4]
    2028:	320c      	adds	r2, #12
    202a:	2101      	movs	r1, #1
    202c:	4798      	blx	r3
    202e:	4603      	mov	r3, r0
    2030:	737b      	strb	r3, [r7, #13]
		if (err) {
    2032:	7b7b      	ldrb	r3, [r7, #13]
    2034:	2b00      	cmp	r3, #0
    2036:	d015      	beq.n	2064 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	2205      	movs	r2, #5
    203c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	2202      	movs	r2, #2
    2042:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2044:	7bbb      	ldrb	r3, [r7, #14]
    2046:	2b00      	cmp	r3, #0
    2048:	d002      	beq.n	2050 <usb_d_ctrl_trans_done+0x58>
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	785b      	ldrb	r3, [r3, #1]
    204e:	e004      	b.n	205a <usb_d_ctrl_trans_done+0x62>
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	785b      	ldrb	r3, [r3, #1]
    2054:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2058:	b2db      	uxtb	r3, r3
    205a:	2101      	movs	r1, #1
    205c:	4618      	mov	r0, r3
    205e:	4b15      	ldr	r3, [pc, #84]	; (20b4 <usb_d_ctrl_trans_done+0xbc>)
    2060:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2062:	e022      	b.n	20aa <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	2204      	movs	r2, #4
    2068:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	7858      	ldrb	r0, [r3, #1]
    206e:	7bbb      	ldrb	r3, [r7, #14]
    2070:	2b00      	cmp	r3, #0
    2072:	bf14      	ite	ne
    2074:	2301      	movne	r3, #1
    2076:	2300      	moveq	r3, #0
    2078:	b2db      	uxtb	r3, r3
    207a:	f083 0301 	eor.w	r3, r3, #1
    207e:	b2db      	uxtb	r3, r3
    2080:	f003 0301 	and.w	r3, r3, #1
    2084:	b2d9      	uxtb	r1, r3
    2086:	2301      	movs	r3, #1
    2088:	9300      	str	r3, [sp, #0]
    208a:	2300      	movs	r3, #0
    208c:	2200      	movs	r2, #0
    208e:	4c0a      	ldr	r4, [pc, #40]	; (20b8 <usb_d_ctrl_trans_done+0xc0>)
    2090:	47a0      	blx	r4
}
    2092:	e00a      	b.n	20aa <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2094:	687b      	ldr	r3, [r7, #4]
    2096:	69db      	ldr	r3, [r3, #28]
    2098:	687a      	ldr	r2, [r7, #4]
    209a:	7850      	ldrb	r0, [r2, #1]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	320c      	adds	r2, #12
    20a0:	2100      	movs	r1, #0
    20a2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	2202      	movs	r2, #2
    20a8:	709a      	strb	r2, [r3, #2]
}
    20aa:	bf00      	nop
    20ac:	3714      	adds	r7, #20
    20ae:	46bd      	mov	sp, r7
    20b0:	bd90      	pop	{r4, r7, pc}
    20b2:	bf00      	nop
    20b4:	00008431 	.word	0x00008431
    20b8:	00001e71 	.word	0x00001e71

000020bc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    20bc:	b580      	push	{r7, lr}
    20be:	b086      	sub	sp, #24
    20c0:	af00      	add	r7, sp, #0
    20c2:	4603      	mov	r3, r0
    20c4:	60b9      	str	r1, [r7, #8]
    20c6:	607a      	str	r2, [r7, #4]
    20c8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    20ca:	7bfb      	ldrb	r3, [r7, #15]
    20cc:	4618      	mov	r0, r3
    20ce:	4b2f      	ldr	r3, [pc, #188]	; (218c <_usb_d_cb_trans_done+0xd0>)
    20d0:	4798      	blx	r3
    20d2:	4603      	mov	r3, r0
    20d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    20d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    20da:	015b      	lsls	r3, r3, #5
    20dc:	4a2c      	ldr	r2, [pc, #176]	; (2190 <_usb_d_cb_trans_done+0xd4>)
    20de:	4413      	add	r3, r2
    20e0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    20e2:	68bb      	ldr	r3, [r7, #8]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d10e      	bne.n	2106 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    20e8:	693b      	ldr	r3, [r7, #16]
    20ea:	2200      	movs	r2, #0
    20ec:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    20ee:	693b      	ldr	r3, [r7, #16]
    20f0:	781b      	ldrb	r3, [r3, #0]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d103      	bne.n	20fe <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    20f6:	6938      	ldr	r0, [r7, #16]
    20f8:	4b26      	ldr	r3, [pc, #152]	; (2194 <_usb_d_cb_trans_done+0xd8>)
    20fa:	4798      	blx	r3
			return;
    20fc:	e043      	b.n	2186 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    20fe:	693b      	ldr	r3, [r7, #16]
    2100:	2201      	movs	r2, #1
    2102:	709a      	strb	r2, [r3, #2]
    2104:	e038      	b.n	2178 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2106:	68bb      	ldr	r3, [r7, #8]
    2108:	2b01      	cmp	r3, #1
    210a:	d113      	bne.n	2134 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    210c:	693b      	ldr	r3, [r7, #16]
    210e:	2202      	movs	r2, #2
    2110:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2112:	693b      	ldr	r3, [r7, #16]
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	2b00      	cmp	r3, #0
    2118:	d108      	bne.n	212c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    211a:	693b      	ldr	r3, [r7, #16]
    211c:	2202      	movs	r2, #2
    211e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2120:	7bfb      	ldrb	r3, [r7, #15]
    2122:	2100      	movs	r1, #0
    2124:	4618      	mov	r0, r3
    2126:	4b1c      	ldr	r3, [pc, #112]	; (2198 <_usb_d_cb_trans_done+0xdc>)
    2128:	4798      	blx	r3
    212a:	e025      	b.n	2178 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    212c:	693b      	ldr	r3, [r7, #16]
    212e:	2205      	movs	r2, #5
    2130:	709a      	strb	r2, [r3, #2]
    2132:	e021      	b.n	2178 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2134:	68bb      	ldr	r3, [r7, #8]
    2136:	2b02      	cmp	r3, #2
    2138:	d10e      	bne.n	2158 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    213a:	693b      	ldr	r3, [r7, #16]
    213c:	2204      	movs	r2, #4
    213e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2140:	693b      	ldr	r3, [r7, #16]
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	2b00      	cmp	r3, #0
    2146:	d103      	bne.n	2150 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2148:	693b      	ldr	r3, [r7, #16]
    214a:	2202      	movs	r2, #2
    214c:	709a      	strb	r2, [r3, #2]
			return;
    214e:	e01a      	b.n	2186 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2150:	693b      	ldr	r3, [r7, #16]
    2152:	2201      	movs	r2, #1
    2154:	709a      	strb	r2, [r3, #2]
    2156:	e00f      	b.n	2178 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2158:	68bb      	ldr	r3, [r7, #8]
    215a:	2b03      	cmp	r3, #3
    215c:	d106      	bne.n	216c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    215e:	693b      	ldr	r3, [r7, #16]
    2160:	2200      	movs	r2, #0
    2162:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2164:	693b      	ldr	r3, [r7, #16]
    2166:	2205      	movs	r2, #5
    2168:	70da      	strb	r2, [r3, #3]
    216a:	e005      	b.n	2178 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    216c:	693b      	ldr	r3, [r7, #16]
    216e:	2206      	movs	r2, #6
    2170:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2172:	693b      	ldr	r3, [r7, #16]
    2174:	2206      	movs	r2, #6
    2176:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2178:	693b      	ldr	r3, [r7, #16]
    217a:	69db      	ldr	r3, [r3, #28]
    217c:	693a      	ldr	r2, [r7, #16]
    217e:	78d1      	ldrb	r1, [r2, #3]
    2180:	687a      	ldr	r2, [r7, #4]
    2182:	7bf8      	ldrb	r0, [r7, #15]
    2184:	4798      	blx	r3
}
    2186:	3718      	adds	r7, #24
    2188:	46bd      	mov	sp, r7
    218a:	bd80      	pop	{r7, pc}
    218c:	00001df1 	.word	0x00001df1
    2190:	200001f0 	.word	0x200001f0
    2194:	00001ff9 	.word	0x00001ff9
    2198:	00008431 	.word	0x00008431

0000219c <usb_d_init>:

int32_t usb_d_init(void)
{
    219c:	b580      	push	{r7, lr}
    219e:	b082      	sub	sp, #8
    21a0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    21a2:	4b21      	ldr	r3, [pc, #132]	; (2228 <usb_d_init+0x8c>)
    21a4:	4798      	blx	r3
    21a6:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    21a8:	683b      	ldr	r3, [r7, #0]
    21aa:	2b00      	cmp	r3, #0
    21ac:	da01      	bge.n	21b2 <usb_d_init+0x16>
		return rc;
    21ae:	683b      	ldr	r3, [r7, #0]
    21b0:	e036      	b.n	2220 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    21b2:	2280      	movs	r2, #128	; 0x80
    21b4:	2100      	movs	r1, #0
    21b6:	481d      	ldr	r0, [pc, #116]	; (222c <usb_d_init+0x90>)
    21b8:	4b1d      	ldr	r3, [pc, #116]	; (2230 <usb_d_init+0x94>)
    21ba:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    21bc:	2300      	movs	r3, #0
    21be:	71fb      	strb	r3, [r7, #7]
    21c0:	e01e      	b.n	2200 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    21c2:	79fb      	ldrb	r3, [r7, #7]
    21c4:	4a19      	ldr	r2, [pc, #100]	; (222c <usb_d_init+0x90>)
    21c6:	015b      	lsls	r3, r3, #5
    21c8:	4413      	add	r3, r2
    21ca:	3301      	adds	r3, #1
    21cc:	22ff      	movs	r2, #255	; 0xff
    21ce:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    21d0:	79fb      	ldrb	r3, [r7, #7]
    21d2:	4a16      	ldr	r2, [pc, #88]	; (222c <usb_d_init+0x90>)
    21d4:	015b      	lsls	r3, r3, #5
    21d6:	4413      	add	r3, r2
    21d8:	3314      	adds	r3, #20
    21da:	4a16      	ldr	r2, [pc, #88]	; (2234 <usb_d_init+0x98>)
    21dc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    21de:	79fb      	ldrb	r3, [r7, #7]
    21e0:	4a12      	ldr	r2, [pc, #72]	; (222c <usb_d_init+0x90>)
    21e2:	015b      	lsls	r3, r3, #5
    21e4:	4413      	add	r3, r2
    21e6:	3318      	adds	r3, #24
    21e8:	4a12      	ldr	r2, [pc, #72]	; (2234 <usb_d_init+0x98>)
    21ea:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    21ec:	79fb      	ldrb	r3, [r7, #7]
    21ee:	4a0f      	ldr	r2, [pc, #60]	; (222c <usb_d_init+0x90>)
    21f0:	015b      	lsls	r3, r3, #5
    21f2:	4413      	add	r3, r2
    21f4:	331c      	adds	r3, #28
    21f6:	4a0f      	ldr	r2, [pc, #60]	; (2234 <usb_d_init+0x98>)
    21f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    21fa:	79fb      	ldrb	r3, [r7, #7]
    21fc:	3301      	adds	r3, #1
    21fe:	71fb      	strb	r3, [r7, #7]
    2200:	79fb      	ldrb	r3, [r7, #7]
    2202:	2b03      	cmp	r3, #3
    2204:	d9dd      	bls.n	21c2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2206:	490c      	ldr	r1, [pc, #48]	; (2238 <usb_d_init+0x9c>)
    2208:	2000      	movs	r0, #0
    220a:	4b0c      	ldr	r3, [pc, #48]	; (223c <usb_d_init+0xa0>)
    220c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    220e:	490c      	ldr	r1, [pc, #48]	; (2240 <usb_d_init+0xa4>)
    2210:	2001      	movs	r0, #1
    2212:	4b0a      	ldr	r3, [pc, #40]	; (223c <usb_d_init+0xa0>)
    2214:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2216:	490b      	ldr	r1, [pc, #44]	; (2244 <usb_d_init+0xa8>)
    2218:	2002      	movs	r0, #2
    221a:	4b08      	ldr	r3, [pc, #32]	; (223c <usb_d_init+0xa0>)
    221c:	4798      	blx	r3
	return ERR_NONE;
    221e:	2300      	movs	r3, #0
}
    2220:	4618      	mov	r0, r3
    2222:	3708      	adds	r7, #8
    2224:	46bd      	mov	sp, r7
    2226:	bd80      	pop	{r7, pc}
    2228:	000081e5 	.word	0x000081e5
    222c:	200001f0 	.word	0x200001f0
    2230:	00008db3 	.word	0x00008db3
    2234:	00001ec5 	.word	0x00001ec5
    2238:	00001ee1 	.word	0x00001ee1
    223c:	00008825 	.word	0x00008825
    2240:	00001fa9 	.word	0x00001fa9
    2244:	000020bd 	.word	0x000020bd

00002248 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2248:	b480      	push	{r7}
    224a:	b085      	sub	sp, #20
    224c:	af00      	add	r7, sp, #0
    224e:	4603      	mov	r3, r0
    2250:	60b9      	str	r1, [r7, #8]
    2252:	607a      	str	r2, [r7, #4]
    2254:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2256:	7bfb      	ldrb	r3, [r7, #15]
    2258:	f083 0301 	eor.w	r3, r3, #1
    225c:	b2db      	uxtb	r3, r3
    225e:	2b00      	cmp	r3, #0
    2260:	d000      	beq.n	2264 <assert+0x1c>
		__asm("BKPT #0");
    2262:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2264:	bf00      	nop
    2266:	3714      	adds	r7, #20
    2268:	46bd      	mov	sp, r7
    226a:	f85d 7b04 	ldr.w	r7, [sp], #4
    226e:	4770      	bx	lr

00002270 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2270:	b480      	push	{r7}
    2272:	b085      	sub	sp, #20
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	681b      	ldr	r3, [r3, #0]
    227e:	60fb      	str	r3, [r7, #12]
    2280:	e008      	b.n	2294 <is_list_element+0x24>
		if (it == element) {
    2282:	68fa      	ldr	r2, [r7, #12]
    2284:	683b      	ldr	r3, [r7, #0]
    2286:	429a      	cmp	r2, r3
    2288:	d101      	bne.n	228e <is_list_element+0x1e>
			return true;
    228a:	2301      	movs	r3, #1
    228c:	e006      	b.n	229c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    228e:	68fb      	ldr	r3, [r7, #12]
    2290:	681b      	ldr	r3, [r3, #0]
    2292:	60fb      	str	r3, [r7, #12]
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	2b00      	cmp	r3, #0
    2298:	d1f3      	bne.n	2282 <is_list_element+0x12>
		}
	}

	return false;
    229a:	2300      	movs	r3, #0
}
    229c:	4618      	mov	r0, r3
    229e:	3714      	adds	r7, #20
    22a0:	46bd      	mov	sp, r7
    22a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    22a6:	4770      	bx	lr

000022a8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	b082      	sub	sp, #8
    22ac:	af00      	add	r7, sp, #0
    22ae:	6078      	str	r0, [r7, #4]
    22b0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    22b2:	6839      	ldr	r1, [r7, #0]
    22b4:	6878      	ldr	r0, [r7, #4]
    22b6:	4b0f      	ldr	r3, [pc, #60]	; (22f4 <list_insert_as_head+0x4c>)
    22b8:	4798      	blx	r3
    22ba:	4603      	mov	r3, r0
    22bc:	2b00      	cmp	r3, #0
    22be:	bf14      	ite	ne
    22c0:	2301      	movne	r3, #1
    22c2:	2300      	moveq	r3, #0
    22c4:	b2db      	uxtb	r3, r3
    22c6:	f083 0301 	eor.w	r3, r3, #1
    22ca:	b2db      	uxtb	r3, r3
    22cc:	f003 0301 	and.w	r3, r3, #1
    22d0:	b2db      	uxtb	r3, r3
    22d2:	2239      	movs	r2, #57	; 0x39
    22d4:	4908      	ldr	r1, [pc, #32]	; (22f8 <list_insert_as_head+0x50>)
    22d6:	4618      	mov	r0, r3
    22d8:	4b08      	ldr	r3, [pc, #32]	; (22fc <list_insert_as_head+0x54>)
    22da:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	681a      	ldr	r2, [r3, #0]
    22e0:	683b      	ldr	r3, [r7, #0]
    22e2:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	683a      	ldr	r2, [r7, #0]
    22e8:	601a      	str	r2, [r3, #0]
}
    22ea:	bf00      	nop
    22ec:	3708      	adds	r7, #8
    22ee:	46bd      	mov	sp, r7
    22f0:	bd80      	pop	{r7, pc}
    22f2:	bf00      	nop
    22f4:	00002271 	.word	0x00002271
    22f8:	00008e70 	.word	0x00008e70
    22fc:	00002249 	.word	0x00002249

00002300 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2300:	b480      	push	{r7}
    2302:	b083      	sub	sp, #12
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
    2308:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    230a:	687b      	ldr	r3, [r7, #4]
    230c:	681a      	ldr	r2, [r3, #0]
    230e:	683b      	ldr	r3, [r7, #0]
    2310:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	683a      	ldr	r2, [r7, #0]
    2316:	601a      	str	r2, [r3, #0]
}
    2318:	bf00      	nop
    231a:	370c      	adds	r7, #12
    231c:	46bd      	mov	sp, r7
    231e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2322:	4770      	bx	lr

00002324 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2324:	b480      	push	{r7}
    2326:	b085      	sub	sp, #20
    2328:	af00      	add	r7, sp, #0
    232a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	2b00      	cmp	r3, #0
    2332:	d009      	beq.n	2348 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	681b      	ldr	r3, [r3, #0]
    2338:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	681b      	ldr	r3, [r3, #0]
    233e:	681a      	ldr	r2, [r3, #0]
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    2344:	68fb      	ldr	r3, [r7, #12]
    2346:	e000      	b.n	234a <list_remove_head+0x26>
	}

	return NULL;
    2348:	2300      	movs	r3, #0
}
    234a:	4618      	mov	r0, r3
    234c:	3714      	adds	r7, #20
    234e:	46bd      	mov	sp, r7
    2350:	f85d 7b04 	ldr.w	r7, [sp], #4
    2354:	4770      	bx	lr
	...

00002358 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2358:	b580      	push	{r7, lr}
    235a:	b084      	sub	sp, #16
    235c:	af00      	add	r7, sp, #0
    235e:	60f8      	str	r0, [r7, #12]
    2360:	60b9      	str	r1, [r7, #8]
    2362:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    2364:	68fb      	ldr	r3, [r7, #12]
    2366:	2b00      	cmp	r3, #0
    2368:	d007      	beq.n	237a <ringbuffer_init+0x22>
    236a:	68bb      	ldr	r3, [r7, #8]
    236c:	2b00      	cmp	r3, #0
    236e:	d004      	beq.n	237a <ringbuffer_init+0x22>
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	2b00      	cmp	r3, #0
    2374:	d001      	beq.n	237a <ringbuffer_init+0x22>
    2376:	2301      	movs	r3, #1
    2378:	e000      	b.n	237c <ringbuffer_init+0x24>
    237a:	2300      	movs	r3, #0
    237c:	f003 0301 	and.w	r3, r3, #1
    2380:	b2db      	uxtb	r3, r3
    2382:	2228      	movs	r2, #40	; 0x28
    2384:	490f      	ldr	r1, [pc, #60]	; (23c4 <ringbuffer_init+0x6c>)
    2386:	4618      	mov	r0, r3
    2388:	4b0f      	ldr	r3, [pc, #60]	; (23c8 <ringbuffer_init+0x70>)
    238a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    238c:	687b      	ldr	r3, [r7, #4]
    238e:	1e5a      	subs	r2, r3, #1
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	4013      	ands	r3, r2
    2394:	2b00      	cmp	r3, #0
    2396:	d002      	beq.n	239e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    2398:	f06f 030c 	mvn.w	r3, #12
    239c:	e00e      	b.n	23bc <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	1e5a      	subs	r2, r3, #1
    23a2:	68fb      	ldr	r3, [r7, #12]
    23a4:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    23a6:	68fb      	ldr	r3, [r7, #12]
    23a8:	2200      	movs	r2, #0
    23aa:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    23ac:	68fb      	ldr	r3, [r7, #12]
    23ae:	689a      	ldr	r2, [r3, #8]
    23b0:	68fb      	ldr	r3, [r7, #12]
    23b2:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    23b4:	68fb      	ldr	r3, [r7, #12]
    23b6:	68ba      	ldr	r2, [r7, #8]
    23b8:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    23ba:	2300      	movs	r3, #0
}
    23bc:	4618      	mov	r0, r3
    23be:	3710      	adds	r7, #16
    23c0:	46bd      	mov	sp, r7
    23c2:	bd80      	pop	{r7, pc}
    23c4:	00008e90 	.word	0x00008e90
    23c8:	00002249 	.word	0x00002249

000023cc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    23cc:	b580      	push	{r7, lr}
    23ce:	b082      	sub	sp, #8
    23d0:	af00      	add	r7, sp, #0
    23d2:	6078      	str	r0, [r7, #4]
    23d4:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	2b00      	cmp	r3, #0
    23da:	d004      	beq.n	23e6 <ringbuffer_get+0x1a>
    23dc:	683b      	ldr	r3, [r7, #0]
    23de:	2b00      	cmp	r3, #0
    23e0:	d001      	beq.n	23e6 <ringbuffer_get+0x1a>
    23e2:	2301      	movs	r3, #1
    23e4:	e000      	b.n	23e8 <ringbuffer_get+0x1c>
    23e6:	2300      	movs	r3, #0
    23e8:	f003 0301 	and.w	r3, r3, #1
    23ec:	b2db      	uxtb	r3, r3
    23ee:	2240      	movs	r2, #64	; 0x40
    23f0:	4910      	ldr	r1, [pc, #64]	; (2434 <ringbuffer_get+0x68>)
    23f2:	4618      	mov	r0, r3
    23f4:	4b10      	ldr	r3, [pc, #64]	; (2438 <ringbuffer_get+0x6c>)
    23f6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    23f8:	687b      	ldr	r3, [r7, #4]
    23fa:	68da      	ldr	r2, [r3, #12]
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	689b      	ldr	r3, [r3, #8]
    2400:	429a      	cmp	r2, r3
    2402:	d011      	beq.n	2428 <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	681a      	ldr	r2, [r3, #0]
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	6899      	ldr	r1, [r3, #8]
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	685b      	ldr	r3, [r3, #4]
    2410:	400b      	ands	r3, r1
    2412:	4413      	add	r3, r2
    2414:	781a      	ldrb	r2, [r3, #0]
    2416:	683b      	ldr	r3, [r7, #0]
    2418:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	689b      	ldr	r3, [r3, #8]
    241e:	1c5a      	adds	r2, r3, #1
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    2424:	2300      	movs	r3, #0
    2426:	e001      	b.n	242c <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
    2428:	f06f 0309 	mvn.w	r3, #9
}
    242c:	4618      	mov	r0, r3
    242e:	3708      	adds	r7, #8
    2430:	46bd      	mov	sp, r7
    2432:	bd80      	pop	{r7, pc}
    2434:	00008e90 	.word	0x00008e90
    2438:	00002249 	.word	0x00002249

0000243c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    243c:	b580      	push	{r7, lr}
    243e:	b082      	sub	sp, #8
    2440:	af00      	add	r7, sp, #0
    2442:	6078      	str	r0, [r7, #4]
    2444:	460b      	mov	r3, r1
    2446:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	2b00      	cmp	r3, #0
    244c:	bf14      	ite	ne
    244e:	2301      	movne	r3, #1
    2450:	2300      	moveq	r3, #0
    2452:	b2db      	uxtb	r3, r3
    2454:	2251      	movs	r2, #81	; 0x51
    2456:	4914      	ldr	r1, [pc, #80]	; (24a8 <ringbuffer_put+0x6c>)
    2458:	4618      	mov	r0, r3
    245a:	4b14      	ldr	r3, [pc, #80]	; (24ac <ringbuffer_put+0x70>)
    245c:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	681a      	ldr	r2, [r3, #0]
    2462:	687b      	ldr	r3, [r7, #4]
    2464:	68d9      	ldr	r1, [r3, #12]
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	685b      	ldr	r3, [r3, #4]
    246a:	400b      	ands	r3, r1
    246c:	4413      	add	r3, r2
    246e:	78fa      	ldrb	r2, [r7, #3]
    2470:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2472:	687b      	ldr	r3, [r7, #4]
    2474:	68da      	ldr	r2, [r3, #12]
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	689b      	ldr	r3, [r3, #8]
    247a:	1ad2      	subs	r2, r2, r3
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	685b      	ldr	r3, [r3, #4]
    2480:	429a      	cmp	r2, r3
    2482:	d906      	bls.n	2492 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    2484:	687b      	ldr	r3, [r7, #4]
    2486:	68da      	ldr	r2, [r3, #12]
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	685b      	ldr	r3, [r3, #4]
    248c:	1ad2      	subs	r2, r2, r3
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	68db      	ldr	r3, [r3, #12]
    2496:	1c5a      	adds	r2, r3, #1
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    249c:	2300      	movs	r3, #0
}
    249e:	4618      	mov	r0, r3
    24a0:	3708      	adds	r7, #8
    24a2:	46bd      	mov	sp, r7
    24a4:	bd80      	pop	{r7, pc}
    24a6:	bf00      	nop
    24a8:	00008e90 	.word	0x00008e90
    24ac:	00002249 	.word	0x00002249

000024b0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    24b0:	b580      	push	{r7, lr}
    24b2:	b082      	sub	sp, #8
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	2b00      	cmp	r3, #0
    24bc:	bf14      	ite	ne
    24be:	2301      	movne	r3, #1
    24c0:	2300      	moveq	r3, #0
    24c2:	b2db      	uxtb	r3, r3
    24c4:	2267      	movs	r2, #103	; 0x67
    24c6:	4906      	ldr	r1, [pc, #24]	; (24e0 <ringbuffer_num+0x30>)
    24c8:	4618      	mov	r0, r3
    24ca:	4b06      	ldr	r3, [pc, #24]	; (24e4 <ringbuffer_num+0x34>)
    24cc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	68da      	ldr	r2, [r3, #12]
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	689b      	ldr	r3, [r3, #8]
    24d6:	1ad3      	subs	r3, r2, r3
}
    24d8:	4618      	mov	r0, r3
    24da:	3708      	adds	r7, #8
    24dc:	46bd      	mov	sp, r7
    24de:	bd80      	pop	{r7, pc}
    24e0:	00008e90 	.word	0x00008e90
    24e4:	00002249 	.word	0x00002249

000024e8 <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_sampctrl_reg_t;
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    24e8:	b480      	push	{r7}
    24ea:	b083      	sub	sp, #12
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
    24f0:	6039      	str	r1, [r7, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24f2:	bf00      	nop
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    24f8:	683b      	ldr	r3, [r7, #0]
    24fa:	4013      	ands	r3, r2
    24fc:	2b00      	cmp	r3, #0
    24fe:	d1f9      	bne.n	24f4 <hri_adc_wait_for_sync+0xc>
	};
}
    2500:	bf00      	nop
    2502:	370c      	adds	r7, #12
    2504:	46bd      	mov	sp, r7
    2506:	f85d 7b04 	ldr.w	r7, [sp], #4
    250a:	4770      	bx	lr

0000250c <hri_adc_is_syncing>:

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    250c:	b480      	push	{r7}
    250e:	b083      	sub	sp, #12
    2510:	af00      	add	r7, sp, #0
    2512:	6078      	str	r0, [r7, #4]
    2514:	6039      	str	r1, [r7, #0]
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    251a:	683b      	ldr	r3, [r7, #0]
    251c:	4013      	ands	r3, r2
    251e:	2b00      	cmp	r3, #0
    2520:	bf14      	ite	ne
    2522:	2301      	movne	r3, #1
    2524:	2300      	moveq	r3, #0
    2526:	b2db      	uxtb	r3, r3
}
    2528:	4618      	mov	r0, r3
    252a:	370c      	adds	r7, #12
    252c:	46bd      	mov	sp, r7
    252e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2532:	4770      	bx	lr

00002534 <hri_adc_clear_CTRLA_ENABLE_bit>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_adc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2534:	b580      	push	{r7, lr}
    2536:	b082      	sub	sp, #8
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	881b      	ldrh	r3, [r3, #0]
    2540:	b29b      	uxth	r3, r3
    2542:	f023 0302 	bic.w	r3, r3, #2
    2546:	b29a      	uxth	r2, r3
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	801a      	strh	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    254c:	2103      	movs	r1, #3
    254e:	6878      	ldr	r0, [r7, #4]
    2550:	4b02      	ldr	r3, [pc, #8]	; (255c <hri_adc_clear_CTRLA_ENABLE_bit+0x28>)
    2552:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2554:	bf00      	nop
    2556:	3708      	adds	r7, #8
    2558:	46bd      	mov	sp, r7
    255a:	bd80      	pop	{r7, pc}
    255c:	000024e9 	.word	0x000024e9

00002560 <hri_adc_get_CTRLA_reg>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
    2560:	b580      	push	{r7, lr}
    2562:	b084      	sub	sp, #16
    2564:	af00      	add	r7, sp, #0
    2566:	6078      	str	r0, [r7, #4]
    2568:	460b      	mov	r3, r1
    256a:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    256c:	2103      	movs	r1, #3
    256e:	6878      	ldr	r0, [r7, #4]
    2570:	4b06      	ldr	r3, [pc, #24]	; (258c <hri_adc_get_CTRLA_reg+0x2c>)
    2572:	4798      	blx	r3
	tmp = ((Adc *)hw)->CTRLA.reg;
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	881b      	ldrh	r3, [r3, #0]
    2578:	81fb      	strh	r3, [r7, #14]
	tmp &= mask;
    257a:	89fa      	ldrh	r2, [r7, #14]
    257c:	887b      	ldrh	r3, [r7, #2]
    257e:	4013      	ands	r3, r2
    2580:	81fb      	strh	r3, [r7, #14]
	return tmp;
    2582:	89fb      	ldrh	r3, [r7, #14]
}
    2584:	4618      	mov	r0, r3
    2586:	3710      	adds	r7, #16
    2588:	46bd      	mov	sp, r7
    258a:	bd80      	pop	{r7, pc}
    258c:	000024e9 	.word	0x000024e9

00002590 <hri_adc_write_CTRLA_reg>:

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
    2590:	b580      	push	{r7, lr}
    2592:	b082      	sub	sp, #8
    2594:	af00      	add	r7, sp, #0
    2596:	6078      	str	r0, [r7, #4]
    2598:	460b      	mov	r3, r1
    259a:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    259c:	687b      	ldr	r3, [r7, #4]
    259e:	887a      	ldrh	r2, [r7, #2]
    25a0:	801a      	strh	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    25a2:	2103      	movs	r1, #3
    25a4:	6878      	ldr	r0, [r7, #4]
    25a6:	4b03      	ldr	r3, [pc, #12]	; (25b4 <hri_adc_write_CTRLA_reg+0x24>)
    25a8:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    25aa:	bf00      	nop
    25ac:	3708      	adds	r7, #8
    25ae:	46bd      	mov	sp, r7
    25b0:	bd80      	pop	{r7, pc}
    25b2:	bf00      	nop
    25b4:	000024e9 	.word	0x000024e9

000025b8 <hri_adc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
    25b8:	b480      	push	{r7}
    25ba:	b083      	sub	sp, #12
    25bc:	af00      	add	r7, sp, #0
    25be:	6078      	str	r0, [r7, #4]
    25c0:	460b      	mov	r3, r1
    25c2:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	78fa      	ldrb	r2, [r7, #3]
    25c8:	709a      	strb	r2, [r3, #2]
	ADC_CRITICAL_SECTION_LEAVE();
}
    25ca:	bf00      	nop
    25cc:	370c      	adds	r7, #12
    25ce:	46bd      	mov	sp, r7
    25d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25d4:	4770      	bx	lr

000025d6 <hri_adc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
    25d6:	b480      	push	{r7}
    25d8:	b083      	sub	sp, #12
    25da:	af00      	add	r7, sp, #0
    25dc:	6078      	str	r0, [r7, #4]
    25de:	460b      	mov	r3, r1
    25e0:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	78fa      	ldrb	r2, [r7, #3]
    25e6:	70da      	strb	r2, [r3, #3]
	ADC_CRITICAL_SECTION_LEAVE();
}
    25e8:	bf00      	nop
    25ea:	370c      	adds	r7, #12
    25ec:	46bd      	mov	sp, r7
    25ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    25f2:	4770      	bx	lr

000025f4 <hri_adc_write_INPUTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b082      	sub	sp, #8
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
    25fc:	460b      	mov	r3, r1
    25fe:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	887a      	ldrh	r2, [r7, #2]
    2604:	809a      	strh	r2, [r3, #4]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    2606:	f640 71ff 	movw	r1, #4095	; 0xfff
    260a:	6878      	ldr	r0, [r7, #4]
    260c:	4b02      	ldr	r3, [pc, #8]	; (2618 <hri_adc_write_INPUTCTRL_reg+0x24>)
    260e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2610:	bf00      	nop
    2612:	3708      	adds	r7, #8
    2614:	46bd      	mov	sp, r7
    2616:	bd80      	pop	{r7, pc}
    2618:	000024e9 	.word	0x000024e9

0000261c <hri_adc_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
    261c:	b580      	push	{r7, lr}
    261e:	b082      	sub	sp, #8
    2620:	af00      	add	r7, sp, #0
    2622:	6078      	str	r0, [r7, #4]
    2624:	460b      	mov	r3, r1
    2626:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	887a      	ldrh	r2, [r7, #2]
    262c:	80da      	strh	r2, [r3, #6]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    262e:	f640 71ff 	movw	r1, #4095	; 0xfff
    2632:	6878      	ldr	r0, [r7, #4]
    2634:	4b02      	ldr	r3, [pc, #8]	; (2640 <hri_adc_write_CTRLB_reg+0x24>)
    2636:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2638:	bf00      	nop
    263a:	3708      	adds	r7, #8
    263c:	46bd      	mov	sp, r7
    263e:	bd80      	pop	{r7, pc}
    2640:	000024e9 	.word	0x000024e9

00002644 <hri_adc_write_REFCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
    2644:	b580      	push	{r7, lr}
    2646:	b082      	sub	sp, #8
    2648:	af00      	add	r7, sp, #0
    264a:	6078      	str	r0, [r7, #4]
    264c:	460b      	mov	r3, r1
    264e:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2650:	687b      	ldr	r3, [r7, #4]
    2652:	78fa      	ldrb	r2, [r7, #3]
    2654:	721a      	strb	r2, [r3, #8]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    2656:	f640 71ff 	movw	r1, #4095	; 0xfff
    265a:	6878      	ldr	r0, [r7, #4]
    265c:	4b02      	ldr	r3, [pc, #8]	; (2668 <hri_adc_write_REFCTRL_reg+0x24>)
    265e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2660:	bf00      	nop
    2662:	3708      	adds	r7, #8
    2664:	46bd      	mov	sp, r7
    2666:	bd80      	pop	{r7, pc}
    2668:	000024e9 	.word	0x000024e9

0000266c <hri_adc_write_AVGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
    266c:	b580      	push	{r7, lr}
    266e:	b082      	sub	sp, #8
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
    2674:	460b      	mov	r3, r1
    2676:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	78fa      	ldrb	r2, [r7, #3]
    267c:	729a      	strb	r2, [r3, #10]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    267e:	f640 71ff 	movw	r1, #4095	; 0xfff
    2682:	6878      	ldr	r0, [r7, #4]
    2684:	4b02      	ldr	r3, [pc, #8]	; (2690 <hri_adc_write_AVGCTRL_reg+0x24>)
    2686:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2688:	bf00      	nop
    268a:	3708      	adds	r7, #8
    268c:	46bd      	mov	sp, r7
    268e:	bd80      	pop	{r7, pc}
    2690:	000024e9 	.word	0x000024e9

00002694 <hri_adc_write_SAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
    2694:	b580      	push	{r7, lr}
    2696:	b082      	sub	sp, #8
    2698:	af00      	add	r7, sp, #0
    269a:	6078      	str	r0, [r7, #4]
    269c:	460b      	mov	r3, r1
    269e:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	78fa      	ldrb	r2, [r7, #3]
    26a4:	72da      	strb	r2, [r3, #11]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    26a6:	f640 71ff 	movw	r1, #4095	; 0xfff
    26aa:	6878      	ldr	r0, [r7, #4]
    26ac:	4b02      	ldr	r3, [pc, #8]	; (26b8 <hri_adc_write_SAMPCTRL_reg+0x24>)
    26ae:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    26b0:	bf00      	nop
    26b2:	3708      	adds	r7, #8
    26b4:	46bd      	mov	sp, r7
    26b6:	bd80      	pop	{r7, pc}
    26b8:	000024e9 	.word	0x000024e9

000026bc <hri_adc_write_WINLT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b082      	sub	sp, #8
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    26c4:	460b      	mov	r3, r1
    26c6:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	887a      	ldrh	r2, [r7, #2]
    26cc:	819a      	strh	r2, [r3, #12]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINLT);
    26ce:	2180      	movs	r1, #128	; 0x80
    26d0:	6878      	ldr	r0, [r7, #4]
    26d2:	4b03      	ldr	r3, [pc, #12]	; (26e0 <hri_adc_write_WINLT_reg+0x24>)
    26d4:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    26d6:	bf00      	nop
    26d8:	3708      	adds	r7, #8
    26da:	46bd      	mov	sp, r7
    26dc:	bd80      	pop	{r7, pc}
    26de:	bf00      	nop
    26e0:	000024e9 	.word	0x000024e9

000026e4 <hri_adc_write_WINUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
    26e4:	b580      	push	{r7, lr}
    26e6:	b082      	sub	sp, #8
    26e8:	af00      	add	r7, sp, #0
    26ea:	6078      	str	r0, [r7, #4]
    26ec:	460b      	mov	r3, r1
    26ee:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	887a      	ldrh	r2, [r7, #2]
    26f4:	81da      	strh	r2, [r3, #14]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINUT);
    26f6:	f44f 7180 	mov.w	r1, #256	; 0x100
    26fa:	6878      	ldr	r0, [r7, #4]
    26fc:	4b02      	ldr	r3, [pc, #8]	; (2708 <hri_adc_write_WINUT_reg+0x24>)
    26fe:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2700:	bf00      	nop
    2702:	3708      	adds	r7, #8
    2704:	46bd      	mov	sp, r7
    2706:	bd80      	pop	{r7, pc}
    2708:	000024e9 	.word	0x000024e9

0000270c <hri_adc_write_GAINCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
    270c:	b580      	push	{r7, lr}
    270e:	b082      	sub	sp, #8
    2710:	af00      	add	r7, sp, #0
    2712:	6078      	str	r0, [r7, #4]
    2714:	460b      	mov	r3, r1
    2716:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	887a      	ldrh	r2, [r7, #2]
    271c:	821a      	strh	r2, [r3, #16]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_GAINCORR);
    271e:	f44f 7100 	mov.w	r1, #512	; 0x200
    2722:	6878      	ldr	r0, [r7, #4]
    2724:	4b02      	ldr	r3, [pc, #8]	; (2730 <hri_adc_write_GAINCORR_reg+0x24>)
    2726:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2728:	bf00      	nop
    272a:	3708      	adds	r7, #8
    272c:	46bd      	mov	sp, r7
    272e:	bd80      	pop	{r7, pc}
    2730:	000024e9 	.word	0x000024e9

00002734 <hri_adc_write_OFFSETCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
    2734:	b580      	push	{r7, lr}
    2736:	b082      	sub	sp, #8
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
    273c:	460b      	mov	r3, r1
    273e:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	887a      	ldrh	r2, [r7, #2]
    2744:	825a      	strh	r2, [r3, #18]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_OFFSETCORR);
    2746:	f44f 6180 	mov.w	r1, #1024	; 0x400
    274a:	6878      	ldr	r0, [r7, #4]
    274c:	4b02      	ldr	r3, [pc, #8]	; (2758 <hri_adc_write_OFFSETCORR_reg+0x24>)
    274e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2750:	bf00      	nop
    2752:	3708      	adds	r7, #8
    2754:	46bd      	mov	sp, r7
    2756:	bd80      	pop	{r7, pc}
    2758:	000024e9 	.word	0x000024e9

0000275c <_adc_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
    275c:	b480      	push	{r7}
    275e:	b083      	sub	sp, #12
    2760:	af00      	add	r7, sp, #0
    2762:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	f103 433d 	add.w	r3, r3, #3170893824	; 0xbd000000
    276a:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
    276e:	0a9b      	lsrs	r3, r3, #10
    2770:	b2db      	uxtb	r3, r3
}
    2772:	4618      	mov	r0, r3
    2774:	370c      	adds	r7, #12
    2776:	46bd      	mov	sp, r7
    2778:	f85d 7b04 	ldr.w	r7, [sp], #4
    277c:	4770      	bx	lr
	...

00002780 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
    2780:	b580      	push	{r7, lr}
    2782:	b084      	sub	sp, #16
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	4618      	mov	r0, r3
    278c:	4b11      	ldr	r3, [pc, #68]	; (27d4 <_adc_get_regs+0x54>)
    278e:	4798      	blx	r3
    2790:	4603      	mov	r3, r0
    2792:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2794:	2300      	movs	r3, #0
    2796:	73fb      	strb	r3, [r7, #15]
    2798:	e00e      	b.n	27b8 <_adc_get_regs+0x38>
		if (_adcs[i].number == n) {
    279a:	7bfb      	ldrb	r3, [r7, #15]
    279c:	4a0e      	ldr	r2, [pc, #56]	; (27d8 <_adc_get_regs+0x58>)
    279e:	2116      	movs	r1, #22
    27a0:	fb01 f303 	mul.w	r3, r1, r3
    27a4:	4413      	add	r3, r2
    27a6:	781b      	ldrb	r3, [r3, #0]
    27a8:	7bba      	ldrb	r2, [r7, #14]
    27aa:	429a      	cmp	r2, r3
    27ac:	d101      	bne.n	27b2 <_adc_get_regs+0x32>
			return i;
    27ae:	7bfb      	ldrb	r3, [r7, #15]
    27b0:	e00b      	b.n	27ca <_adc_get_regs+0x4a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    27b2:	7bfb      	ldrb	r3, [r7, #15]
    27b4:	3301      	adds	r3, #1
    27b6:	73fb      	strb	r3, [r7, #15]
    27b8:	7bfb      	ldrb	r3, [r7, #15]
    27ba:	2b01      	cmp	r3, #1
    27bc:	d9ed      	bls.n	279a <_adc_get_regs+0x1a>
		}
	}

	ASSERT(false);
    27be:	2288      	movs	r2, #136	; 0x88
    27c0:	4906      	ldr	r1, [pc, #24]	; (27dc <_adc_get_regs+0x5c>)
    27c2:	2000      	movs	r0, #0
    27c4:	4b06      	ldr	r3, [pc, #24]	; (27e0 <_adc_get_regs+0x60>)
    27c6:	4798      	blx	r3
	return 0;
    27c8:	2300      	movs	r3, #0
}
    27ca:	4618      	mov	r0, r3
    27cc:	3710      	adds	r7, #16
    27ce:	46bd      	mov	sp, r7
    27d0:	bd80      	pop	{r7, pc}
    27d2:	bf00      	nop
    27d4:	0000275d 	.word	0x0000275d
    27d8:	00008eb4 	.word	0x00008eb4
    27dc:	00008ee0 	.word	0x00008ee0
    27e0:	00002249 	.word	0x00002249

000027e4 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    27e4:	b580      	push	{r7, lr}
    27e6:	b082      	sub	sp, #8
    27e8:	af00      	add	r7, sp, #0
    27ea:	6078      	str	r0, [r7, #4]
    27ec:	460b      	mov	r3, r1
    27ee:	70fb      	strb	r3, [r7, #3]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    27f0:	2101      	movs	r1, #1
    27f2:	6878      	ldr	r0, [r7, #4]
    27f4:	4b59      	ldr	r3, [pc, #356]	; (295c <_adc_init+0x178>)
    27f6:	4798      	blx	r3
    27f8:	4603      	mov	r3, r0
    27fa:	f083 0301 	eor.w	r3, r3, #1
    27fe:	b2db      	uxtb	r3, r3
    2800:	2b00      	cmp	r3, #0
    2802:	d011      	beq.n	2828 <_adc_init+0x44>
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    2804:	2102      	movs	r1, #2
    2806:	6878      	ldr	r0, [r7, #4]
    2808:	4b55      	ldr	r3, [pc, #340]	; (2960 <_adc_init+0x17c>)
    280a:	4798      	blx	r3
    280c:	4603      	mov	r3, r0
    280e:	2b00      	cmp	r3, #0
    2810:	d006      	beq.n	2820 <_adc_init+0x3c>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
    2812:	6878      	ldr	r0, [r7, #4]
    2814:	4b53      	ldr	r3, [pc, #332]	; (2964 <_adc_init+0x180>)
    2816:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
    2818:	2102      	movs	r1, #2
    281a:	6878      	ldr	r0, [r7, #4]
    281c:	4b52      	ldr	r3, [pc, #328]	; (2968 <_adc_init+0x184>)
    281e:	4798      	blx	r3
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
    2820:	2101      	movs	r1, #1
    2822:	6878      	ldr	r0, [r7, #4]
    2824:	4b51      	ldr	r3, [pc, #324]	; (296c <_adc_init+0x188>)
    2826:	4798      	blx	r3
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
    2828:	2101      	movs	r1, #1
    282a:	6878      	ldr	r0, [r7, #4]
    282c:	4b4e      	ldr	r3, [pc, #312]	; (2968 <_adc_init+0x184>)
    282e:	4798      	blx	r3

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2830:	78fb      	ldrb	r3, [r7, #3]
    2832:	4a4f      	ldr	r2, [pc, #316]	; (2970 <_adc_init+0x18c>)
    2834:	2116      	movs	r1, #22
    2836:	fb01 f303 	mul.w	r3, r1, r3
    283a:	4413      	add	r3, r2
    283c:	3304      	adds	r3, #4
    283e:	881b      	ldrh	r3, [r3, #0]
    2840:	4619      	mov	r1, r3
    2842:	6878      	ldr	r0, [r7, #4]
    2844:	4b4b      	ldr	r3, [pc, #300]	; (2974 <_adc_init+0x190>)
    2846:	4798      	blx	r3
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2848:	78fb      	ldrb	r3, [r7, #3]
    284a:	4a49      	ldr	r2, [pc, #292]	; (2970 <_adc_init+0x18c>)
    284c:	2116      	movs	r1, #22
    284e:	fb01 f303 	mul.w	r3, r1, r3
    2852:	4413      	add	r3, r2
    2854:	3306      	adds	r3, #6
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	4619      	mov	r1, r3
    285a:	6878      	ldr	r0, [r7, #4]
    285c:	4b46      	ldr	r3, [pc, #280]	; (2978 <_adc_init+0x194>)
    285e:	4798      	blx	r3
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2860:	78fb      	ldrb	r3, [r7, #3]
    2862:	4a43      	ldr	r2, [pc, #268]	; (2970 <_adc_init+0x18c>)
    2864:	2116      	movs	r1, #22
    2866:	fb01 f303 	mul.w	r3, r1, r3
    286a:	4413      	add	r3, r2
    286c:	3307      	adds	r3, #7
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	4619      	mov	r1, r3
    2872:	6878      	ldr	r0, [r7, #4]
    2874:	4b41      	ldr	r3, [pc, #260]	; (297c <_adc_init+0x198>)
    2876:	4798      	blx	r3
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2878:	78fb      	ldrb	r3, [r7, #3]
    287a:	4a3d      	ldr	r2, [pc, #244]	; (2970 <_adc_init+0x18c>)
    287c:	2116      	movs	r1, #22
    287e:	fb01 f303 	mul.w	r3, r1, r3
    2882:	4413      	add	r3, r2
    2884:	3308      	adds	r3, #8
    2886:	881b      	ldrh	r3, [r3, #0]
    2888:	4619      	mov	r1, r3
    288a:	6878      	ldr	r0, [r7, #4]
    288c:	4b3c      	ldr	r3, [pc, #240]	; (2980 <_adc_init+0x19c>)
    288e:	4798      	blx	r3
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2890:	78fb      	ldrb	r3, [r7, #3]
    2892:	4a37      	ldr	r2, [pc, #220]	; (2970 <_adc_init+0x18c>)
    2894:	2116      	movs	r1, #22
    2896:	fb01 f303 	mul.w	r3, r1, r3
    289a:	4413      	add	r3, r2
    289c:	330a      	adds	r3, #10
    289e:	781b      	ldrb	r3, [r3, #0]
    28a0:	4619      	mov	r1, r3
    28a2:	6878      	ldr	r0, [r7, #4]
    28a4:	4b37      	ldr	r3, [pc, #220]	; (2984 <_adc_init+0x1a0>)
    28a6:	4798      	blx	r3
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    28a8:	78fb      	ldrb	r3, [r7, #3]
    28aa:	4a31      	ldr	r2, [pc, #196]	; (2970 <_adc_init+0x18c>)
    28ac:	2116      	movs	r1, #22
    28ae:	fb01 f303 	mul.w	r3, r1, r3
    28b2:	4413      	add	r3, r2
    28b4:	330b      	adds	r3, #11
    28b6:	781b      	ldrb	r3, [r3, #0]
    28b8:	4619      	mov	r1, r3
    28ba:	6878      	ldr	r0, [r7, #4]
    28bc:	4b32      	ldr	r3, [pc, #200]	; (2988 <_adc_init+0x1a4>)
    28be:	4798      	blx	r3
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    28c0:	78fb      	ldrb	r3, [r7, #3]
    28c2:	4a2b      	ldr	r2, [pc, #172]	; (2970 <_adc_init+0x18c>)
    28c4:	2116      	movs	r1, #22
    28c6:	fb01 f303 	mul.w	r3, r1, r3
    28ca:	4413      	add	r3, r2
    28cc:	330c      	adds	r3, #12
    28ce:	881b      	ldrh	r3, [r3, #0]
    28d0:	4619      	mov	r1, r3
    28d2:	6878      	ldr	r0, [r7, #4]
    28d4:	4b2d      	ldr	r3, [pc, #180]	; (298c <_adc_init+0x1a8>)
    28d6:	4798      	blx	r3
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    28d8:	78fb      	ldrb	r3, [r7, #3]
    28da:	4a25      	ldr	r2, [pc, #148]	; (2970 <_adc_init+0x18c>)
    28dc:	2116      	movs	r1, #22
    28de:	fb01 f303 	mul.w	r3, r1, r3
    28e2:	4413      	add	r3, r2
    28e4:	330e      	adds	r3, #14
    28e6:	881b      	ldrh	r3, [r3, #0]
    28e8:	4619      	mov	r1, r3
    28ea:	6878      	ldr	r0, [r7, #4]
    28ec:	4b28      	ldr	r3, [pc, #160]	; (2990 <_adc_init+0x1ac>)
    28ee:	4798      	blx	r3
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    28f0:	78fb      	ldrb	r3, [r7, #3]
    28f2:	4a1f      	ldr	r2, [pc, #124]	; (2970 <_adc_init+0x18c>)
    28f4:	2116      	movs	r1, #22
    28f6:	fb01 f303 	mul.w	r3, r1, r3
    28fa:	4413      	add	r3, r2
    28fc:	3310      	adds	r3, #16
    28fe:	881b      	ldrh	r3, [r3, #0]
    2900:	4619      	mov	r1, r3
    2902:	6878      	ldr	r0, [r7, #4]
    2904:	4b23      	ldr	r3, [pc, #140]	; (2994 <_adc_init+0x1b0>)
    2906:	4798      	blx	r3
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2908:	78fb      	ldrb	r3, [r7, #3]
    290a:	4a19      	ldr	r2, [pc, #100]	; (2970 <_adc_init+0x18c>)
    290c:	2116      	movs	r1, #22
    290e:	fb01 f303 	mul.w	r3, r1, r3
    2912:	4413      	add	r3, r2
    2914:	3312      	adds	r3, #18
    2916:	881b      	ldrh	r3, [r3, #0]
    2918:	4619      	mov	r1, r3
    291a:	6878      	ldr	r0, [r7, #4]
    291c:	4b1e      	ldr	r3, [pc, #120]	; (2998 <_adc_init+0x1b4>)
    291e:	4798      	blx	r3
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2920:	78fb      	ldrb	r3, [r7, #3]
    2922:	4a13      	ldr	r2, [pc, #76]	; (2970 <_adc_init+0x18c>)
    2924:	2116      	movs	r1, #22
    2926:	fb01 f303 	mul.w	r3, r1, r3
    292a:	4413      	add	r3, r2
    292c:	3314      	adds	r3, #20
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	4619      	mov	r1, r3
    2932:	6878      	ldr	r0, [r7, #4]
    2934:	4b19      	ldr	r3, [pc, #100]	; (299c <_adc_init+0x1b8>)
    2936:	4798      	blx	r3
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    2938:	78fb      	ldrb	r3, [r7, #3]
    293a:	4a0d      	ldr	r2, [pc, #52]	; (2970 <_adc_init+0x18c>)
    293c:	2116      	movs	r1, #22
    293e:	fb01 f303 	mul.w	r3, r1, r3
    2942:	4413      	add	r3, r2
    2944:	3302      	adds	r3, #2
    2946:	881b      	ldrh	r3, [r3, #0]
    2948:	4619      	mov	r1, r3
    294a:	6878      	ldr	r0, [r7, #4]
    294c:	4b07      	ldr	r3, [pc, #28]	; (296c <_adc_init+0x188>)
    294e:	4798      	blx	r3

	return ERR_NONE;
    2950:	2300      	movs	r3, #0
}
    2952:	4618      	mov	r0, r3
    2954:	3708      	adds	r7, #8
    2956:	46bd      	mov	sp, r7
    2958:	bd80      	pop	{r7, pc}
    295a:	bf00      	nop
    295c:	0000250d 	.word	0x0000250d
    2960:	00002561 	.word	0x00002561
    2964:	00002535 	.word	0x00002535
    2968:	000024e9 	.word	0x000024e9
    296c:	00002591 	.word	0x00002591
    2970:	00008eb4 	.word	0x00008eb4
    2974:	0000261d 	.word	0x0000261d
    2978:	00002645 	.word	0x00002645
    297c:	000025b9 	.word	0x000025b9
    2980:	000025f5 	.word	0x000025f5
    2984:	0000266d 	.word	0x0000266d
    2988:	00002695 	.word	0x00002695
    298c:	000026bd 	.word	0x000026bd
    2990:	000026e5 	.word	0x000026e5
    2994:	0000270d 	.word	0x0000270d
    2998:	00002735 	.word	0x00002735
    299c:	000025d7 	.word	0x000025d7

000029a0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    29a0:	b580      	push	{r7, lr}
    29a2:	b082      	sub	sp, #8
    29a4:	af00      	add	r7, sp, #0
    29a6:	6078      	str	r0, [r7, #4]
    29a8:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	2b00      	cmp	r3, #0
    29ae:	bf14      	ite	ne
    29b0:	2301      	movne	r3, #1
    29b2:	2300      	moveq	r3, #0
    29b4:	b2db      	uxtb	r3, r3
    29b6:	22ce      	movs	r2, #206	; 0xce
    29b8:	490a      	ldr	r1, [pc, #40]	; (29e4 <_adc_sync_init+0x44>)
    29ba:	4618      	mov	r0, r3
    29bc:	4b0a      	ldr	r3, [pc, #40]	; (29e8 <_adc_sync_init+0x48>)
    29be:	4798      	blx	r3

	device->hw = hw;
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	683a      	ldr	r2, [r7, #0]
    29c4:	601a      	str	r2, [r3, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	4618      	mov	r0, r3
    29ca:	4b08      	ldr	r3, [pc, #32]	; (29ec <_adc_sync_init+0x4c>)
    29cc:	4798      	blx	r3
    29ce:	4603      	mov	r3, r0
    29d0:	4619      	mov	r1, r3
    29d2:	6838      	ldr	r0, [r7, #0]
    29d4:	4b06      	ldr	r3, [pc, #24]	; (29f0 <_adc_sync_init+0x50>)
    29d6:	4798      	blx	r3
    29d8:	4603      	mov	r3, r0
}
    29da:	4618      	mov	r0, r3
    29dc:	3708      	adds	r7, #8
    29de:	46bd      	mov	sp, r7
    29e0:	bd80      	pop	{r7, pc}
    29e2:	bf00      	nop
    29e4:	00008ee0 	.word	0x00008ee0
    29e8:	00002249 	.word	0x00002249
    29ec:	00002781 	.word	0x00002781
    29f0:	000027e5 	.word	0x000027e5

000029f4 <hri_cmcc_get_SR_CSTS_bit>:
{
	return ((Cmcc *)hw)->TYPE.reg;
}

static inline bool hri_cmcc_get_SR_CSTS_bit(const void *const hw)
{
    29f4:	b480      	push	{r7}
    29f6:	b083      	sub	sp, #12
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
	return (((Cmcc *)hw)->SR.reg & CMCC_SR_CSTS) >> CMCC_SR_CSTS_Pos;
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	68db      	ldr	r3, [r3, #12]
    2a00:	f003 0301 	and.w	r3, r3, #1
    2a04:	2b00      	cmp	r3, #0
    2a06:	bf14      	ite	ne
    2a08:	2301      	movne	r3, #1
    2a0a:	2300      	moveq	r3, #0
    2a0c:	b2db      	uxtb	r3, r3
}
    2a0e:	4618      	mov	r0, r3
    2a10:	370c      	adds	r7, #12
    2a12:	46bd      	mov	sp, r7
    2a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a18:	4770      	bx	lr

00002a1a <hri_cmcc_write_CFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_cmcc_write_CFG_reg(const void *const hw, hri_cmcc_cfg_reg_t data)
{
    2a1a:	b480      	push	{r7}
    2a1c:	b083      	sub	sp, #12
    2a1e:	af00      	add	r7, sp, #0
    2a20:	6078      	str	r0, [r7, #4]
    2a22:	6039      	str	r1, [r7, #0]
	CMCC_CRITICAL_SECTION_ENTER();
	((Cmcc *)hw)->CFG.reg = data;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	683a      	ldr	r2, [r7, #0]
    2a28:	605a      	str	r2, [r3, #4]
	CMCC_CRITICAL_SECTION_LEAVE();
}
    2a2a:	bf00      	nop
    2a2c:	370c      	adds	r7, #12
    2a2e:	46bd      	mov	sp, r7
    2a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a34:	4770      	bx	lr

00002a36 <hri_cmcc_write_CTRL_reg>:
{
	return ((Cmcc *)hw)->MEN.reg;
}

static inline void hri_cmcc_write_CTRL_reg(const void *const hw, hri_cmcc_ctrl_reg_t data)
{
    2a36:	b480      	push	{r7}
    2a38:	b083      	sub	sp, #12
    2a3a:	af00      	add	r7, sp, #0
    2a3c:	6078      	str	r0, [r7, #4]
    2a3e:	6039      	str	r1, [r7, #0]
	CMCC_CRITICAL_SECTION_ENTER();
	((Cmcc *)hw)->CTRL.reg = data;
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	683a      	ldr	r2, [r7, #0]
    2a44:	609a      	str	r2, [r3, #8]
	CMCC_CRITICAL_SECTION_LEAVE();
}
    2a46:	bf00      	nop
    2a48:	370c      	adds	r7, #12
    2a4a:	46bd      	mov	sp, r7
    2a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a50:	4770      	bx	lr
	...

00002a54 <_is_cache_enabled>:

/**
 * \brief Cache enable status
 */
static inline bool _is_cache_enabled(const void *hw)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	af00      	add	r7, sp, #0
    2a5a:	6078      	str	r0, [r7, #4]
	return (hri_cmcc_get_SR_CSTS_bit(hw) == IS_CMCC_ENABLED ? true : false);
    2a5c:	6878      	ldr	r0, [r7, #4]
    2a5e:	4b03      	ldr	r3, [pc, #12]	; (2a6c <_is_cache_enabled+0x18>)
    2a60:	4798      	blx	r3
    2a62:	4603      	mov	r3, r0
}
    2a64:	4618      	mov	r0, r3
    2a66:	3708      	adds	r7, #8
    2a68:	46bd      	mov	sp, r7
    2a6a:	bd80      	pop	{r7, pc}
    2a6c:	000029f5 	.word	0x000029f5

00002a70 <_is_cache_disabled>:

/**
 * \brief Cache disable status
 */
static inline bool _is_cache_disabled(const void *hw)
{
    2a70:	b580      	push	{r7, lr}
    2a72:	b082      	sub	sp, #8
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
	return (hri_cmcc_get_SR_CSTS_bit(hw) == IS_CMCC_DISABLED ? true : false);
    2a78:	6878      	ldr	r0, [r7, #4]
    2a7a:	4b09      	ldr	r3, [pc, #36]	; (2aa0 <_is_cache_disabled+0x30>)
    2a7c:	4798      	blx	r3
    2a7e:	4603      	mov	r3, r0
    2a80:	2b00      	cmp	r3, #0
    2a82:	bf14      	ite	ne
    2a84:	2301      	movne	r3, #1
    2a86:	2300      	moveq	r3, #0
    2a88:	b2db      	uxtb	r3, r3
    2a8a:	f083 0301 	eor.w	r3, r3, #1
    2a8e:	b2db      	uxtb	r3, r3
    2a90:	f003 0301 	and.w	r3, r3, #1
    2a94:	b2db      	uxtb	r3, r3
}
    2a96:	4618      	mov	r0, r3
    2a98:	3708      	adds	r7, #8
    2a9a:	46bd      	mov	sp, r7
    2a9c:	bd80      	pop	{r7, pc}
    2a9e:	bf00      	nop
    2aa0:	000029f5 	.word	0x000029f5

00002aa4 <_cmcc_enable>:

/**
 * \brief Cache enable
 */
static inline int32_t _cmcc_enable(const void *hw)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b084      	sub	sp, #16
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	6078      	str	r0, [r7, #4]
	int32_t return_value;

	if (_is_cache_disabled(hw)) {
    2aac:	6878      	ldr	r0, [r7, #4]
    2aae:	4b0e      	ldr	r3, [pc, #56]	; (2ae8 <_cmcc_enable+0x44>)
    2ab0:	4798      	blx	r3
    2ab2:	4603      	mov	r3, r0
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d00f      	beq.n	2ad8 <_cmcc_enable+0x34>
		hri_cmcc_write_CTRL_reg(hw, CMCC_CTRL_CEN);
    2ab8:	2101      	movs	r1, #1
    2aba:	6878      	ldr	r0, [r7, #4]
    2abc:	4b0b      	ldr	r3, [pc, #44]	; (2aec <_cmcc_enable+0x48>)
    2abe:	4798      	blx	r3
		return_value = _is_cache_enabled(hw) == true ? ERR_NONE : ERR_FAILURE;
    2ac0:	6878      	ldr	r0, [r7, #4]
    2ac2:	4b0b      	ldr	r3, [pc, #44]	; (2af0 <_cmcc_enable+0x4c>)
    2ac4:	4798      	blx	r3
    2ac6:	4603      	mov	r3, r0
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d001      	beq.n	2ad0 <_cmcc_enable+0x2c>
    2acc:	2300      	movs	r3, #0
    2ace:	e001      	b.n	2ad4 <_cmcc_enable+0x30>
    2ad0:	f06f 031d 	mvn.w	r3, #29
    2ad4:	60fb      	str	r3, [r7, #12]
    2ad6:	e002      	b.n	2ade <_cmcc_enable+0x3a>
	} else {
		return_value = ERR_NO_CHANGE;
    2ad8:	f06f 0301 	mvn.w	r3, #1
    2adc:	60fb      	str	r3, [r7, #12]
	}

	return return_value;
    2ade:	68fb      	ldr	r3, [r7, #12]
}
    2ae0:	4618      	mov	r0, r3
    2ae2:	3710      	adds	r7, #16
    2ae4:	46bd      	mov	sp, r7
    2ae6:	bd80      	pop	{r7, pc}
    2ae8:	00002a71 	.word	0x00002a71
    2aec:	00002a37 	.word	0x00002a37
    2af0:	00002a55 	.word	0x00002a55

00002af4 <_cmcc_disable>:

/**
 * \brief Cache disable
 */
static inline int32_t _cmcc_disable(const void *hw)
{
    2af4:	b580      	push	{r7, lr}
    2af6:	b082      	sub	sp, #8
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
	hri_cmcc_write_CTRL_reg(hw, (CMCC_DISABLE << CMCC_CTRL_CEN_Pos));
    2afc:	2100      	movs	r1, #0
    2afe:	6878      	ldr	r0, [r7, #4]
    2b00:	4b08      	ldr	r3, [pc, #32]	; (2b24 <_cmcc_disable+0x30>)
    2b02:	4798      	blx	r3
	while (!(_is_cache_disabled(hw)))
    2b04:	bf00      	nop
    2b06:	6878      	ldr	r0, [r7, #4]
    2b08:	4b07      	ldr	r3, [pc, #28]	; (2b28 <_cmcc_disable+0x34>)
    2b0a:	4798      	blx	r3
    2b0c:	4603      	mov	r3, r0
    2b0e:	f083 0301 	eor.w	r3, r3, #1
    2b12:	b2db      	uxtb	r3, r3
    2b14:	2b00      	cmp	r3, #0
    2b16:	d1f6      	bne.n	2b06 <_cmcc_disable+0x12>
		;

	return ERR_NONE;
    2b18:	2300      	movs	r3, #0
}
    2b1a:	4618      	mov	r0, r3
    2b1c:	3708      	adds	r7, #8
    2b1e:	46bd      	mov	sp, r7
    2b20:	bd80      	pop	{r7, pc}
    2b22:	bf00      	nop
    2b24:	00002a37 	.word	0x00002a37
    2b28:	00002a71 	.word	0x00002a71

00002b2c <_cmcc_init>:
 * This function does low level cache configuration.
 *
 * \return initialize status
 */
int32_t _cmcc_init(void)
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b082      	sub	sp, #8
    2b30:	af00      	add	r7, sp, #0
	int32_t return_value;

	_cmcc_disable(CMCC);
    2b32:	4812      	ldr	r0, [pc, #72]	; (2b7c <_cmcc_init+0x50>)
    2b34:	4b12      	ldr	r3, [pc, #72]	; (2b80 <_cmcc_init+0x54>)
    2b36:	4798      	blx	r3

	if (_is_cache_disabled(CMCC)) {
    2b38:	4810      	ldr	r0, [pc, #64]	; (2b7c <_cmcc_init+0x50>)
    2b3a:	4b12      	ldr	r3, [pc, #72]	; (2b84 <_cmcc_init+0x58>)
    2b3c:	4798      	blx	r3
    2b3e:	4603      	mov	r3, r0
    2b40:	2b00      	cmp	r3, #0
    2b42:	d012      	beq.n	2b6a <_cmcc_init+0x3e>
		hri_cmcc_write_CFG_reg(
    2b44:	2124      	movs	r1, #36	; 0x24
    2b46:	480d      	ldr	r0, [pc, #52]	; (2b7c <_cmcc_init+0x50>)
    2b48:	4b0f      	ldr	r3, [pc, #60]	; (2b88 <_cmcc_init+0x5c>)
    2b4a:	4798      	blx	r3
		    CMCC,
		    (CMCC_CFG_CSIZESW(CONF_CMCC_CACHE_SIZE) | (CONF_CMCC_DATA_CACHE_DISABLE << CMCC_CFG_DCDIS_Pos)
		     | (CONF_CMCC_INST_CACHE_DISABLE << CMCC_CFG_ICDIS_Pos) | (CONF_CMCC_CLK_GATING_DISABLE)));

		_cmcc_enable(CMCC);
    2b4c:	480b      	ldr	r0, [pc, #44]	; (2b7c <_cmcc_init+0x50>)
    2b4e:	4b0f      	ldr	r3, [pc, #60]	; (2b8c <_cmcc_init+0x60>)
    2b50:	4798      	blx	r3
		return_value = _is_cache_enabled(CMCC) == true ? ERR_NONE : ERR_FAILURE;
    2b52:	480a      	ldr	r0, [pc, #40]	; (2b7c <_cmcc_init+0x50>)
    2b54:	4b0e      	ldr	r3, [pc, #56]	; (2b90 <_cmcc_init+0x64>)
    2b56:	4798      	blx	r3
    2b58:	4603      	mov	r3, r0
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d001      	beq.n	2b62 <_cmcc_init+0x36>
    2b5e:	2300      	movs	r3, #0
    2b60:	e001      	b.n	2b66 <_cmcc_init+0x3a>
    2b62:	f06f 031d 	mvn.w	r3, #29
    2b66:	607b      	str	r3, [r7, #4]
    2b68:	e002      	b.n	2b70 <_cmcc_init+0x44>
	} else {
		return_value = ERR_NOT_INITIALIZED;
    2b6a:	f06f 0313 	mvn.w	r3, #19
    2b6e:	607b      	str	r3, [r7, #4]
	}

	return return_value;
    2b70:	687b      	ldr	r3, [r7, #4]
}
    2b72:	4618      	mov	r0, r3
    2b74:	3708      	adds	r7, #8
    2b76:	46bd      	mov	sp, r7
    2b78:	bd80      	pop	{r7, pc}
    2b7a:	bf00      	nop
    2b7c:	41006000 	.word	0x41006000
    2b80:	00002af5 	.word	0x00002af5
    2b84:	00002a71 	.word	0x00002a71
    2b88:	00002a1b 	.word	0x00002a1b
    2b8c:	00002aa5 	.word	0x00002aa5
    2b90:	00002a55 	.word	0x00002a55

00002b94 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
    2b94:	b480      	push	{r7}
    2b96:	b083      	sub	sp, #12
    2b98:	af00      	add	r7, sp, #0
    2b9a:	4603      	mov	r3, r0
    2b9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	db0c      	blt.n	2bc0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ba6:	4909      	ldr	r1, [pc, #36]	; (2bcc <__NVIC_SetPendingIRQ+0x38>)
    2ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2bac:	095b      	lsrs	r3, r3, #5
    2bae:	88fa      	ldrh	r2, [r7, #6]
    2bb0:	f002 021f 	and.w	r2, r2, #31
    2bb4:	2001      	movs	r0, #1
    2bb6:	fa00 f202 	lsl.w	r2, r0, r2
    2bba:	3340      	adds	r3, #64	; 0x40
    2bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2bc0:	bf00      	nop
    2bc2:	370c      	adds	r7, #12
    2bc4:	46bd      	mov	sp, r7
    2bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bca:	4770      	bx	lr
    2bcc:	e000e100 	.word	0xe000e100

00002bd0 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	b082      	sub	sp, #8
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	4603      	mov	r3, r0
    2bd8:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    2bda:	79fb      	ldrb	r3, [r7, #7]
    2bdc:	b21b      	sxth	r3, r3
    2bde:	4618      	mov	r0, r3
    2be0:	4b02      	ldr	r3, [pc, #8]	; (2bec <_irq_set+0x1c>)
    2be2:	4798      	blx	r3
}
    2be4:	bf00      	nop
    2be6:	3708      	adds	r7, #8
    2be8:	46bd      	mov	sp, r7
    2bea:	bd80      	pop	{r7, pc}
    2bec:	00002b95 	.word	0x00002b95

00002bf0 <hri_mclk_set_AHBMASK_DMAC_bit>:
{
    2bf0:	b480      	push	{r7}
    2bf2:	b083      	sub	sp, #12
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2bf8:	687b      	ldr	r3, [r7, #4]
    2bfa:	691b      	ldr	r3, [r3, #16]
    2bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	611a      	str	r2, [r3, #16]
}
    2c04:	bf00      	nop
    2c06:	370c      	adds	r7, #12
    2c08:	46bd      	mov	sp, r7
    2c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c0e:	4770      	bx	lr

00002c10 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    2c10:	b480      	push	{r7}
    2c12:	b083      	sub	sp, #12
    2c14:	af00      	add	r7, sp, #0
    2c16:	6078      	str	r0, [r7, #4]
    2c18:	460b      	mov	r3, r1
    2c1a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	881b      	ldrh	r3, [r3, #0]
    2c20:	b29a      	uxth	r2, r3
    2c22:	887b      	ldrh	r3, [r7, #2]
    2c24:	021b      	lsls	r3, r3, #8
    2c26:	b29b      	uxth	r3, r3
    2c28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    2c2c:	b29b      	uxth	r3, r3
    2c2e:	4313      	orrs	r3, r2
    2c30:	b29a      	uxth	r2, r3
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2c36:	bf00      	nop
    2c38:	370c      	adds	r7, #12
    2c3a:	46bd      	mov	sp, r7
    2c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c40:	4770      	bx	lr
	...

00002c44 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2c44:	b580      	push	{r7, lr}
    2c46:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2c48:	2100      	movs	r1, #0
    2c4a:	480d      	ldr	r0, [pc, #52]	; (2c80 <_init_chip+0x3c>)
    2c4c:	4b0d      	ldr	r3, [pc, #52]	; (2c84 <_init_chip+0x40>)
    2c4e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    2c50:	4b0d      	ldr	r3, [pc, #52]	; (2c88 <_init_chip+0x44>)
    2c52:	4798      	blx	r3
	_oscctrl_init_sources();
    2c54:	4b0d      	ldr	r3, [pc, #52]	; (2c8c <_init_chip+0x48>)
    2c56:	4798      	blx	r3
	_mclk_init();
    2c58:	4b0d      	ldr	r3, [pc, #52]	; (2c90 <_init_chip+0x4c>)
    2c5a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2c5c:	2004      	movs	r0, #4
    2c5e:	4b0d      	ldr	r3, [pc, #52]	; (2c94 <_init_chip+0x50>)
    2c60:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    2c62:	4b0d      	ldr	r3, [pc, #52]	; (2c98 <_init_chip+0x54>)
    2c64:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2c66:	f640 70fb 	movw	r0, #4091	; 0xffb
    2c6a:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <_init_chip+0x50>)
    2c6c:	4798      	blx	r3

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
    2c6e:	480b      	ldr	r0, [pc, #44]	; (2c9c <_init_chip+0x58>)
    2c70:	4b0b      	ldr	r3, [pc, #44]	; (2ca0 <_init_chip+0x5c>)
    2c72:	4798      	blx	r3
	_dma_init();
    2c74:	4b0b      	ldr	r3, [pc, #44]	; (2ca4 <_init_chip+0x60>)
    2c76:	4798      	blx	r3
#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif

#if CONF_CMCC_ENABLE
	cache_init();
    2c78:	4b0b      	ldr	r3, [pc, #44]	; (2ca8 <_init_chip+0x64>)
    2c7a:	4798      	blx	r3
#endif
}
    2c7c:	bf00      	nop
    2c7e:	bd80      	pop	{r7, pc}
    2c80:	41004000 	.word	0x41004000
    2c84:	00002c11 	.word	0x00002c11
    2c88:	0000398d 	.word	0x0000398d
    2c8c:	00003c89 	.word	0x00003c89
    2c90:	00003909 	.word	0x00003909
    2c94:	00003875 	.word	0x00003875
    2c98:	00003ca5 	.word	0x00003ca5
    2c9c:	40000800 	.word	0x40000800
    2ca0:	00002bf1 	.word	0x00002bf1
    2ca4:	00003059 	.word	0x00003059
    2ca8:	00001611 	.word	0x00001611

00002cac <__NVIC_EnableIRQ>:
{
    2cac:	b480      	push	{r7}
    2cae:	b083      	sub	sp, #12
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	4603      	mov	r3, r0
    2cb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	db0b      	blt.n	2cd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2cbe:	4909      	ldr	r1, [pc, #36]	; (2ce4 <__NVIC_EnableIRQ+0x38>)
    2cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2cc4:	095b      	lsrs	r3, r3, #5
    2cc6:	88fa      	ldrh	r2, [r7, #6]
    2cc8:	f002 021f 	and.w	r2, r2, #31
    2ccc:	2001      	movs	r0, #1
    2cce:	fa00 f202 	lsl.w	r2, r0, r2
    2cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2cd6:	bf00      	nop
    2cd8:	370c      	adds	r7, #12
    2cda:	46bd      	mov	sp, r7
    2cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ce0:	4770      	bx	lr
    2ce2:	bf00      	nop
    2ce4:	e000e100 	.word	0xe000e100

00002ce8 <__NVIC_DisableIRQ>:
{
    2ce8:	b480      	push	{r7}
    2cea:	b083      	sub	sp, #12
    2cec:	af00      	add	r7, sp, #0
    2cee:	4603      	mov	r3, r0
    2cf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	db10      	blt.n	2d1c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2cfa:	490b      	ldr	r1, [pc, #44]	; (2d28 <__NVIC_DisableIRQ+0x40>)
    2cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2d00:	095b      	lsrs	r3, r3, #5
    2d02:	88fa      	ldrh	r2, [r7, #6]
    2d04:	f002 021f 	and.w	r2, r2, #31
    2d08:	2001      	movs	r0, #1
    2d0a:	fa00 f202 	lsl.w	r2, r0, r2
    2d0e:	3320      	adds	r3, #32
    2d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2d14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d18:	f3bf 8f6f 	isb	sy
}
    2d1c:	bf00      	nop
    2d1e:	370c      	adds	r7, #12
    2d20:	46bd      	mov	sp, r7
    2d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d26:	4770      	bx	lr
    2d28:	e000e100 	.word	0xe000e100

00002d2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2d2c:	b480      	push	{r7}
    2d2e:	b083      	sub	sp, #12
    2d30:	af00      	add	r7, sp, #0
    2d32:	4603      	mov	r3, r0
    2d34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	db0c      	blt.n	2d58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2d3e:	4909      	ldr	r1, [pc, #36]	; (2d64 <__NVIC_ClearPendingIRQ+0x38>)
    2d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2d44:	095b      	lsrs	r3, r3, #5
    2d46:	88fa      	ldrh	r2, [r7, #6]
    2d48:	f002 021f 	and.w	r2, r2, #31
    2d4c:	2001      	movs	r0, #1
    2d4e:	fa00 f202 	lsl.w	r2, r0, r2
    2d52:	3360      	adds	r3, #96	; 0x60
    2d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2d58:	bf00      	nop
    2d5a:	370c      	adds	r7, #12
    2d5c:	46bd      	mov	sp, r7
    2d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d62:	4770      	bx	lr
    2d64:	e000e100 	.word	0xe000e100

00002d68 <hri_dmac_set_CTRL_SWRST_bit>:
{
	return ((Dmac *)hw)->ACTIVE.reg;
}

static inline void hri_dmac_set_CTRL_SWRST_bit(const void *const hw)
{
    2d68:	b480      	push	{r7}
    2d6a:	b083      	sub	sp, #12
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	881b      	ldrh	r3, [r3, #0]
    2d74:	b29b      	uxth	r3, r3
    2d76:	f043 0301 	orr.w	r3, r3, #1
    2d7a:	b29a      	uxth	r2, r3
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2d80:	bf00      	nop
    2d82:	370c      	adds	r7, #12
    2d84:	46bd      	mov	sp, r7
    2d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d8a:	4770      	bx	lr

00002d8c <hri_dmac_get_CTRL_SWRST_bit>:

static inline bool hri_dmac_get_CTRL_SWRST_bit(const void *const hw)
{
    2d8c:	b480      	push	{r7}
    2d8e:	b085      	sub	sp, #20
    2d90:	af00      	add	r7, sp, #0
    2d92:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Dmac *)hw)->CTRL.reg;
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	881b      	ldrh	r3, [r3, #0]
    2d98:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & DMAC_CTRL_SWRST) >> DMAC_CTRL_SWRST_Pos;
    2d9a:	89fb      	ldrh	r3, [r7, #14]
    2d9c:	f003 0301 	and.w	r3, r3, #1
    2da0:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    2da2:	89fb      	ldrh	r3, [r7, #14]
    2da4:	2b00      	cmp	r3, #0
    2da6:	bf14      	ite	ne
    2da8:	2301      	movne	r3, #1
    2daa:	2300      	moveq	r3, #0
    2dac:	b2db      	uxtb	r3, r3
}
    2dae:	4618      	mov	r0, r3
    2db0:	3714      	adds	r7, #20
    2db2:	46bd      	mov	sp, r7
    2db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2db8:	4770      	bx	lr

00002dba <hri_dmac_set_CTRL_DMAENABLE_bit>:

static inline void hri_dmac_set_CTRL_DMAENABLE_bit(const void *const hw)
{
    2dba:	b480      	push	{r7}
    2dbc:	b083      	sub	sp, #12
    2dbe:	af00      	add	r7, sp, #0
    2dc0:	6078      	str	r0, [r7, #4]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	881b      	ldrh	r3, [r3, #0]
    2dc6:	b29b      	uxth	r3, r3
    2dc8:	f043 0302 	orr.w	r3, r3, #2
    2dcc:	b29a      	uxth	r2, r3
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2dd2:	bf00      	nop
    2dd4:	370c      	adds	r7, #12
    2dd6:	46bd      	mov	sp, r7
    2dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ddc:	4770      	bx	lr

00002dde <hri_dmac_clear_CTRL_DMAENABLE_bit>:
	((Dmac *)hw)->CTRL.reg = tmp;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(const void *const hw)
{
    2dde:	b480      	push	{r7}
    2de0:	b083      	sub	sp, #12
    2de2:	af00      	add	r7, sp, #0
    2de4:	6078      	str	r0, [r7, #4]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	881b      	ldrh	r3, [r3, #0]
    2dea:	b29b      	uxth	r3, r3
    2dec:	f023 0302 	bic.w	r3, r3, #2
    2df0:	b29a      	uxth	r2, r3
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2df6:	bf00      	nop
    2df8:	370c      	adds	r7, #12
    2dfa:	46bd      	mov	sp, r7
    2dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e00:	4770      	bx	lr

00002e02 <hri_dmac_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_CTRL_reg(const void *const hw, hri_dmac_ctrl_reg_t data)
{
    2e02:	b480      	push	{r7}
    2e04:	b083      	sub	sp, #12
    2e06:	af00      	add	r7, sp, #0
    2e08:	6078      	str	r0, [r7, #4]
    2e0a:	460b      	mov	r3, r1
    2e0c:	807b      	strh	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg = data;
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	887a      	ldrh	r2, [r7, #2]
    2e12:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2e14:	bf00      	nop
    2e16:	370c      	adds	r7, #12
    2e18:	46bd      	mov	sp, r7
    2e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e1e:	4770      	bx	lr

00002e20 <hri_dmac_clear_CRCCTRL_reg>:
	((Dmac *)hw)->CRCCTRL.reg = data;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_dmac_clear_CRCCTRL_reg(const void *const hw, hri_dmac_crcctrl_reg_t mask)
{
    2e20:	b480      	push	{r7}
    2e22:	b083      	sub	sp, #12
    2e24:	af00      	add	r7, sp, #0
    2e26:	6078      	str	r0, [r7, #4]
    2e28:	460b      	mov	r3, r1
    2e2a:	807b      	strh	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	885b      	ldrh	r3, [r3, #2]
    2e30:	b29b      	uxth	r3, r3
    2e32:	b21a      	sxth	r2, r3
    2e34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    2e38:	43db      	mvns	r3, r3
    2e3a:	b21b      	sxth	r3, r3
    2e3c:	4013      	ands	r3, r2
    2e3e:	b21b      	sxth	r3, r3
    2e40:	b29a      	uxth	r2, r3
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	805a      	strh	r2, [r3, #2]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2e46:	bf00      	nop
    2e48:	370c      	adds	r7, #12
    2e4a:	46bd      	mov	sp, r7
    2e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e50:	4770      	bx	lr

00002e52 <hri_dmac_write_DBGCTRL_DBGRUN_bit>:
	tmp = (tmp & DMAC_DBGCTRL_DBGRUN) >> DMAC_DBGCTRL_DBGRUN_Pos;
	return (bool)tmp;
}

static inline void hri_dmac_write_DBGCTRL_DBGRUN_bit(const void *const hw, bool value)
{
    2e52:	b480      	push	{r7}
    2e54:	b085      	sub	sp, #20
    2e56:	af00      	add	r7, sp, #0
    2e58:	6078      	str	r0, [r7, #4]
    2e5a:	460b      	mov	r3, r1
    2e5c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2e5e:	687b      	ldr	r3, [r7, #4]
    2e60:	7b5b      	ldrb	r3, [r3, #13]
    2e62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2e64:	7bfb      	ldrb	r3, [r7, #15]
    2e66:	f023 0301 	bic.w	r3, r3, #1
    2e6a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    2e6c:	78fa      	ldrb	r2, [r7, #3]
    2e6e:	7bfb      	ldrb	r3, [r7, #15]
    2e70:	4313      	orrs	r3, r2
    2e72:	73fb      	strb	r3, [r7, #15]
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	7bfa      	ldrb	r2, [r7, #15]
    2e78:	735a      	strb	r2, [r3, #13]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2e7a:	bf00      	nop
    2e7c:	3714      	adds	r7, #20
    2e7e:	46bd      	mov	sp, r7
    2e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e84:	4770      	bx	lr

00002e86 <hri_dmac_write_PRICTRL0_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_PRICTRL0_reg(const void *const hw, hri_dmac_prictrl0_reg_t data)
{
    2e86:	b480      	push	{r7}
    2e88:	b083      	sub	sp, #12
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	6078      	str	r0, [r7, #4]
    2e8e:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->PRICTRL0.reg = data;
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	683a      	ldr	r2, [r7, #0]
    2e94:	615a      	str	r2, [r3, #20]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2e96:	bf00      	nop
    2e98:	370c      	adds	r7, #12
    2e9a:	46bd      	mov	sp, r7
    2e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ea0:	4770      	bx	lr

00002ea2 <hri_dmac_get_INTPEND_reg>:
	((Dmac *)hw)->INTPEND.reg |= mask;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
    2ea2:	b480      	push	{r7}
    2ea4:	b085      	sub	sp, #20
    2ea6:	af00      	add	r7, sp, #0
    2ea8:	6078      	str	r0, [r7, #4]
    2eaa:	460b      	mov	r3, r1
    2eac:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2eae:	687b      	ldr	r3, [r7, #4]
    2eb0:	8c1b      	ldrh	r3, [r3, #32]
    2eb2:	81fb      	strh	r3, [r7, #14]
	tmp &= mask;
    2eb4:	89fa      	ldrh	r2, [r7, #14]
    2eb6:	887b      	ldrh	r3, [r7, #2]
    2eb8:	4013      	ands	r3, r2
    2eba:	81fb      	strh	r3, [r7, #14]
	return tmp;
    2ebc:	89fb      	ldrh	r3, [r7, #14]
}
    2ebe:	4618      	mov	r0, r3
    2ec0:	3714      	adds	r7, #20
    2ec2:	46bd      	mov	sp, r7
    2ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ec8:	4770      	bx	lr

00002eca <hri_dmac_write_BASEADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_BASEADDR_reg(const void *const hw, hri_dmac_baseaddr_reg_t data)
{
    2eca:	b480      	push	{r7}
    2ecc:	b083      	sub	sp, #12
    2ece:	af00      	add	r7, sp, #0
    2ed0:	6078      	str	r0, [r7, #4]
    2ed2:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->BASEADDR.reg = data;
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	683a      	ldr	r2, [r7, #0]
    2ed8:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2eda:	bf00      	nop
    2edc:	370c      	adds	r7, #12
    2ede:	46bd      	mov	sp, r7
    2ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ee4:	4770      	bx	lr

00002ee6 <hri_dmac_write_WRBADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_WRBADDR_reg(const void *const hw, hri_dmac_wrbaddr_reg_t data)
{
    2ee6:	b480      	push	{r7}
    2ee8:	b083      	sub	sp, #12
    2eea:	af00      	add	r7, sp, #0
    2eec:	6078      	str	r0, [r7, #4]
    2eee:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->WRBADDR.reg = data;
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	683a      	ldr	r2, [r7, #0]
    2ef4:	639a      	str	r2, [r3, #56]	; 0x38
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2ef6:	bf00      	nop
    2ef8:	370c      	adds	r7, #12
    2efa:	46bd      	mov	sp, r7
    2efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f00:	4770      	bx	lr

00002f02 <hri_dmacdescriptor_write_BTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
    2f02:	b480      	push	{r7}
    2f04:	b083      	sub	sp, #12
    2f06:	af00      	add	r7, sp, #0
    2f08:	6078      	str	r0, [r7, #4]
    2f0a:	460b      	mov	r3, r1
    2f0c:	807b      	strh	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	887a      	ldrh	r2, [r7, #2]
    2f12:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2f14:	bf00      	nop
    2f16:	370c      	adds	r7, #12
    2f18:	46bd      	mov	sp, r7
    2f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f1e:	4770      	bx	lr

00002f20 <hri_dmac_get_CHINTFLAG_TERR_bit>:
{
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
    2f20:	b480      	push	{r7}
    2f22:	b083      	sub	sp, #12
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
    2f28:	460b      	mov	r3, r1
    2f2a:	70fb      	strb	r3, [r7, #3]
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2f2c:	78fb      	ldrb	r3, [r7, #3]
    2f2e:	687a      	ldr	r2, [r7, #4]
    2f30:	011b      	lsls	r3, r3, #4
    2f32:	4413      	add	r3, r2
    2f34:	334e      	adds	r3, #78	; 0x4e
    2f36:	781b      	ldrb	r3, [r3, #0]
    2f38:	b2db      	uxtb	r3, r3
    2f3a:	f003 0301 	and.w	r3, r3, #1
    2f3e:	2b00      	cmp	r3, #0
    2f40:	bf14      	ite	ne
    2f42:	2301      	movne	r3, #1
    2f44:	2300      	moveq	r3, #0
    2f46:	b2db      	uxtb	r3, r3
}
    2f48:	4618      	mov	r0, r3
    2f4a:	370c      	adds	r7, #12
    2f4c:	46bd      	mov	sp, r7
    2f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f52:	4770      	bx	lr

00002f54 <hri_dmac_clear_CHINTFLAG_TERR_bit>:

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
    2f54:	b480      	push	{r7}
    2f56:	b083      	sub	sp, #12
    2f58:	af00      	add	r7, sp, #0
    2f5a:	6078      	str	r0, [r7, #4]
    2f5c:	460b      	mov	r3, r1
    2f5e:	70fb      	strb	r3, [r7, #3]
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2f60:	78fb      	ldrb	r3, [r7, #3]
    2f62:	687a      	ldr	r2, [r7, #4]
    2f64:	011b      	lsls	r3, r3, #4
    2f66:	4413      	add	r3, r2
    2f68:	334e      	adds	r3, #78	; 0x4e
    2f6a:	2201      	movs	r2, #1
    2f6c:	701a      	strb	r2, [r3, #0]
}
    2f6e:	bf00      	nop
    2f70:	370c      	adds	r7, #12
    2f72:	46bd      	mov	sp, r7
    2f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f78:	4770      	bx	lr

00002f7a <hri_dmac_get_CHINTFLAG_TCMPL_bit>:

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
    2f7a:	b480      	push	{r7}
    2f7c:	b083      	sub	sp, #12
    2f7e:	af00      	add	r7, sp, #0
    2f80:	6078      	str	r0, [r7, #4]
    2f82:	460b      	mov	r3, r1
    2f84:	70fb      	strb	r3, [r7, #3]
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2f86:	78fb      	ldrb	r3, [r7, #3]
    2f88:	687a      	ldr	r2, [r7, #4]
    2f8a:	011b      	lsls	r3, r3, #4
    2f8c:	4413      	add	r3, r2
    2f8e:	334e      	adds	r3, #78	; 0x4e
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	b2db      	uxtb	r3, r3
    2f94:	085b      	lsrs	r3, r3, #1
    2f96:	f003 0301 	and.w	r3, r3, #1
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	bf14      	ite	ne
    2f9e:	2301      	movne	r3, #1
    2fa0:	2300      	moveq	r3, #0
    2fa2:	b2db      	uxtb	r3, r3
}
    2fa4:	4618      	mov	r0, r3
    2fa6:	370c      	adds	r7, #12
    2fa8:	46bd      	mov	sp, r7
    2faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fae:	4770      	bx	lr

00002fb0 <hri_dmac_clear_CHINTFLAG_TCMPL_bit>:

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
    2fb0:	b480      	push	{r7}
    2fb2:	b083      	sub	sp, #12
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	6078      	str	r0, [r7, #4]
    2fb8:	460b      	mov	r3, r1
    2fba:	70fb      	strb	r3, [r7, #3]
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2fbc:	78fb      	ldrb	r3, [r7, #3]
    2fbe:	687a      	ldr	r2, [r7, #4]
    2fc0:	011b      	lsls	r3, r3, #4
    2fc2:	4413      	add	r3, r2
    2fc4:	334e      	adds	r3, #78	; 0x4e
    2fc6:	2202      	movs	r2, #2
    2fc8:	701a      	strb	r2, [r3, #0]
}
    2fca:	bf00      	nop
    2fcc:	370c      	adds	r7, #12
    2fce:	46bd      	mov	sp, r7
    2fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fd4:	4770      	bx	lr

00002fd6 <hri_dmac_write_CHCTRLA_reg>:
	return tmp;
}

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
    2fd6:	b480      	push	{r7}
    2fd8:	b085      	sub	sp, #20
    2fda:	af00      	add	r7, sp, #0
    2fdc:	60f8      	str	r0, [r7, #12]
    2fde:	460b      	mov	r3, r1
    2fe0:	607a      	str	r2, [r7, #4]
    2fe2:	72fb      	strb	r3, [r7, #11]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2fe4:	7afb      	ldrb	r3, [r7, #11]
    2fe6:	68fa      	ldr	r2, [r7, #12]
    2fe8:	3304      	adds	r3, #4
    2fea:	011b      	lsls	r3, r3, #4
    2fec:	4413      	add	r3, r2
    2fee:	687a      	ldr	r2, [r7, #4]
    2ff0:	601a      	str	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2ff2:	bf00      	nop
    2ff4:	3714      	adds	r7, #20
    2ff6:	46bd      	mov	sp, r7
    2ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ffc:	4770      	bx	lr

00002ffe <hri_dmac_write_CHPRILVL_reg>:
	return tmp;
}

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
    2ffe:	b480      	push	{r7}
    3000:	b083      	sub	sp, #12
    3002:	af00      	add	r7, sp, #0
    3004:	6078      	str	r0, [r7, #4]
    3006:	460b      	mov	r3, r1
    3008:	70fb      	strb	r3, [r7, #3]
    300a:	4613      	mov	r3, r2
    300c:	70bb      	strb	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    300e:	78fb      	ldrb	r3, [r7, #3]
    3010:	687a      	ldr	r2, [r7, #4]
    3012:	3304      	adds	r3, #4
    3014:	011b      	lsls	r3, r3, #4
    3016:	4413      	add	r3, r2
    3018:	3305      	adds	r3, #5
    301a:	78ba      	ldrb	r2, [r7, #2]
    301c:	701a      	strb	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    301e:	bf00      	nop
    3020:	370c      	adds	r7, #12
    3022:	46bd      	mov	sp, r7
    3024:	f85d 7b04 	ldr.w	r7, [sp], #4
    3028:	4770      	bx	lr

0000302a <hri_dmac_write_CHEVCTRL_reg>:
	return tmp;
}

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
    302a:	b480      	push	{r7}
    302c:	b083      	sub	sp, #12
    302e:	af00      	add	r7, sp, #0
    3030:	6078      	str	r0, [r7, #4]
    3032:	460b      	mov	r3, r1
    3034:	70fb      	strb	r3, [r7, #3]
    3036:	4613      	mov	r3, r2
    3038:	70bb      	strb	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    303a:	78fb      	ldrb	r3, [r7, #3]
    303c:	687a      	ldr	r2, [r7, #4]
    303e:	3304      	adds	r3, #4
    3040:	011b      	lsls	r3, r3, #4
    3042:	4413      	add	r3, r2
    3044:	3306      	adds	r3, #6
    3046:	78ba      	ldrb	r2, [r7, #2]
    3048:	701a      	strb	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    304a:	bf00      	nop
    304c:	370c      	adds	r7, #12
    304e:	46bd      	mov	sp, r7
    3050:	f85d 7b04 	ldr.w	r7, [sp], #4
    3054:	4770      	bx	lr
	...

00003058 <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(void)
{
    3058:	b580      	push	{r7, lr}
    305a:	b082      	sub	sp, #8
    305c:	af00      	add	r7, sp, #0
	uint8_t i;

	hri_dmac_clear_CTRL_DMAENABLE_bit(DMAC);
    305e:	4842      	ldr	r0, [pc, #264]	; (3168 <_dma_init+0x110>)
    3060:	4b42      	ldr	r3, [pc, #264]	; (316c <_dma_init+0x114>)
    3062:	4798      	blx	r3
	hri_dmac_clear_CRCCTRL_reg(DMAC, DMAC_CRCCTRL_CRCSRC_Msk);
    3064:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    3068:	483f      	ldr	r0, [pc, #252]	; (3168 <_dma_init+0x110>)
    306a:	4b41      	ldr	r3, [pc, #260]	; (3170 <_dma_init+0x118>)
    306c:	4798      	blx	r3
	hri_dmac_set_CTRL_SWRST_bit(DMAC);
    306e:	483e      	ldr	r0, [pc, #248]	; (3168 <_dma_init+0x110>)
    3070:	4b40      	ldr	r3, [pc, #256]	; (3174 <_dma_init+0x11c>)
    3072:	4798      	blx	r3
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    3074:	bf00      	nop
    3076:	483c      	ldr	r0, [pc, #240]	; (3168 <_dma_init+0x110>)
    3078:	4b3f      	ldr	r3, [pc, #252]	; (3178 <_dma_init+0x120>)
    307a:	4798      	blx	r3
    307c:	4603      	mov	r3, r0
    307e:	2b00      	cmp	r3, #0
    3080:	d1f9      	bne.n	3076 <_dma_init+0x1e>
		;

	hri_dmac_write_CTRL_reg(DMAC,
    3082:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    3086:	4838      	ldr	r0, [pc, #224]	; (3168 <_dma_init+0x110>)
    3088:	4b3c      	ldr	r3, [pc, #240]	; (317c <_dma_init+0x124>)
    308a:	4798      	blx	r3
	                        (CONF_DMAC_LVLEN0 << DMAC_CTRL_LVLEN0_Pos) | (CONF_DMAC_LVLEN1 << DMAC_CTRL_LVLEN1_Pos)
	                            | (CONF_DMAC_LVLEN2 << DMAC_CTRL_LVLEN2_Pos)
	                            | (CONF_DMAC_LVLEN3 << DMAC_CTRL_LVLEN3_Pos));
	hri_dmac_write_DBGCTRL_DBGRUN_bit(DMAC, CONF_DMAC_DBGRUN);
    308c:	2100      	movs	r1, #0
    308e:	4836      	ldr	r0, [pc, #216]	; (3168 <_dma_init+0x110>)
    3090:	4b3b      	ldr	r3, [pc, #236]	; (3180 <_dma_init+0x128>)
    3092:	4798      	blx	r3

	hri_dmac_write_PRICTRL0_reg(
    3094:	2100      	movs	r1, #0
    3096:	4834      	ldr	r0, [pc, #208]	; (3168 <_dma_init+0x110>)
    3098:	4b3a      	ldr	r3, [pc, #232]	; (3184 <_dma_init+0x12c>)
    309a:	4798      	blx	r3
	    DMAC,
	    DMAC_PRICTRL0_LVLPRI0(CONF_DMAC_LVLPRI0) | DMAC_PRICTRL0_LVLPRI1(CONF_DMAC_LVLPRI1)
	        | DMAC_PRICTRL0_LVLPRI2(CONF_DMAC_LVLPRI2) | DMAC_PRICTRL0_LVLPRI3(CONF_DMAC_LVLPRI3)
	        | (CONF_DMAC_RRLVLEN0 << DMAC_PRICTRL0_RRLVLEN0_Pos) | (CONF_DMAC_RRLVLEN1 << DMAC_PRICTRL0_RRLVLEN1_Pos)
	        | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos) | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    309c:	4b3a      	ldr	r3, [pc, #232]	; (3188 <_dma_init+0x130>)
    309e:	4619      	mov	r1, r3
    30a0:	4831      	ldr	r0, [pc, #196]	; (3168 <_dma_init+0x110>)
    30a2:	4b3a      	ldr	r3, [pc, #232]	; (318c <_dma_init+0x134>)
    30a4:	4798      	blx	r3
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    30a6:	4b3a      	ldr	r3, [pc, #232]	; (3190 <_dma_init+0x138>)
    30a8:	4619      	mov	r1, r3
    30aa:	482f      	ldr	r0, [pc, #188]	; (3168 <_dma_init+0x110>)
    30ac:	4b39      	ldr	r3, [pc, #228]	; (3194 <_dma_init+0x13c>)
    30ae:	4798      	blx	r3

	for (i = 0; i < DMAC_CH_NUM; i++) {
    30b0:	2300      	movs	r3, #0
    30b2:	71fb      	strb	r3, [r7, #7]
    30b4:	e02b      	b.n	310e <_dma_init+0xb6>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    30b6:	79fb      	ldrb	r3, [r7, #7]
    30b8:	4a37      	ldr	r2, [pc, #220]	; (3198 <_dma_init+0x140>)
    30ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    30be:	79fb      	ldrb	r3, [r7, #7]
    30c0:	4619      	mov	r1, r3
    30c2:	4829      	ldr	r0, [pc, #164]	; (3168 <_dma_init+0x110>)
    30c4:	4b35      	ldr	r3, [pc, #212]	; (319c <_dma_init+0x144>)
    30c6:	4798      	blx	r3
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    30c8:	79fb      	ldrb	r3, [r7, #7]
    30ca:	4a33      	ldr	r2, [pc, #204]	; (3198 <_dma_init+0x140>)
    30cc:	00db      	lsls	r3, r3, #3
    30ce:	4413      	add	r3, r2
    30d0:	791a      	ldrb	r2, [r3, #4]
    30d2:	79fb      	ldrb	r3, [r7, #7]
    30d4:	4619      	mov	r1, r3
    30d6:	4824      	ldr	r0, [pc, #144]	; (3168 <_dma_init+0x110>)
    30d8:	4b31      	ldr	r3, [pc, #196]	; (31a0 <_dma_init+0x148>)
    30da:	4798      	blx	r3
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    30dc:	79fb      	ldrb	r3, [r7, #7]
    30de:	4a2e      	ldr	r2, [pc, #184]	; (3198 <_dma_init+0x140>)
    30e0:	00db      	lsls	r3, r3, #3
    30e2:	4413      	add	r3, r2
    30e4:	795a      	ldrb	r2, [r3, #5]
    30e6:	79fb      	ldrb	r3, [r7, #7]
    30e8:	4619      	mov	r1, r3
    30ea:	481f      	ldr	r0, [pc, #124]	; (3168 <_dma_init+0x110>)
    30ec:	4b2d      	ldr	r3, [pc, #180]	; (31a4 <_dma_init+0x14c>)
    30ee:	4798      	blx	r3
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    30f0:	79fb      	ldrb	r3, [r7, #7]
    30f2:	011b      	lsls	r3, r3, #4
    30f4:	4a24      	ldr	r2, [pc, #144]	; (3188 <_dma_init+0x130>)
    30f6:	1898      	adds	r0, r3, r2
    30f8:	79fb      	ldrb	r3, [r7, #7]
    30fa:	4a27      	ldr	r2, [pc, #156]	; (3198 <_dma_init+0x140>)
    30fc:	00db      	lsls	r3, r3, #3
    30fe:	4413      	add	r3, r2
    3100:	88db      	ldrh	r3, [r3, #6]
    3102:	4619      	mov	r1, r3
    3104:	4b28      	ldr	r3, [pc, #160]	; (31a8 <_dma_init+0x150>)
    3106:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
    3108:	79fb      	ldrb	r3, [r7, #7]
    310a:	3301      	adds	r3, #1
    310c:	71fb      	strb	r3, [r7, #7]
    310e:	79fb      	ldrb	r3, [r7, #7]
    3110:	2b1f      	cmp	r3, #31
    3112:	d9d0      	bls.n	30b6 <_dma_init+0x5e>
	}

	for (i = 0; i < 5; i++) {
    3114:	2300      	movs	r3, #0
    3116:	71fb      	strb	r3, [r7, #7]
    3118:	e01a      	b.n	3150 <_dma_init+0xf8>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    311a:	79fb      	ldrb	r3, [r7, #7]
    311c:	b29b      	uxth	r3, r3
    311e:	331f      	adds	r3, #31
    3120:	b29b      	uxth	r3, r3
    3122:	b21b      	sxth	r3, r3
    3124:	4618      	mov	r0, r3
    3126:	4b21      	ldr	r3, [pc, #132]	; (31ac <_dma_init+0x154>)
    3128:	4798      	blx	r3
		NVIC_ClearPendingIRQ(DMAC_0_IRQn + i);
    312a:	79fb      	ldrb	r3, [r7, #7]
    312c:	b29b      	uxth	r3, r3
    312e:	331f      	adds	r3, #31
    3130:	b29b      	uxth	r3, r3
    3132:	b21b      	sxth	r3, r3
    3134:	4618      	mov	r0, r3
    3136:	4b1e      	ldr	r3, [pc, #120]	; (31b0 <_dma_init+0x158>)
    3138:	4798      	blx	r3
		NVIC_EnableIRQ(DMAC_0_IRQn + i);
    313a:	79fb      	ldrb	r3, [r7, #7]
    313c:	b29b      	uxth	r3, r3
    313e:	331f      	adds	r3, #31
    3140:	b29b      	uxth	r3, r3
    3142:	b21b      	sxth	r3, r3
    3144:	4618      	mov	r0, r3
    3146:	4b1b      	ldr	r3, [pc, #108]	; (31b4 <_dma_init+0x15c>)
    3148:	4798      	blx	r3
	for (i = 0; i < 5; i++) {
    314a:	79fb      	ldrb	r3, [r7, #7]
    314c:	3301      	adds	r3, #1
    314e:	71fb      	strb	r3, [r7, #7]
    3150:	79fb      	ldrb	r3, [r7, #7]
    3152:	2b04      	cmp	r3, #4
    3154:	d9e1      	bls.n	311a <_dma_init+0xc2>
	}

	hri_dmac_set_CTRL_DMAENABLE_bit(DMAC);
    3156:	4804      	ldr	r0, [pc, #16]	; (3168 <_dma_init+0x110>)
    3158:	4b17      	ldr	r3, [pc, #92]	; (31b8 <_dma_init+0x160>)
    315a:	4798      	blx	r3

	return ERR_NONE;
    315c:	2300      	movs	r3, #0
}
    315e:	4618      	mov	r0, r3
    3160:	3708      	adds	r7, #8
    3162:	46bd      	mov	sp, r7
    3164:	bd80      	pop	{r7, pc}
    3166:	bf00      	nop
    3168:	4100a000 	.word	0x4100a000
    316c:	00002ddf 	.word	0x00002ddf
    3170:	00002e21 	.word	0x00002e21
    3174:	00002d69 	.word	0x00002d69
    3178:	00002d8d 	.word	0x00002d8d
    317c:	00002e03 	.word	0x00002e03
    3180:	00002e53 	.word	0x00002e53
    3184:	00002e87 	.word	0x00002e87
    3188:	20000920 	.word	0x20000920
    318c:	00002ecb 	.word	0x00002ecb
    3190:	20000b20 	.word	0x20000b20
    3194:	00002ee7 	.word	0x00002ee7
    3198:	00008ef8 	.word	0x00008ef8
    319c:	00002fd7 	.word	0x00002fd7
    31a0:	00002fff 	.word	0x00002fff
    31a4:	0000302b 	.word	0x0000302b
    31a8:	00002f03 	.word	0x00002f03
    31ac:	00002ce9 	.word	0x00002ce9
    31b0:	00002d2d 	.word	0x00002d2d
    31b4:	00002cad 	.word	0x00002cad
    31b8:	00002dbb 	.word	0x00002dbb

000031bc <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    31bc:	b580      	push	{r7, lr}
    31be:	b082      	sub	sp, #8
    31c0:	af00      	add	r7, sp, #0
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    31c2:	211f      	movs	r1, #31
    31c4:	4819      	ldr	r0, [pc, #100]	; (322c <_dmac_handler+0x70>)
    31c6:	4b1a      	ldr	r3, [pc, #104]	; (3230 <_dmac_handler+0x74>)
    31c8:	4798      	blx	r3
    31ca:	4603      	mov	r3, r0
    31cc:	71fb      	strb	r3, [r7, #7]
	struct _dma_resource *tmp_resource = &_resources[channel];
    31ce:	79fa      	ldrb	r2, [r7, #7]
    31d0:	4613      	mov	r3, r2
    31d2:	005b      	lsls	r3, r3, #1
    31d4:	4413      	add	r3, r2
    31d6:	009b      	lsls	r3, r3, #2
    31d8:	4a16      	ldr	r2, [pc, #88]	; (3234 <_dmac_handler+0x78>)
    31da:	4413      	add	r3, r2
    31dc:	603b      	str	r3, [r7, #0]

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    31de:	79fb      	ldrb	r3, [r7, #7]
    31e0:	4619      	mov	r1, r3
    31e2:	4812      	ldr	r0, [pc, #72]	; (322c <_dmac_handler+0x70>)
    31e4:	4b14      	ldr	r3, [pc, #80]	; (3238 <_dmac_handler+0x7c>)
    31e6:	4798      	blx	r3
    31e8:	4603      	mov	r3, r0
    31ea:	2b00      	cmp	r3, #0
    31ec:	d009      	beq.n	3202 <_dmac_handler+0x46>
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
    31ee:	79fb      	ldrb	r3, [r7, #7]
    31f0:	4619      	mov	r1, r3
    31f2:	480e      	ldr	r0, [pc, #56]	; (322c <_dmac_handler+0x70>)
    31f4:	4b11      	ldr	r3, [pc, #68]	; (323c <_dmac_handler+0x80>)
    31f6:	4798      	blx	r3
		tmp_resource->dma_cb.error(tmp_resource);
    31f8:	683b      	ldr	r3, [r7, #0]
    31fa:	685b      	ldr	r3, [r3, #4]
    31fc:	6838      	ldr	r0, [r7, #0]
    31fe:	4798      	blx	r3
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    3200:	e010      	b.n	3224 <_dmac_handler+0x68>
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    3202:	79fb      	ldrb	r3, [r7, #7]
    3204:	4619      	mov	r1, r3
    3206:	4809      	ldr	r0, [pc, #36]	; (322c <_dmac_handler+0x70>)
    3208:	4b0d      	ldr	r3, [pc, #52]	; (3240 <_dmac_handler+0x84>)
    320a:	4798      	blx	r3
    320c:	4603      	mov	r3, r0
    320e:	2b00      	cmp	r3, #0
    3210:	d008      	beq.n	3224 <_dmac_handler+0x68>
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
    3212:	79fb      	ldrb	r3, [r7, #7]
    3214:	4619      	mov	r1, r3
    3216:	4805      	ldr	r0, [pc, #20]	; (322c <_dmac_handler+0x70>)
    3218:	4b0a      	ldr	r3, [pc, #40]	; (3244 <_dmac_handler+0x88>)
    321a:	4798      	blx	r3
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    321c:	683b      	ldr	r3, [r7, #0]
    321e:	681b      	ldr	r3, [r3, #0]
    3220:	6838      	ldr	r0, [r7, #0]
    3222:	4798      	blx	r3
}
    3224:	bf00      	nop
    3226:	3708      	adds	r7, #8
    3228:	46bd      	mov	sp, r7
    322a:	bd80      	pop	{r7, pc}
    322c:	4100a000 	.word	0x4100a000
    3230:	00002ea3 	.word	0x00002ea3
    3234:	20000270 	.word	0x20000270
    3238:	00002f21 	.word	0x00002f21
    323c:	00002f55 	.word	0x00002f55
    3240:	00002f7b 	.word	0x00002f7b
    3244:	00002fb1 	.word	0x00002fb1

00003248 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    3248:	b580      	push	{r7, lr}
    324a:	af00      	add	r7, sp, #0
	_dmac_handler();
    324c:	4b01      	ldr	r3, [pc, #4]	; (3254 <DMAC_0_Handler+0xc>)
    324e:	4798      	blx	r3
}
    3250:	bf00      	nop
    3252:	bd80      	pop	{r7, pc}
    3254:	000031bd 	.word	0x000031bd

00003258 <DMAC_1_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    3258:	b580      	push	{r7, lr}
    325a:	af00      	add	r7, sp, #0
	_dmac_handler();
    325c:	4b01      	ldr	r3, [pc, #4]	; (3264 <DMAC_1_Handler+0xc>)
    325e:	4798      	blx	r3
}
    3260:	bf00      	nop
    3262:	bd80      	pop	{r7, pc}
    3264:	000031bd 	.word	0x000031bd

00003268 <DMAC_2_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    3268:	b580      	push	{r7, lr}
    326a:	af00      	add	r7, sp, #0
	_dmac_handler();
    326c:	4b01      	ldr	r3, [pc, #4]	; (3274 <DMAC_2_Handler+0xc>)
    326e:	4798      	blx	r3
}
    3270:	bf00      	nop
    3272:	bd80      	pop	{r7, pc}
    3274:	000031bd 	.word	0x000031bd

00003278 <DMAC_3_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    3278:	b580      	push	{r7, lr}
    327a:	af00      	add	r7, sp, #0
	_dmac_handler();
    327c:	4b01      	ldr	r3, [pc, #4]	; (3284 <DMAC_3_Handler+0xc>)
    327e:	4798      	blx	r3
}
    3280:	bf00      	nop
    3282:	bd80      	pop	{r7, pc}
    3284:	000031bd 	.word	0x000031bd

00003288 <DMAC_4_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    3288:	b580      	push	{r7, lr}
    328a:	af00      	add	r7, sp, #0
	_dmac_handler();
    328c:	4b01      	ldr	r3, [pc, #4]	; (3294 <DMAC_4_Handler+0xc>)
    328e:	4798      	blx	r3
}
    3290:	bf00      	nop
    3292:	bd80      	pop	{r7, pc}
    3294:	000031bd 	.word	0x000031bd

00003298 <__NVIC_EnableIRQ>:
{
    3298:	b480      	push	{r7}
    329a:	b083      	sub	sp, #12
    329c:	af00      	add	r7, sp, #0
    329e:	4603      	mov	r3, r0
    32a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    32a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32a6:	2b00      	cmp	r3, #0
    32a8:	db0b      	blt.n	32c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    32aa:	4909      	ldr	r1, [pc, #36]	; (32d0 <__NVIC_EnableIRQ+0x38>)
    32ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32b0:	095b      	lsrs	r3, r3, #5
    32b2:	88fa      	ldrh	r2, [r7, #6]
    32b4:	f002 021f 	and.w	r2, r2, #31
    32b8:	2001      	movs	r0, #1
    32ba:	fa00 f202 	lsl.w	r2, r0, r2
    32be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    32c2:	bf00      	nop
    32c4:	370c      	adds	r7, #12
    32c6:	46bd      	mov	sp, r7
    32c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    32cc:	4770      	bx	lr
    32ce:	bf00      	nop
    32d0:	e000e100 	.word	0xe000e100

000032d4 <__NVIC_DisableIRQ>:
{
    32d4:	b480      	push	{r7}
    32d6:	b083      	sub	sp, #12
    32d8:	af00      	add	r7, sp, #0
    32da:	4603      	mov	r3, r0
    32dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    32de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32e2:	2b00      	cmp	r3, #0
    32e4:	db10      	blt.n	3308 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    32e6:	490b      	ldr	r1, [pc, #44]	; (3314 <__NVIC_DisableIRQ+0x40>)
    32e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    32ec:	095b      	lsrs	r3, r3, #5
    32ee:	88fa      	ldrh	r2, [r7, #6]
    32f0:	f002 021f 	and.w	r2, r2, #31
    32f4:	2001      	movs	r0, #1
    32f6:	fa00 f202 	lsl.w	r2, r0, r2
    32fa:	3320      	adds	r3, #32
    32fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3304:	f3bf 8f6f 	isb	sy
}
    3308:	bf00      	nop
    330a:	370c      	adds	r7, #12
    330c:	46bd      	mov	sp, r7
    330e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3312:	4770      	bx	lr
    3314:	e000e100 	.word	0xe000e100

00003318 <__NVIC_ClearPendingIRQ>:
{
    3318:	b480      	push	{r7}
    331a:	b083      	sub	sp, #12
    331c:	af00      	add	r7, sp, #0
    331e:	4603      	mov	r3, r0
    3320:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3326:	2b00      	cmp	r3, #0
    3328:	db0c      	blt.n	3344 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    332a:	4909      	ldr	r1, [pc, #36]	; (3350 <__NVIC_ClearPendingIRQ+0x38>)
    332c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3330:	095b      	lsrs	r3, r3, #5
    3332:	88fa      	ldrh	r2, [r7, #6]
    3334:	f002 021f 	and.w	r2, r2, #31
    3338:	2001      	movs	r0, #1
    333a:	fa00 f202 	lsl.w	r2, r0, r2
    333e:	3360      	adds	r3, #96	; 0x60
    3340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3344:	bf00      	nop
    3346:	370c      	adds	r7, #12
    3348:	46bd      	mov	sp, r7
    334a:	f85d 7b04 	ldr.w	r7, [sp], #4
    334e:	4770      	bx	lr
    3350:	e000e100 	.word	0xe000e100

00003354 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3354:	b480      	push	{r7}
    3356:	b083      	sub	sp, #12
    3358:	af00      	add	r7, sp, #0
    335a:	6078      	str	r0, [r7, #4]
    335c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    335e:	bf00      	nop
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	685a      	ldr	r2, [r3, #4]
    3364:	683b      	ldr	r3, [r7, #0]
    3366:	4013      	ands	r3, r2
    3368:	2b00      	cmp	r3, #0
    336a:	d1f9      	bne.n	3360 <hri_eic_wait_for_sync+0xc>
	};
}
    336c:	bf00      	nop
    336e:	370c      	adds	r7, #12
    3370:	46bd      	mov	sp, r7
    3372:	f85d 7b04 	ldr.w	r7, [sp], #4
    3376:	4770      	bx	lr

00003378 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3378:	b480      	push	{r7}
    337a:	b083      	sub	sp, #12
    337c:	af00      	add	r7, sp, #0
    337e:	6078      	str	r0, [r7, #4]
    3380:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	685a      	ldr	r2, [r3, #4]
    3386:	683b      	ldr	r3, [r7, #0]
    3388:	4013      	ands	r3, r2
    338a:	2b00      	cmp	r3, #0
    338c:	bf14      	ite	ne
    338e:	2301      	movne	r3, #1
    3390:	2300      	moveq	r3, #0
    3392:	b2db      	uxtb	r3, r3
}
    3394:	4618      	mov	r0, r3
    3396:	370c      	adds	r7, #12
    3398:	46bd      	mov	sp, r7
    339a:	f85d 7b04 	ldr.w	r7, [sp], #4
    339e:	4770      	bx	lr

000033a0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    33a0:	b480      	push	{r7}
    33a2:	b083      	sub	sp, #12
    33a4:	af00      	add	r7, sp, #0
    33a6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	695b      	ldr	r3, [r3, #20]
}
    33ac:	4618      	mov	r0, r3
    33ae:	370c      	adds	r7, #12
    33b0:	46bd      	mov	sp, r7
    33b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33b6:	4770      	bx	lr

000033b8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    33b8:	b480      	push	{r7}
    33ba:	b083      	sub	sp, #12
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
    33c0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	683a      	ldr	r2, [r7, #0]
    33c6:	615a      	str	r2, [r3, #20]
}
    33c8:	bf00      	nop
    33ca:	370c      	adds	r7, #12
    33cc:	46bd      	mov	sp, r7
    33ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d2:	4770      	bx	lr

000033d4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b082      	sub	sp, #8
    33d8:	af00      	add	r7, sp, #0
    33da:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	781b      	ldrb	r3, [r3, #0]
    33e0:	b2db      	uxtb	r3, r3
    33e2:	f043 0302 	orr.w	r3, r3, #2
    33e6:	b2da      	uxtb	r2, r3
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    33ec:	2103      	movs	r1, #3
    33ee:	6878      	ldr	r0, [r7, #4]
    33f0:	4b02      	ldr	r3, [pc, #8]	; (33fc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    33f2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    33f4:	bf00      	nop
    33f6:	3708      	adds	r7, #8
    33f8:	46bd      	mov	sp, r7
    33fa:	bd80      	pop	{r7, pc}
    33fc:	00003355 	.word	0x00003355

00003400 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3400:	b580      	push	{r7, lr}
    3402:	b082      	sub	sp, #8
    3404:	af00      	add	r7, sp, #0
    3406:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	b2db      	uxtb	r3, r3
    340e:	f023 0302 	bic.w	r3, r3, #2
    3412:	b2da      	uxtb	r2, r3
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3418:	2103      	movs	r1, #3
    341a:	6878      	ldr	r0, [r7, #4]
    341c:	4b02      	ldr	r3, [pc, #8]	; (3428 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    341e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3420:	bf00      	nop
    3422:	3708      	adds	r7, #8
    3424:	46bd      	mov	sp, r7
    3426:	bd80      	pop	{r7, pc}
    3428:	00003355 	.word	0x00003355

0000342c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    342c:	b580      	push	{r7, lr}
    342e:	b084      	sub	sp, #16
    3430:	af00      	add	r7, sp, #0
    3432:	6078      	str	r0, [r7, #4]
    3434:	460b      	mov	r3, r1
    3436:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    3438:	687b      	ldr	r3, [r7, #4]
    343a:	781b      	ldrb	r3, [r3, #0]
    343c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    343e:	7bfb      	ldrb	r3, [r7, #15]
    3440:	f023 0310 	bic.w	r3, r3, #16
    3444:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    3446:	78fb      	ldrb	r3, [r7, #3]
    3448:	011b      	lsls	r3, r3, #4
    344a:	b25a      	sxtb	r2, r3
    344c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3450:	4313      	orrs	r3, r2
    3452:	b25b      	sxtb	r3, r3
    3454:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	7bfa      	ldrb	r2, [r7, #15]
    345a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    345c:	2103      	movs	r1, #3
    345e:	6878      	ldr	r0, [r7, #4]
    3460:	4b02      	ldr	r3, [pc, #8]	; (346c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    3462:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3464:	bf00      	nop
    3466:	3710      	adds	r7, #16
    3468:	46bd      	mov	sp, r7
    346a:	bd80      	pop	{r7, pc}
    346c:	00003355 	.word	0x00003355

00003470 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    3470:	b580      	push	{r7, lr}
    3472:	b084      	sub	sp, #16
    3474:	af00      	add	r7, sp, #0
    3476:	6078      	str	r0, [r7, #4]
    3478:	460b      	mov	r3, r1
    347a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    347c:	2103      	movs	r1, #3
    347e:	6878      	ldr	r0, [r7, #4]
    3480:	4b06      	ldr	r3, [pc, #24]	; (349c <hri_eic_get_CTRLA_reg+0x2c>)
    3482:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	781b      	ldrb	r3, [r3, #0]
    3488:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    348a:	7bfa      	ldrb	r2, [r7, #15]
    348c:	78fb      	ldrb	r3, [r7, #3]
    348e:	4013      	ands	r3, r2
    3490:	73fb      	strb	r3, [r7, #15]
	return tmp;
    3492:	7bfb      	ldrb	r3, [r7, #15]
}
    3494:	4618      	mov	r0, r3
    3496:	3710      	adds	r7, #16
    3498:	46bd      	mov	sp, r7
    349a:	bd80      	pop	{r7, pc}
    349c:	00003355 	.word	0x00003355

000034a0 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    34a8:	460b      	mov	r3, r1
    34aa:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	78fa      	ldrb	r2, [r7, #3]
    34b0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    34b2:	2103      	movs	r1, #3
    34b4:	6878      	ldr	r0, [r7, #4]
    34b6:	4b03      	ldr	r3, [pc, #12]	; (34c4 <hri_eic_write_CTRLA_reg+0x24>)
    34b8:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    34ba:	bf00      	nop
    34bc:	3708      	adds	r7, #8
    34be:	46bd      	mov	sp, r7
    34c0:	bd80      	pop	{r7, pc}
    34c2:	bf00      	nop
    34c4:	00003355 	.word	0x00003355

000034c8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    34c8:	b480      	push	{r7}
    34ca:	b083      	sub	sp, #12
    34cc:	af00      	add	r7, sp, #0
    34ce:	6078      	str	r0, [r7, #4]
    34d0:	460b      	mov	r3, r1
    34d2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	78fa      	ldrb	r2, [r7, #3]
    34d8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    34da:	bf00      	nop
    34dc:	370c      	adds	r7, #12
    34de:	46bd      	mov	sp, r7
    34e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    34e4:	4770      	bx	lr

000034e6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    34e6:	b480      	push	{r7}
    34e8:	b083      	sub	sp, #12
    34ea:	af00      	add	r7, sp, #0
    34ec:	6078      	str	r0, [r7, #4]
    34ee:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	683a      	ldr	r2, [r7, #0]
    34f4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    34f6:	bf00      	nop
    34f8:	370c      	adds	r7, #12
    34fa:	46bd      	mov	sp, r7
    34fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3500:	4770      	bx	lr

00003502 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    3502:	b480      	push	{r7}
    3504:	b083      	sub	sp, #12
    3506:	af00      	add	r7, sp, #0
    3508:	6078      	str	r0, [r7, #4]
    350a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	683a      	ldr	r2, [r7, #0]
    3510:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3512:	bf00      	nop
    3514:	370c      	adds	r7, #12
    3516:	46bd      	mov	sp, r7
    3518:	f85d 7b04 	ldr.w	r7, [sp], #4
    351c:	4770      	bx	lr

0000351e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    351e:	b480      	push	{r7}
    3520:	b085      	sub	sp, #20
    3522:	af00      	add	r7, sp, #0
    3524:	60f8      	str	r0, [r7, #12]
    3526:	460b      	mov	r3, r1
    3528:	607a      	str	r2, [r7, #4]
    352a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    352c:	7afb      	ldrb	r3, [r7, #11]
    352e:	68fa      	ldr	r2, [r7, #12]
    3530:	3306      	adds	r3, #6
    3532:	009b      	lsls	r3, r3, #2
    3534:	4413      	add	r3, r2
    3536:	687a      	ldr	r2, [r7, #4]
    3538:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    353a:	bf00      	nop
    353c:	3714      	adds	r7, #20
    353e:	46bd      	mov	sp, r7
    3540:	f85d 7b04 	ldr.w	r7, [sp], #4
    3544:	4770      	bx	lr

00003546 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    3546:	b480      	push	{r7}
    3548:	b083      	sub	sp, #12
    354a:	af00      	add	r7, sp, #0
    354c:	6078      	str	r0, [r7, #4]
    354e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	683a      	ldr	r2, [r7, #0]
    3554:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    3556:	bf00      	nop
    3558:	370c      	adds	r7, #12
    355a:	46bd      	mov	sp, r7
    355c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3560:	4770      	bx	lr

00003562 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    3562:	b480      	push	{r7}
    3564:	b083      	sub	sp, #12
    3566:	af00      	add	r7, sp, #0
    3568:	6078      	str	r0, [r7, #4]
    356a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	683a      	ldr	r2, [r7, #0]
    3570:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    3572:	bf00      	nop
    3574:	370c      	adds	r7, #12
    3576:	46bd      	mov	sp, r7
    3578:	f85d 7b04 	ldr.w	r7, [sp], #4
    357c:	4770      	bx	lr
	...

00003580 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    3580:	b580      	push	{r7, lr}
    3582:	b082      	sub	sp, #8
    3584:	af00      	add	r7, sp, #0
    3586:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    3588:	2101      	movs	r1, #1
    358a:	4838      	ldr	r0, [pc, #224]	; (366c <_ext_irq_init+0xec>)
    358c:	4b38      	ldr	r3, [pc, #224]	; (3670 <_ext_irq_init+0xf0>)
    358e:	4798      	blx	r3
    3590:	4603      	mov	r3, r0
    3592:	f083 0301 	eor.w	r3, r3, #1
    3596:	b2db      	uxtb	r3, r3
    3598:	2b00      	cmp	r3, #0
    359a:	d011      	beq.n	35c0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    359c:	2102      	movs	r1, #2
    359e:	4833      	ldr	r0, [pc, #204]	; (366c <_ext_irq_init+0xec>)
    35a0:	4b34      	ldr	r3, [pc, #208]	; (3674 <_ext_irq_init+0xf4>)
    35a2:	4798      	blx	r3
    35a4:	4603      	mov	r3, r0
    35a6:	2b00      	cmp	r3, #0
    35a8:	d006      	beq.n	35b8 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    35aa:	4830      	ldr	r0, [pc, #192]	; (366c <_ext_irq_init+0xec>)
    35ac:	4b32      	ldr	r3, [pc, #200]	; (3678 <_ext_irq_init+0xf8>)
    35ae:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    35b0:	2102      	movs	r1, #2
    35b2:	482e      	ldr	r0, [pc, #184]	; (366c <_ext_irq_init+0xec>)
    35b4:	4b31      	ldr	r3, [pc, #196]	; (367c <_ext_irq_init+0xfc>)
    35b6:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    35b8:	2101      	movs	r1, #1
    35ba:	482c      	ldr	r0, [pc, #176]	; (366c <_ext_irq_init+0xec>)
    35bc:	4b30      	ldr	r3, [pc, #192]	; (3680 <_ext_irq_init+0x100>)
    35be:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    35c0:	2101      	movs	r1, #1
    35c2:	482a      	ldr	r0, [pc, #168]	; (366c <_ext_irq_init+0xec>)
    35c4:	4b2d      	ldr	r3, [pc, #180]	; (367c <_ext_irq_init+0xfc>)
    35c6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    35c8:	2100      	movs	r1, #0
    35ca:	4828      	ldr	r0, [pc, #160]	; (366c <_ext_irq_init+0xec>)
    35cc:	4b2d      	ldr	r3, [pc, #180]	; (3684 <_ext_irq_init+0x104>)
    35ce:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    35d0:	2100      	movs	r1, #0
    35d2:	4826      	ldr	r0, [pc, #152]	; (366c <_ext_irq_init+0xec>)
    35d4:	4b2c      	ldr	r3, [pc, #176]	; (3688 <_ext_irq_init+0x108>)
    35d6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    35d8:	2100      	movs	r1, #0
    35da:	4824      	ldr	r0, [pc, #144]	; (366c <_ext_irq_init+0xec>)
    35dc:	4b2b      	ldr	r3, [pc, #172]	; (368c <_ext_irq_init+0x10c>)
    35de:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    35e0:	2100      	movs	r1, #0
    35e2:	4822      	ldr	r0, [pc, #136]	; (366c <_ext_irq_init+0xec>)
    35e4:	4b2a      	ldr	r3, [pc, #168]	; (3690 <_ext_irq_init+0x110>)
    35e6:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    35e8:	2100      	movs	r1, #0
    35ea:	4820      	ldr	r0, [pc, #128]	; (366c <_ext_irq_init+0xec>)
    35ec:	4b29      	ldr	r3, [pc, #164]	; (3694 <_ext_irq_init+0x114>)
    35ee:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    35f0:	2100      	movs	r1, #0
    35f2:	481e      	ldr	r0, [pc, #120]	; (366c <_ext_irq_init+0xec>)
    35f4:	4b28      	ldr	r3, [pc, #160]	; (3698 <_ext_irq_init+0x118>)
    35f6:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    35f8:	2200      	movs	r2, #0
    35fa:	2100      	movs	r1, #0
    35fc:	481b      	ldr	r0, [pc, #108]	; (366c <_ext_irq_init+0xec>)
    35fe:	4b27      	ldr	r3, [pc, #156]	; (369c <_ext_irq_init+0x11c>)
    3600:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3602:	2200      	movs	r2, #0
    3604:	2101      	movs	r1, #1
    3606:	4819      	ldr	r0, [pc, #100]	; (366c <_ext_irq_init+0xec>)
    3608:	4b24      	ldr	r3, [pc, #144]	; (369c <_ext_irq_init+0x11c>)
    360a:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    360c:	4817      	ldr	r0, [pc, #92]	; (366c <_ext_irq_init+0xec>)
    360e:	4b24      	ldr	r3, [pc, #144]	; (36a0 <_ext_irq_init+0x120>)
    3610:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_10_IRQn);
    3612:	2016      	movs	r0, #22
    3614:	4b23      	ldr	r3, [pc, #140]	; (36a4 <_ext_irq_init+0x124>)
    3616:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_10_IRQn);
    3618:	2016      	movs	r0, #22
    361a:	4b23      	ldr	r3, [pc, #140]	; (36a8 <_ext_irq_init+0x128>)
    361c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_10_IRQn);
    361e:	2016      	movs	r0, #22
    3620:	4b22      	ldr	r3, [pc, #136]	; (36ac <_ext_irq_init+0x12c>)
    3622:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_11_IRQn);
    3624:	2017      	movs	r0, #23
    3626:	4b1f      	ldr	r3, [pc, #124]	; (36a4 <_ext_irq_init+0x124>)
    3628:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_11_IRQn);
    362a:	2017      	movs	r0, #23
    362c:	4b1e      	ldr	r3, [pc, #120]	; (36a8 <_ext_irq_init+0x128>)
    362e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_11_IRQn);
    3630:	2017      	movs	r0, #23
    3632:	4b1e      	ldr	r3, [pc, #120]	; (36ac <_ext_irq_init+0x12c>)
    3634:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_12_IRQn);
    3636:	2018      	movs	r0, #24
    3638:	4b1a      	ldr	r3, [pc, #104]	; (36a4 <_ext_irq_init+0x124>)
    363a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_12_IRQn);
    363c:	2018      	movs	r0, #24
    363e:	4b1a      	ldr	r3, [pc, #104]	; (36a8 <_ext_irq_init+0x128>)
    3640:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_12_IRQn);
    3642:	2018      	movs	r0, #24
    3644:	4b19      	ldr	r3, [pc, #100]	; (36ac <_ext_irq_init+0x12c>)
    3646:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_13_IRQn);
    3648:	2019      	movs	r0, #25
    364a:	4b16      	ldr	r3, [pc, #88]	; (36a4 <_ext_irq_init+0x124>)
    364c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_13_IRQn);
    364e:	2019      	movs	r0, #25
    3650:	4b15      	ldr	r3, [pc, #84]	; (36a8 <_ext_irq_init+0x128>)
    3652:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_13_IRQn);
    3654:	2019      	movs	r0, #25
    3656:	4b15      	ldr	r3, [pc, #84]	; (36ac <_ext_irq_init+0x12c>)
    3658:	4798      	blx	r3

	callback = cb;
    365a:	4a15      	ldr	r2, [pc, #84]	; (36b0 <_ext_irq_init+0x130>)
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    3660:	2300      	movs	r3, #0
}
    3662:	4618      	mov	r0, r3
    3664:	3708      	adds	r7, #8
    3666:	46bd      	mov	sp, r7
    3668:	bd80      	pop	{r7, pc}
    366a:	bf00      	nop
    366c:	40002800 	.word	0x40002800
    3670:	00003379 	.word	0x00003379
    3674:	00003471 	.word	0x00003471
    3678:	00003401 	.word	0x00003401
    367c:	00003355 	.word	0x00003355
    3680:	000034a1 	.word	0x000034a1
    3684:	0000342d 	.word	0x0000342d
    3688:	000034c9 	.word	0x000034c9
    368c:	000034e7 	.word	0x000034e7
    3690:	00003503 	.word	0x00003503
    3694:	00003547 	.word	0x00003547
    3698:	00003563 	.word	0x00003563
    369c:	0000351f 	.word	0x0000351f
    36a0:	000033d5 	.word	0x000033d5
    36a4:	000032d5 	.word	0x000032d5
    36a8:	00003319 	.word	0x00003319
    36ac:	00003299 	.word	0x00003299
    36b0:	200003f0 	.word	0x200003f0

000036b4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    36b4:	b580      	push	{r7, lr}
    36b6:	b084      	sub	sp, #16
    36b8:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    36ba:	4841      	ldr	r0, [pc, #260]	; (37c0 <_ext_irq_handler+0x10c>)
    36bc:	4b41      	ldr	r3, [pc, #260]	; (37c4 <_ext_irq_handler+0x110>)
    36be:	4798      	blx	r3
    36c0:	4603      	mov	r3, r0
    36c2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    36c4:	f04f 33ff 	mov.w	r3, #4294967295
    36c8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    36ca:	683b      	ldr	r3, [r7, #0]
    36cc:	4619      	mov	r1, r3
    36ce:	483c      	ldr	r0, [pc, #240]	; (37c0 <_ext_irq_handler+0x10c>)
    36d0:	4b3d      	ldr	r3, [pc, #244]	; (37c8 <_ext_irq_handler+0x114>)
    36d2:	4798      	blx	r3

	ASSERT(callback);
    36d4:	4b3d      	ldr	r3, [pc, #244]	; (37cc <_ext_irq_handler+0x118>)
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	2b00      	cmp	r3, #0
    36da:	bf14      	ite	ne
    36dc:	2301      	movne	r3, #1
    36de:	2300      	moveq	r3, #0
    36e0:	b2db      	uxtb	r3, r3
    36e2:	22f4      	movs	r2, #244	; 0xf4
    36e4:	493a      	ldr	r1, [pc, #232]	; (37d0 <_ext_irq_handler+0x11c>)
    36e6:	4618      	mov	r0, r3
    36e8:	4b3a      	ldr	r3, [pc, #232]	; (37d4 <_ext_irq_handler+0x120>)
    36ea:	4798      	blx	r3

	while (flags) {
    36ec:	e060      	b.n	37b0 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    36ee:	683b      	ldr	r3, [r7, #0]
    36f0:	4618      	mov	r0, r3
    36f2:	4b39      	ldr	r3, [pc, #228]	; (37d8 <_ext_irq_handler+0x124>)
    36f4:	4798      	blx	r3
    36f6:	4603      	mov	r3, r0
    36f8:	b2db      	uxtb	r3, r3
    36fa:	3b01      	subs	r3, #1
    36fc:	b2db      	uxtb	r3, r3
    36fe:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3700:	e047      	b.n	3792 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3702:	2300      	movs	r3, #0
    3704:	71fb      	strb	r3, [r7, #7]
    3706:	2304      	movs	r3, #4
    3708:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    370a:	e024      	b.n	3756 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    370c:	79ba      	ldrb	r2, [r7, #6]
    370e:	79fb      	ldrb	r3, [r7, #7]
    3710:	4413      	add	r3, r2
    3712:	105b      	asrs	r3, r3, #1
    3714:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    3716:	797b      	ldrb	r3, [r7, #5]
    3718:	4a30      	ldr	r2, [pc, #192]	; (37dc <_ext_irq_handler+0x128>)
    371a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    371e:	461a      	mov	r2, r3
    3720:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3724:	429a      	cmp	r2, r3
    3726:	d106      	bne.n	3736 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    3728:	797b      	ldrb	r3, [r7, #5]
    372a:	4a2c      	ldr	r2, [pc, #176]	; (37dc <_ext_irq_handler+0x128>)
    372c:	00db      	lsls	r3, r3, #3
    372e:	4413      	add	r3, r2
    3730:	685b      	ldr	r3, [r3, #4]
    3732:	60bb      	str	r3, [r7, #8]
					break;
    3734:	e013      	b.n	375e <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    3736:	797b      	ldrb	r3, [r7, #5]
    3738:	4a28      	ldr	r2, [pc, #160]	; (37dc <_ext_irq_handler+0x128>)
    373a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    373e:	461a      	mov	r2, r3
    3740:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3744:	429a      	cmp	r2, r3
    3746:	da03      	bge.n	3750 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    3748:	797b      	ldrb	r3, [r7, #5]
    374a:	3301      	adds	r3, #1
    374c:	71fb      	strb	r3, [r7, #7]
    374e:	e002      	b.n	3756 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    3750:	797b      	ldrb	r3, [r7, #5]
    3752:	3b01      	subs	r3, #1
    3754:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    3756:	79ba      	ldrb	r2, [r7, #6]
    3758:	79fb      	ldrb	r3, [r7, #7]
    375a:	429a      	cmp	r2, r3
    375c:	d2d6      	bcs.n	370c <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    375e:	68bb      	ldr	r3, [r7, #8]
    3760:	f1b3 3fff 	cmp.w	r3, #4294967295
    3764:	d003      	beq.n	376e <_ext_irq_handler+0xba>
				callback(pin);
    3766:	4b19      	ldr	r3, [pc, #100]	; (37cc <_ext_irq_handler+0x118>)
    3768:	681b      	ldr	r3, [r3, #0]
    376a:	68b8      	ldr	r0, [r7, #8]
    376c:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3772:	2201      	movs	r2, #1
    3774:	fa02 f303 	lsl.w	r3, r2, r3
    3778:	43da      	mvns	r2, r3
    377a:	683b      	ldr	r3, [r7, #0]
    377c:	4013      	ands	r3, r2
    377e:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    3780:	683b      	ldr	r3, [r7, #0]
    3782:	4618      	mov	r0, r3
    3784:	4b14      	ldr	r3, [pc, #80]	; (37d8 <_ext_irq_handler+0x124>)
    3786:	4798      	blx	r3
    3788:	4603      	mov	r3, r0
    378a:	b2db      	uxtb	r3, r3
    378c:	3b01      	subs	r3, #1
    378e:	b2db      	uxtb	r3, r3
    3790:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3792:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3796:	f1b3 3fff 	cmp.w	r3, #4294967295
    379a:	d1b2      	bne.n	3702 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    379c:	4808      	ldr	r0, [pc, #32]	; (37c0 <_ext_irq_handler+0x10c>)
    379e:	4b09      	ldr	r3, [pc, #36]	; (37c4 <_ext_irq_handler+0x110>)
    37a0:	4798      	blx	r3
    37a2:	4603      	mov	r3, r0
    37a4:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    37a6:	683b      	ldr	r3, [r7, #0]
    37a8:	4619      	mov	r1, r3
    37aa:	4805      	ldr	r0, [pc, #20]	; (37c0 <_ext_irq_handler+0x10c>)
    37ac:	4b06      	ldr	r3, [pc, #24]	; (37c8 <_ext_irq_handler+0x114>)
    37ae:	4798      	blx	r3
	while (flags) {
    37b0:	683b      	ldr	r3, [r7, #0]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d19b      	bne.n	36ee <_ext_irq_handler+0x3a>
	}
}
    37b6:	bf00      	nop
    37b8:	3710      	adds	r7, #16
    37ba:	46bd      	mov	sp, r7
    37bc:	bd80      	pop	{r7, pc}
    37be:	bf00      	nop
    37c0:	40002800 	.word	0x40002800
    37c4:	000033a1 	.word	0x000033a1
    37c8:	000033b9 	.word	0x000033b9
    37cc:	200003f0 	.word	0x200003f0
    37d0:	00009018 	.word	0x00009018
    37d4:	00002249 	.word	0x00002249
    37d8:	00008d3d 	.word	0x00008d3d
    37dc:	00008ff8 	.word	0x00008ff8

000037e0 <EIC_10_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_10_Handler(void)
{
    37e0:	b580      	push	{r7, lr}
    37e2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    37e4:	4b01      	ldr	r3, [pc, #4]	; (37ec <EIC_10_Handler+0xc>)
    37e6:	4798      	blx	r3
} /**
    37e8:	bf00      	nop
    37ea:	bd80      	pop	{r7, pc}
    37ec:	000036b5 	.word	0x000036b5

000037f0 <EIC_11_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_11_Handler(void)
{
    37f0:	b580      	push	{r7, lr}
    37f2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    37f4:	4b01      	ldr	r3, [pc, #4]	; (37fc <EIC_11_Handler+0xc>)
    37f6:	4798      	blx	r3
} /**
    37f8:	bf00      	nop
    37fa:	bd80      	pop	{r7, pc}
    37fc:	000036b5 	.word	0x000036b5

00003800 <EIC_12_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_12_Handler(void)
{
    3800:	b580      	push	{r7, lr}
    3802:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3804:	4b01      	ldr	r3, [pc, #4]	; (380c <EIC_12_Handler+0xc>)
    3806:	4798      	blx	r3
} /**
    3808:	bf00      	nop
    380a:	bd80      	pop	{r7, pc}
    380c:	000036b5 	.word	0x000036b5

00003810 <EIC_13_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_13_Handler(void)
{
    3810:	b580      	push	{r7, lr}
    3812:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    3814:	4b01      	ldr	r3, [pc, #4]	; (381c <EIC_13_Handler+0xc>)
    3816:	4798      	blx	r3
}
    3818:	bf00      	nop
    381a:	bd80      	pop	{r7, pc}
    381c:	000036b5 	.word	0x000036b5

00003820 <hri_gclk_wait_for_sync>:
{
    3820:	b480      	push	{r7}
    3822:	b083      	sub	sp, #12
    3824:	af00      	add	r7, sp, #0
    3826:	6078      	str	r0, [r7, #4]
    3828:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    382a:	bf00      	nop
    382c:	687b      	ldr	r3, [r7, #4]
    382e:	685a      	ldr	r2, [r3, #4]
    3830:	683b      	ldr	r3, [r7, #0]
    3832:	4013      	ands	r3, r2
    3834:	2b00      	cmp	r3, #0
    3836:	d1f9      	bne.n	382c <hri_gclk_wait_for_sync+0xc>
}
    3838:	bf00      	nop
    383a:	370c      	adds	r7, #12
    383c:	46bd      	mov	sp, r7
    383e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3842:	4770      	bx	lr

00003844 <hri_gclk_write_GENCTRL_reg>:
{
    3844:	b580      	push	{r7, lr}
    3846:	b084      	sub	sp, #16
    3848:	af00      	add	r7, sp, #0
    384a:	60f8      	str	r0, [r7, #12]
    384c:	460b      	mov	r3, r1
    384e:	607a      	str	r2, [r7, #4]
    3850:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3852:	7afa      	ldrb	r2, [r7, #11]
    3854:	68fb      	ldr	r3, [r7, #12]
    3856:	3208      	adds	r2, #8
    3858:	6879      	ldr	r1, [r7, #4]
    385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    385e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    3862:	68f8      	ldr	r0, [r7, #12]
    3864:	4b02      	ldr	r3, [pc, #8]	; (3870 <hri_gclk_write_GENCTRL_reg+0x2c>)
    3866:	4798      	blx	r3
}
    3868:	bf00      	nop
    386a:	3710      	adds	r7, #16
    386c:	46bd      	mov	sp, r7
    386e:	bd80      	pop	{r7, pc}
    3870:	00003821 	.word	0x00003821

00003874 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    3874:	b580      	push	{r7, lr}
    3876:	b082      	sub	sp, #8
    3878:	af00      	add	r7, sp, #0
    387a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    387c:	687b      	ldr	r3, [r7, #4]
    387e:	f003 0301 	and.w	r3, r3, #1
    3882:	2b00      	cmp	r3, #0
    3884:	d004      	beq.n	3890 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    3886:	4a13      	ldr	r2, [pc, #76]	; (38d4 <_gclk_init_generators_by_fref+0x60>)
    3888:	2100      	movs	r1, #0
    388a:	4813      	ldr	r0, [pc, #76]	; (38d8 <_gclk_init_generators_by_fref+0x64>)
    388c:	4b13      	ldr	r3, [pc, #76]	; (38dc <_gclk_init_generators_by_fref+0x68>)
    388e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	f003 0302 	and.w	r3, r3, #2
    3896:	2b00      	cmp	r3, #0
    3898:	d004      	beq.n	38a4 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    389a:	4a0e      	ldr	r2, [pc, #56]	; (38d4 <_gclk_init_generators_by_fref+0x60>)
    389c:	2101      	movs	r1, #1
    389e:	480e      	ldr	r0, [pc, #56]	; (38d8 <_gclk_init_generators_by_fref+0x64>)
    38a0:	4b0e      	ldr	r3, [pc, #56]	; (38dc <_gclk_init_generators_by_fref+0x68>)
    38a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	f003 0304 	and.w	r3, r3, #4
    38aa:	2b00      	cmp	r3, #0
    38ac:	d004      	beq.n	38b8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    38ae:	4a0c      	ldr	r2, [pc, #48]	; (38e0 <_gclk_init_generators_by_fref+0x6c>)
    38b0:	2102      	movs	r1, #2
    38b2:	4809      	ldr	r0, [pc, #36]	; (38d8 <_gclk_init_generators_by_fref+0x64>)
    38b4:	4b09      	ldr	r3, [pc, #36]	; (38dc <_gclk_init_generators_by_fref+0x68>)
    38b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	f003 0308 	and.w	r3, r3, #8
    38be:	2b00      	cmp	r3, #0
    38c0:	d004      	beq.n	38cc <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    38c2:	4a08      	ldr	r2, [pc, #32]	; (38e4 <_gclk_init_generators_by_fref+0x70>)
    38c4:	2103      	movs	r1, #3
    38c6:	4804      	ldr	r0, [pc, #16]	; (38d8 <_gclk_init_generators_by_fref+0x64>)
    38c8:	4b04      	ldr	r3, [pc, #16]	; (38dc <_gclk_init_generators_by_fref+0x68>)
    38ca:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    38cc:	bf00      	nop
    38ce:	3708      	adds	r7, #8
    38d0:	46bd      	mov	sp, r7
    38d2:	bd80      	pop	{r7, pc}
    38d4:	00020b06 	.word	0x00020b06
    38d8:	40001c00 	.word	0x40001c00
    38dc:	00003845 	.word	0x00003845
    38e0:	00012b04 	.word	0x00012b04
    38e4:	00012b06 	.word	0x00012b06

000038e8 <hri_mclk_write_CPUDIV_reg>:
{
    38e8:	b480      	push	{r7}
    38ea:	b083      	sub	sp, #12
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
    38f0:	460b      	mov	r3, r1
    38f2:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	78fa      	ldrb	r2, [r7, #3]
    38f8:	715a      	strb	r2, [r3, #5]
}
    38fa:	bf00      	nop
    38fc:	370c      	adds	r7, #12
    38fe:	46bd      	mov	sp, r7
    3900:	f85d 7b04 	ldr.w	r7, [sp], #4
    3904:	4770      	bx	lr
	...

00003908 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    3908:	b580      	push	{r7, lr}
    390a:	b082      	sub	sp, #8
    390c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    390e:	4b05      	ldr	r3, [pc, #20]	; (3924 <_mclk_init+0x1c>)
    3910:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    3912:	2101      	movs	r1, #1
    3914:	6878      	ldr	r0, [r7, #4]
    3916:	4b04      	ldr	r3, [pc, #16]	; (3928 <_mclk_init+0x20>)
    3918:	4798      	blx	r3
}
    391a:	bf00      	nop
    391c:	3708      	adds	r7, #8
    391e:	46bd      	mov	sp, r7
    3920:	bd80      	pop	{r7, pc}
    3922:	bf00      	nop
    3924:	40000800 	.word	0x40000800
    3928:	000038e9 	.word	0x000038e9

0000392c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    392c:	b480      	push	{r7}
    392e:	b083      	sub	sp, #12
    3930:	af00      	add	r7, sp, #0
    3932:	6078      	str	r0, [r7, #4]
    3934:	460b      	mov	r3, r1
    3936:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	78fa      	ldrb	r2, [r7, #3]
    393c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    393e:	bf00      	nop
    3940:	370c      	adds	r7, #12
    3942:	46bd      	mov	sp, r7
    3944:	f85d 7b04 	ldr.w	r7, [sp], #4
    3948:	4770      	bx	lr

0000394a <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    394a:	b480      	push	{r7}
    394c:	b085      	sub	sp, #20
    394e:	af00      	add	r7, sp, #0
    3950:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	69db      	ldr	r3, [r3, #28]
    3956:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	0a1b      	lsrs	r3, r3, #8
    395c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3960:	60fb      	str	r3, [r7, #12]
	return tmp;
    3962:	68fb      	ldr	r3, [r7, #12]
}
    3964:	4618      	mov	r0, r3
    3966:	3714      	adds	r7, #20
    3968:	46bd      	mov	sp, r7
    396a:	f85d 7b04 	ldr.w	r7, [sp], #4
    396e:	4770      	bx	lr

00003970 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    3970:	b480      	push	{r7}
    3972:	b083      	sub	sp, #12
    3974:	af00      	add	r7, sp, #0
    3976:	6078      	str	r0, [r7, #4]
    3978:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    397a:	687b      	ldr	r3, [r7, #4]
    397c:	683a      	ldr	r2, [r7, #0]
    397e:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    3980:	bf00      	nop
    3982:	370c      	adds	r7, #12
    3984:	46bd      	mov	sp, r7
    3986:	f85d 7b04 	ldr.w	r7, [sp], #4
    398a:	4770      	bx	lr

0000398c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    398c:	b580      	push	{r7, lr}
    398e:	b082      	sub	sp, #8
    3990:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    3992:	4b0c      	ldr	r3, [pc, #48]	; (39c4 <_osc32kctrl_init_sources+0x38>)
    3994:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    3996:	2300      	movs	r3, #0
    3998:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    399a:	6878      	ldr	r0, [r7, #4]
    399c:	4b0a      	ldr	r3, [pc, #40]	; (39c8 <_osc32kctrl_init_sources+0x3c>)
    399e:	4798      	blx	r3
    39a0:	4603      	mov	r3, r0
    39a2:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    39a4:	887b      	ldrh	r3, [r7, #2]
    39a6:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    39a8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    39ac:	4619      	mov	r1, r3
    39ae:	6878      	ldr	r0, [r7, #4]
    39b0:	4b06      	ldr	r3, [pc, #24]	; (39cc <_osc32kctrl_init_sources+0x40>)
    39b2:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    39b4:	2100      	movs	r1, #0
    39b6:	6878      	ldr	r0, [r7, #4]
    39b8:	4b05      	ldr	r3, [pc, #20]	; (39d0 <_osc32kctrl_init_sources+0x44>)
    39ba:	4798      	blx	r3
	(void)calib;
}
    39bc:	bf00      	nop
    39be:	3708      	adds	r7, #8
    39c0:	46bd      	mov	sp, r7
    39c2:	bd80      	pop	{r7, pc}
    39c4:	40001400 	.word	0x40001400
    39c8:	0000394b 	.word	0x0000394b
    39cc:	00003971 	.word	0x00003971
    39d0:	0000392d 	.word	0x0000392d

000039d4 <hri_gclk_wait_for_sync>:
{
    39d4:	b480      	push	{r7}
    39d6:	b083      	sub	sp, #12
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    39de:	bf00      	nop
    39e0:	687b      	ldr	r3, [r7, #4]
    39e2:	685a      	ldr	r2, [r3, #4]
    39e4:	683b      	ldr	r3, [r7, #0]
    39e6:	4013      	ands	r3, r2
    39e8:	2b00      	cmp	r3, #0
    39ea:	d1f9      	bne.n	39e0 <hri_gclk_wait_for_sync+0xc>
}
    39ec:	bf00      	nop
    39ee:	370c      	adds	r7, #12
    39f0:	46bd      	mov	sp, r7
    39f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f6:	4770      	bx	lr

000039f8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    39f8:	b480      	push	{r7}
    39fa:	b083      	sub	sp, #12
    39fc:	af00      	add	r7, sp, #0
    39fe:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	685b      	ldr	r3, [r3, #4]
    3a04:	089b      	lsrs	r3, r3, #2
    3a06:	f003 0301 	and.w	r3, r3, #1
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	bf14      	ite	ne
    3a0e:	2301      	movne	r3, #1
    3a10:	2300      	moveq	r3, #0
    3a12:	b2db      	uxtb	r3, r3
}
    3a14:	4618      	mov	r0, r3
    3a16:	370c      	adds	r7, #12
    3a18:	46bd      	mov	sp, r7
    3a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a1e:	4770      	bx	lr

00003a20 <hri_gclk_read_SYNCBUSY_reg>:
{
    3a20:	b480      	push	{r7}
    3a22:	b083      	sub	sp, #12
    3a24:	af00      	add	r7, sp, #0
    3a26:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	685b      	ldr	r3, [r3, #4]
}
    3a2c:	4618      	mov	r0, r3
    3a2e:	370c      	adds	r7, #12
    3a30:	46bd      	mov	sp, r7
    3a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a36:	4770      	bx	lr

00003a38 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	b086      	sub	sp, #24
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	60f8      	str	r0, [r7, #12]
    3a40:	460b      	mov	r3, r1
    3a42:	607a      	str	r2, [r7, #4]
    3a44:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3a46:	7afa      	ldrb	r2, [r7, #11]
    3a48:	68fb      	ldr	r3, [r7, #12]
    3a4a:	3208      	adds	r2, #8
    3a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a50:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3a52:	697b      	ldr	r3, [r7, #20]
    3a54:	f023 030f 	bic.w	r3, r3, #15
    3a58:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    3a5a:	687b      	ldr	r3, [r7, #4]
    3a5c:	f003 030f 	and.w	r3, r3, #15
    3a60:	697a      	ldr	r2, [r7, #20]
    3a62:	4313      	orrs	r3, r2
    3a64:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3a66:	7afa      	ldrb	r2, [r7, #11]
    3a68:	68fb      	ldr	r3, [r7, #12]
    3a6a:	3208      	adds	r2, #8
    3a6c:	6979      	ldr	r1, [r7, #20]
    3a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    3a72:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    3a76:	68f8      	ldr	r0, [r7, #12]
    3a78:	4b02      	ldr	r3, [pc, #8]	; (3a84 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    3a7a:	4798      	blx	r3
}
    3a7c:	bf00      	nop
    3a7e:	3718      	adds	r7, #24
    3a80:	46bd      	mov	sp, r7
    3a82:	bd80      	pop	{r7, pc}
    3a84:	000039d5 	.word	0x000039d5

00003a88 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    3a88:	b480      	push	{r7}
    3a8a:	b083      	sub	sp, #12
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	691b      	ldr	r3, [r3, #16]
    3a94:	0a1b      	lsrs	r3, r3, #8
    3a96:	f003 0301 	and.w	r3, r3, #1
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	bf14      	ite	ne
    3a9e:	2301      	movne	r3, #1
    3aa0:	2300      	moveq	r3, #0
    3aa2:	b2db      	uxtb	r3, r3
}
    3aa4:	4618      	mov	r0, r3
    3aa6:	370c      	adds	r7, #12
    3aa8:	46bd      	mov	sp, r7
    3aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aae:	4770      	bx	lr

00003ab0 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    3ab0:	b480      	push	{r7}
    3ab2:	b085      	sub	sp, #20
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	6078      	str	r0, [r7, #4]
    3ab8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	691b      	ldr	r3, [r3, #16]
    3abe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3ac0:	68fa      	ldr	r2, [r7, #12]
    3ac2:	683b      	ldr	r3, [r7, #0]
    3ac4:	4013      	ands	r3, r2
    3ac6:	60fb      	str	r3, [r7, #12]
	return tmp;
    3ac8:	68fb      	ldr	r3, [r7, #12]
}
    3aca:	4618      	mov	r0, r3
    3acc:	3714      	adds	r7, #20
    3ace:	46bd      	mov	sp, r7
    3ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad4:	4770      	bx	lr

00003ad6 <hri_oscctrl_set_DFLLCTRLA_ONDEMAND_bit>:
	((Oscctrl *)hw)->DFLLCTRLA.reg ^= OSCCTRL_DFLLCTRLA_RUNSTDBY;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_DFLLCTRLA_ONDEMAND_bit(const void *const hw)
{
    3ad6:	b480      	push	{r7}
    3ad8:	b083      	sub	sp, #12
    3ada:	af00      	add	r7, sp, #0
    3adc:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ONDEMAND;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	7f1b      	ldrb	r3, [r3, #28]
    3ae2:	b2db      	uxtb	r3, r3
    3ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3ae8:	b2da      	uxtb	r2, r3
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3aee:	bf00      	nop
    3af0:	370c      	adds	r7, #12
    3af2:	46bd      	mov	sp, r7
    3af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3af8:	4770      	bx	lr

00003afa <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    3afa:	b480      	push	{r7}
    3afc:	b083      	sub	sp, #12
    3afe:	af00      	add	r7, sp, #0
    3b00:	6078      	str	r0, [r7, #4]
    3b02:	460b      	mov	r3, r1
    3b04:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	78fa      	ldrb	r2, [r7, #3]
    3b0a:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3b0c:	bf00      	nop
    3b0e:	370c      	adds	r7, #12
    3b10:	46bd      	mov	sp, r7
    3b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b16:	4770      	bx	lr

00003b18 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    3b18:	b480      	push	{r7}
    3b1a:	b085      	sub	sp, #20
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3b20:	687b      	ldr	r3, [r7, #4]
    3b22:	f893 3020 	ldrb.w	r3, [r3, #32]
    3b26:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    3b28:	7bfb      	ldrb	r3, [r7, #15]
    3b2a:	f003 0301 	and.w	r3, r3, #1
    3b2e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    3b30:	7bfb      	ldrb	r3, [r7, #15]
    3b32:	2b00      	cmp	r3, #0
    3b34:	bf14      	ite	ne
    3b36:	2301      	movne	r3, #1
    3b38:	2300      	moveq	r3, #0
    3b3a:	b2db      	uxtb	r3, r3
}
    3b3c:	4618      	mov	r0, r3
    3b3e:	3714      	adds	r7, #20
    3b40:	46bd      	mov	sp, r7
    3b42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b46:	4770      	bx	lr

00003b48 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    3b48:	b480      	push	{r7}
    3b4a:	b083      	sub	sp, #12
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	6078      	str	r0, [r7, #4]
    3b50:	460b      	mov	r3, r1
    3b52:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3b54:	687b      	ldr	r3, [r7, #4]
    3b56:	78fa      	ldrb	r2, [r7, #3]
    3b58:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3b5c:	bf00      	nop
    3b5e:	370c      	adds	r7, #12
    3b60:	46bd      	mov	sp, r7
    3b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b66:	4770      	bx	lr

00003b68 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    3b68:	b480      	push	{r7}
    3b6a:	b083      	sub	sp, #12
    3b6c:	af00      	add	r7, sp, #0
    3b6e:	6078      	str	r0, [r7, #4]
    3b70:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	683a      	ldr	r2, [r7, #0]
    3b76:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3b78:	bf00      	nop
    3b7a:	370c      	adds	r7, #12
    3b7c:	46bd      	mov	sp, r7
    3b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b82:	4770      	bx	lr

00003b84 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    3b84:	b480      	push	{r7}
    3b86:	b083      	sub	sp, #12
    3b88:	af00      	add	r7, sp, #0
    3b8a:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    3b8c:	687b      	ldr	r3, [r7, #4]
    3b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    3b90:	4618      	mov	r0, r3
    3b92:	370c      	adds	r7, #12
    3b94:	46bd      	mov	sp, r7
    3b96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b9a:	4770      	bx	lr

00003b9c <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    3b9c:	b480      	push	{r7}
    3b9e:	b083      	sub	sp, #12
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	6078      	str	r0, [r7, #4]
    3ba4:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	683a      	ldr	r2, [r7, #0]
    3baa:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3bac:	bf00      	nop
    3bae:	370c      	adds	r7, #12
    3bb0:	46bd      	mov	sp, r7
    3bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bb6:	4770      	bx	lr

00003bb8 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    3bb8:	b480      	push	{r7}
    3bba:	b085      	sub	sp, #20
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    3bc6:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    3bc8:	7bfb      	ldrb	r3, [r7, #15]
    3bca:	085b      	lsrs	r3, r3, #1
    3bcc:	b2db      	uxtb	r3, r3
    3bce:	f003 0301 	and.w	r3, r3, #1
    3bd2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    3bd4:	7bfb      	ldrb	r3, [r7, #15]
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	bf14      	ite	ne
    3bda:	2301      	movne	r3, #1
    3bdc:	2300      	moveq	r3, #0
    3bde:	b2db      	uxtb	r3, r3
}
    3be0:	4618      	mov	r0, r3
    3be2:	3714      	adds	r7, #20
    3be4:	46bd      	mov	sp, r7
    3be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bea:	4770      	bx	lr

00003bec <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3bf4:	687b      	ldr	r3, [r7, #4]
    3bf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    3bfa:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    3bfc:	7bfb      	ldrb	r3, [r7, #15]
    3bfe:	089b      	lsrs	r3, r3, #2
    3c00:	b2db      	uxtb	r3, r3
    3c02:	f003 0301 	and.w	r3, r3, #1
    3c06:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    3c08:	7bfb      	ldrb	r3, [r7, #15]
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	bf14      	ite	ne
    3c0e:	2301      	movne	r3, #1
    3c10:	2300      	moveq	r3, #0
    3c12:	b2db      	uxtb	r3, r3
}
    3c14:	4618      	mov	r0, r3
    3c16:	3714      	adds	r7, #20
    3c18:	46bd      	mov	sp, r7
    3c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c1e:	4770      	bx	lr

00003c20 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    3c20:	b480      	push	{r7}
    3c22:	b085      	sub	sp, #20
    3c24:	af00      	add	r7, sp, #0
    3c26:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    3c2e:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    3c30:	7bfb      	ldrb	r3, [r7, #15]
    3c32:	08db      	lsrs	r3, r3, #3
    3c34:	b2db      	uxtb	r3, r3
    3c36:	f003 0301 	and.w	r3, r3, #1
    3c3a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    3c3c:	7bfb      	ldrb	r3, [r7, #15]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	bf14      	ite	ne
    3c42:	2301      	movne	r3, #1
    3c44:	2300      	moveq	r3, #0
    3c46:	b2db      	uxtb	r3, r3
}
    3c48:	4618      	mov	r0, r3
    3c4a:	3714      	adds	r7, #20
    3c4c:	46bd      	mov	sp, r7
    3c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c52:	4770      	bx	lr

00003c54 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    3c54:	b480      	push	{r7}
    3c56:	b085      	sub	sp, #20
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3c5c:	687b      	ldr	r3, [r7, #4]
    3c5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    3c62:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    3c64:	7bfb      	ldrb	r3, [r7, #15]
    3c66:	091b      	lsrs	r3, r3, #4
    3c68:	b2db      	uxtb	r3, r3
    3c6a:	f003 0301 	and.w	r3, r3, #1
    3c6e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    3c70:	7bfb      	ldrb	r3, [r7, #15]
    3c72:	2b00      	cmp	r3, #0
    3c74:	bf14      	ite	ne
    3c76:	2301      	movne	r3, #1
    3c78:	2300      	moveq	r3, #0
    3c7a:	b2db      	uxtb	r3, r3
}
    3c7c:	4618      	mov	r0, r3
    3c7e:	3714      	adds	r7, #20
    3c80:	46bd      	mov	sp, r7
    3c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c86:	4770      	bx	lr

00003c88 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    3c88:	b480      	push	{r7}
    3c8a:	b083      	sub	sp, #12
    3c8c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    3c8e:	4b04      	ldr	r3, [pc, #16]	; (3ca0 <_oscctrl_init_sources+0x18>)
    3c90:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    3c92:	bf00      	nop
    3c94:	370c      	adds	r7, #12
    3c96:	46bd      	mov	sp, r7
    3c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c9c:	4770      	bx	lr
    3c9e:	bf00      	nop
    3ca0:	40001000 	.word	0x40001000

00003ca4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b084      	sub	sp, #16
    3ca8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    3caa:	4b45      	ldr	r3, [pc, #276]	; (3dc0 <_oscctrl_init_referenced_generators+0x11c>)
    3cac:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    3cae:	2204      	movs	r2, #4
    3cb0:	2100      	movs	r1, #0
    3cb2:	4844      	ldr	r0, [pc, #272]	; (3dc4 <_oscctrl_init_referenced_generators+0x120>)
    3cb4:	4b44      	ldr	r3, [pc, #272]	; (3dc8 <_oscctrl_init_referenced_generators+0x124>)
    3cb6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    3cb8:	bf00      	nop
    3cba:	4842      	ldr	r0, [pc, #264]	; (3dc4 <_oscctrl_init_referenced_generators+0x120>)
    3cbc:	4b43      	ldr	r3, [pc, #268]	; (3dcc <_oscctrl_init_referenced_generators+0x128>)
    3cbe:	4798      	blx	r3
    3cc0:	4603      	mov	r3, r0
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d1f9      	bne.n	3cba <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    3cc6:	2100      	movs	r1, #0
    3cc8:	68f8      	ldr	r0, [r7, #12]
    3cca:	4b41      	ldr	r3, [pc, #260]	; (3dd0 <_oscctrl_init_referenced_generators+0x12c>)
    3ccc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    3cce:	4941      	ldr	r1, [pc, #260]	; (3dd4 <_oscctrl_init_referenced_generators+0x130>)
    3cd0:	68f8      	ldr	r0, [r7, #12]
    3cd2:	4b41      	ldr	r3, [pc, #260]	; (3dd8 <_oscctrl_init_referenced_generators+0x134>)
    3cd4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    3cd6:	bf00      	nop
    3cd8:	68f8      	ldr	r0, [r7, #12]
    3cda:	4b40      	ldr	r3, [pc, #256]	; (3ddc <_oscctrl_init_referenced_generators+0x138>)
    3cdc:	4798      	blx	r3
    3cde:	4603      	mov	r3, r0
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d1f9      	bne.n	3cd8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    3ce4:	2100      	movs	r1, #0
    3ce6:	68f8      	ldr	r0, [r7, #12]
    3ce8:	4b3d      	ldr	r3, [pc, #244]	; (3de0 <_oscctrl_init_referenced_generators+0x13c>)
    3cea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3cec:	bf00      	nop
    3cee:	68f8      	ldr	r0, [r7, #12]
    3cf0:	4b3c      	ldr	r3, [pc, #240]	; (3de4 <_oscctrl_init_referenced_generators+0x140>)
    3cf2:	4798      	blx	r3
    3cf4:	4603      	mov	r3, r0
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d1f9      	bne.n	3cee <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    3cfa:	2302      	movs	r3, #2
    3cfc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    3cfe:	7afb      	ldrb	r3, [r7, #11]
    3d00:	4619      	mov	r1, r3
    3d02:	68f8      	ldr	r0, [r7, #12]
    3d04:	4b32      	ldr	r3, [pc, #200]	; (3dd0 <_oscctrl_init_referenced_generators+0x12c>)
    3d06:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    3d08:	bf00      	nop
    3d0a:	68f8      	ldr	r0, [r7, #12]
    3d0c:	4b36      	ldr	r3, [pc, #216]	; (3de8 <_oscctrl_init_referenced_generators+0x144>)
    3d0e:	4798      	blx	r3
    3d10:	4603      	mov	r3, r0
    3d12:	2b00      	cmp	r3, #0
    3d14:	d1f9      	bne.n	3d0a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    3d16:	68f8      	ldr	r0, [r7, #12]
    3d18:	4b34      	ldr	r3, [pc, #208]	; (3dec <_oscctrl_init_referenced_generators+0x148>)
    3d1a:	4798      	blx	r3
    3d1c:	4603      	mov	r3, r0
    3d1e:	4619      	mov	r1, r3
    3d20:	68f8      	ldr	r0, [r7, #12]
    3d22:	4b33      	ldr	r3, [pc, #204]	; (3df0 <_oscctrl_init_referenced_generators+0x14c>)
    3d24:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    3d26:	bf00      	nop
    3d28:	68f8      	ldr	r0, [r7, #12]
    3d2a:	4b32      	ldr	r3, [pc, #200]	; (3df4 <_oscctrl_init_referenced_generators+0x150>)
    3d2c:	4798      	blx	r3
    3d2e:	4603      	mov	r3, r0
    3d30:	2b00      	cmp	r3, #0
    3d32:	d1f9      	bne.n	3d28 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    3d34:	2382      	movs	r3, #130	; 0x82
    3d36:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    3d38:	7afb      	ldrb	r3, [r7, #11]
    3d3a:	4619      	mov	r1, r3
    3d3c:	68f8      	ldr	r0, [r7, #12]
    3d3e:	4b28      	ldr	r3, [pc, #160]	; (3de0 <_oscctrl_init_referenced_generators+0x13c>)
    3d40:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3d42:	bf00      	nop
    3d44:	68f8      	ldr	r0, [r7, #12]
    3d46:	4b27      	ldr	r3, [pc, #156]	; (3de4 <_oscctrl_init_referenced_generators+0x140>)
    3d48:	4798      	blx	r3
    3d4a:	4603      	mov	r3, r0
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d1f9      	bne.n	3d44 <_oscctrl_init_referenced_generators+0xa0>
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    3d50:	68f8      	ldr	r0, [r7, #12]
    3d52:	4b29      	ldr	r3, [pc, #164]	; (3df8 <_oscctrl_init_referenced_generators+0x154>)
    3d54:	4798      	blx	r3
    3d56:	4603      	mov	r3, r0
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d00c      	beq.n	3d76 <_oscctrl_init_referenced_generators+0xd2>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    3d5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
    3d60:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    3d62:	bf00      	nop
    3d64:	6879      	ldr	r1, [r7, #4]
    3d66:	68f8      	ldr	r0, [r7, #12]
    3d68:	4b24      	ldr	r3, [pc, #144]	; (3dfc <_oscctrl_init_referenced_generators+0x158>)
    3d6a:	4798      	blx	r3
    3d6c:	4602      	mov	r2, r0
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	429a      	cmp	r2, r3
    3d72:	d1f7      	bne.n	3d64 <_oscctrl_init_referenced_generators+0xc0>
    3d74:	e009      	b.n	3d8a <_oscctrl_init_referenced_generators+0xe6>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    3d76:	bf00      	nop
    3d78:	68f8      	ldr	r0, [r7, #12]
    3d7a:	4b21      	ldr	r3, [pc, #132]	; (3e00 <_oscctrl_init_referenced_generators+0x15c>)
    3d7c:	4798      	blx	r3
    3d7e:	4603      	mov	r3, r0
    3d80:	f083 0301 	eor.w	r3, r3, #1
    3d84:	b2db      	uxtb	r3, r3
    3d86:	2b00      	cmp	r3, #0
    3d88:	d1f6      	bne.n	3d78 <_oscctrl_init_referenced_generators+0xd4>
			;
	}
#if CONF_DFLL_ONDEMAND == 1
	hri_oscctrl_set_DFLLCTRLA_ONDEMAND_bit(hw);
    3d8a:	68f8      	ldr	r0, [r7, #12]
    3d8c:	4b1d      	ldr	r3, [pc, #116]	; (3e04 <_oscctrl_init_referenced_generators+0x160>)
    3d8e:	4798      	blx	r3
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3d90:	bf00      	nop
    3d92:	480c      	ldr	r0, [pc, #48]	; (3dc4 <_oscctrl_init_referenced_generators+0x120>)
    3d94:	4b1c      	ldr	r3, [pc, #112]	; (3e08 <_oscctrl_init_referenced_generators+0x164>)
    3d96:	4798      	blx	r3
    3d98:	4603      	mov	r3, r0
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d1f9      	bne.n	3d92 <_oscctrl_init_referenced_generators+0xee>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    3d9e:	2206      	movs	r2, #6
    3da0:	2100      	movs	r1, #0
    3da2:	4808      	ldr	r0, [pc, #32]	; (3dc4 <_oscctrl_init_referenced_generators+0x120>)
    3da4:	4b08      	ldr	r3, [pc, #32]	; (3dc8 <_oscctrl_init_referenced_generators+0x124>)
    3da6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    3da8:	bf00      	nop
    3daa:	4806      	ldr	r0, [pc, #24]	; (3dc4 <_oscctrl_init_referenced_generators+0x120>)
    3dac:	4b07      	ldr	r3, [pc, #28]	; (3dcc <_oscctrl_init_referenced_generators+0x128>)
    3dae:	4798      	blx	r3
    3db0:	4603      	mov	r3, r0
    3db2:	2b00      	cmp	r3, #0
    3db4:	d1f9      	bne.n	3daa <_oscctrl_init_referenced_generators+0x106>
		;
#endif
	(void)hw;
}
    3db6:	bf00      	nop
    3db8:	3710      	adds	r7, #16
    3dba:	46bd      	mov	sp, r7
    3dbc:	bd80      	pop	{r7, pc}
    3dbe:	bf00      	nop
    3dc0:	40001000 	.word	0x40001000
    3dc4:	40001c00 	.word	0x40001c00
    3dc8:	00003a39 	.word	0x00003a39
    3dcc:	000039f9 	.word	0x000039f9
    3dd0:	00003afb 	.word	0x00003afb
    3dd4:	040102dc 	.word	0x040102dc
    3dd8:	00003b9d 	.word	0x00003b9d
    3ddc:	00003c55 	.word	0x00003c55
    3de0:	00003b49 	.word	0x00003b49
    3de4:	00003bed 	.word	0x00003bed
    3de8:	00003bb9 	.word	0x00003bb9
    3dec:	00003b85 	.word	0x00003b85
    3df0:	00003b69 	.word	0x00003b69
    3df4:	00003c21 	.word	0x00003c21
    3df8:	00003b19 	.word	0x00003b19
    3dfc:	00003ab1 	.word	0x00003ab1
    3e00:	00003a89 	.word	0x00003a89
    3e04:	00003ad7 	.word	0x00003ad7
    3e08:	00003a21 	.word	0x00003a21

00003e0c <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    3e0c:	b480      	push	{r7}
    3e0e:	b083      	sub	sp, #12
    3e10:	af00      	add	r7, sp, #0
    3e12:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	789b      	ldrb	r3, [r3, #2]
    3e18:	b2db      	uxtb	r3, r3
}
    3e1a:	4618      	mov	r0, r3
    3e1c:	370c      	adds	r7, #12
    3e1e:	46bd      	mov	sp, r7
    3e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e24:	4770      	bx	lr

00003e26 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    3e26:	b480      	push	{r7}
    3e28:	b083      	sub	sp, #12
    3e2a:	af00      	add	r7, sp, #0
    3e2c:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	685b      	ldr	r3, [r3, #4]
}
    3e32:	4618      	mov	r0, r3
    3e34:	370c      	adds	r7, #12
    3e36:	46bd      	mov	sp, r7
    3e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e3c:	4770      	bx	lr
	...

00003e40 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    3e40:	b590      	push	{r4, r7, lr}
    3e42:	b083      	sub	sp, #12
    3e44:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    3e46:	4b17      	ldr	r3, [pc, #92]	; (3ea4 <RAMECC_Handler+0x64>)
    3e48:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    3e4a:	4817      	ldr	r0, [pc, #92]	; (3ea8 <RAMECC_Handler+0x68>)
    3e4c:	4b17      	ldr	r3, [pc, #92]	; (3eac <RAMECC_Handler+0x6c>)
    3e4e:	4798      	blx	r3
    3e50:	4603      	mov	r3, r0
    3e52:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    3e54:	683b      	ldr	r3, [r7, #0]
    3e56:	f003 0302 	and.w	r3, r3, #2
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d00c      	beq.n	3e78 <RAMECC_Handler+0x38>
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	681b      	ldr	r3, [r3, #0]
    3e62:	2b00      	cmp	r3, #0
    3e64:	d008      	beq.n	3e78 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	681c      	ldr	r4, [r3, #0]
    3e6a:	480f      	ldr	r0, [pc, #60]	; (3ea8 <RAMECC_Handler+0x68>)
    3e6c:	4b10      	ldr	r3, [pc, #64]	; (3eb0 <RAMECC_Handler+0x70>)
    3e6e:	4798      	blx	r3
    3e70:	4603      	mov	r3, r0
    3e72:	4618      	mov	r0, r3
    3e74:	47a0      	blx	r4
    3e76:	e012      	b.n	3e9e <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    3e78:	683b      	ldr	r3, [r7, #0]
    3e7a:	f003 0301 	and.w	r3, r3, #1
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d00c      	beq.n	3e9c <RAMECC_Handler+0x5c>
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	685b      	ldr	r3, [r3, #4]
    3e86:	2b00      	cmp	r3, #0
    3e88:	d008      	beq.n	3e9c <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	685c      	ldr	r4, [r3, #4]
    3e8e:	4806      	ldr	r0, [pc, #24]	; (3ea8 <RAMECC_Handler+0x68>)
    3e90:	4b07      	ldr	r3, [pc, #28]	; (3eb0 <RAMECC_Handler+0x70>)
    3e92:	4798      	blx	r3
    3e94:	4603      	mov	r3, r0
    3e96:	4618      	mov	r0, r3
    3e98:	47a0      	blx	r4
    3e9a:	e000      	b.n	3e9e <RAMECC_Handler+0x5e>
	} else {
		return;
    3e9c:	bf00      	nop
	}
}
    3e9e:	370c      	adds	r7, #12
    3ea0:	46bd      	mov	sp, r7
    3ea2:	bd90      	pop	{r4, r7, pc}
    3ea4:	20000d20 	.word	0x20000d20
    3ea8:	41020000 	.word	0x41020000
    3eac:	00003e0d 	.word	0x00003e0d
    3eb0:	00003e27 	.word	0x00003e27

00003eb4 <__NVIC_EnableIRQ>:
{
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	4603      	mov	r3, r0
    3ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	db0b      	blt.n	3ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ec6:	4909      	ldr	r1, [pc, #36]	; (3eec <__NVIC_EnableIRQ+0x38>)
    3ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ecc:	095b      	lsrs	r3, r3, #5
    3ece:	88fa      	ldrh	r2, [r7, #6]
    3ed0:	f002 021f 	and.w	r2, r2, #31
    3ed4:	2001      	movs	r0, #1
    3ed6:	fa00 f202 	lsl.w	r2, r0, r2
    3eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3ede:	bf00      	nop
    3ee0:	370c      	adds	r7, #12
    3ee2:	46bd      	mov	sp, r7
    3ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop
    3eec:	e000e100 	.word	0xe000e100

00003ef0 <__NVIC_DisableIRQ>:
{
    3ef0:	b480      	push	{r7}
    3ef2:	b083      	sub	sp, #12
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	4603      	mov	r3, r0
    3ef8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3efe:	2b00      	cmp	r3, #0
    3f00:	db10      	blt.n	3f24 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f02:	490b      	ldr	r1, [pc, #44]	; (3f30 <__NVIC_DisableIRQ+0x40>)
    3f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f08:	095b      	lsrs	r3, r3, #5
    3f0a:	88fa      	ldrh	r2, [r7, #6]
    3f0c:	f002 021f 	and.w	r2, r2, #31
    3f10:	2001      	movs	r0, #1
    3f12:	fa00 f202 	lsl.w	r2, r0, r2
    3f16:	3320      	adds	r3, #32
    3f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3f1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f20:	f3bf 8f6f 	isb	sy
}
    3f24:	bf00      	nop
    3f26:	370c      	adds	r7, #12
    3f28:	46bd      	mov	sp, r7
    3f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f2e:	4770      	bx	lr
    3f30:	e000e100 	.word	0xe000e100

00003f34 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    3f34:	b480      	push	{r7}
    3f36:	b083      	sub	sp, #12
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
    3f3c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3f3e:	bf00      	nop
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	691a      	ldr	r2, [r3, #16]
    3f44:	683b      	ldr	r3, [r7, #0]
    3f46:	4013      	ands	r3, r2
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d1f9      	bne.n	3f40 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    3f4c:	bf00      	nop
    3f4e:	370c      	adds	r7, #12
    3f50:	46bd      	mov	sp, r7
    3f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f56:	4770      	bx	lr

00003f58 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    3f58:	b480      	push	{r7}
    3f5a:	b083      	sub	sp, #12
    3f5c:	af00      	add	r7, sp, #0
    3f5e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	f44f 7280 	mov.w	r2, #256	; 0x100
    3f66:	819a      	strh	r2, [r3, #12]
}
    3f68:	bf00      	nop
    3f6a:	370c      	adds	r7, #12
    3f6c:	46bd      	mov	sp, r7
    3f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f72:	4770      	bx	lr

00003f74 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    3f74:	b480      	push	{r7}
    3f76:	b083      	sub	sp, #12
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	899b      	ldrh	r3, [r3, #12]
    3f80:	b29b      	uxth	r3, r3
}
    3f82:	4618      	mov	r0, r3
    3f84:	370c      	adds	r7, #12
    3f86:	46bd      	mov	sp, r7
    3f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f8c:	4770      	bx	lr

00003f8e <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE0.INTENCLR.reg = RTC_MODE0_INTENSET_PER7;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    3f8e:	b480      	push	{r7}
    3f90:	b083      	sub	sp, #12
    3f92:	af00      	add	r7, sp, #0
    3f94:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	f44f 7280 	mov.w	r2, #256	; 0x100
    3f9c:	815a      	strh	r2, [r3, #10]
}
    3f9e:	bf00      	nop
    3fa0:	370c      	adds	r7, #12
    3fa2:	46bd      	mov	sp, r7
    3fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa8:	4770      	bx	lr
	...

00003fac <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	881b      	ldrh	r3, [r3, #0]
    3fb8:	b29b      	uxth	r3, r3
    3fba:	f043 0302 	orr.w	r3, r3, #2
    3fbe:	b29a      	uxth	r2, r3
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    3fc4:	f248 0103 	movw	r1, #32771	; 0x8003
    3fc8:	6878      	ldr	r0, [r7, #4]
    3fca:	4b03      	ldr	r3, [pc, #12]	; (3fd8 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    3fcc:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    3fce:	bf00      	nop
    3fd0:	3708      	adds	r7, #8
    3fd2:	46bd      	mov	sp, r7
    3fd4:	bd80      	pop	{r7, pc}
    3fd6:	bf00      	nop
    3fd8:	00003f35 	.word	0x00003f35

00003fdc <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b084      	sub	sp, #16
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    3fe4:	f248 0103 	movw	r1, #32771	; 0x8003
    3fe8:	6878      	ldr	r0, [r7, #4]
    3fea:	4b0a      	ldr	r3, [pc, #40]	; (4014 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    3fec:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	881b      	ldrh	r3, [r3, #0]
    3ff2:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    3ff4:	89fb      	ldrh	r3, [r7, #14]
    3ff6:	085b      	lsrs	r3, r3, #1
    3ff8:	b29b      	uxth	r3, r3
    3ffa:	f003 0301 	and.w	r3, r3, #1
    3ffe:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    4000:	89fb      	ldrh	r3, [r7, #14]
    4002:	2b00      	cmp	r3, #0
    4004:	bf14      	ite	ne
    4006:	2301      	movne	r3, #1
    4008:	2300      	moveq	r3, #0
    400a:	b2db      	uxtb	r3, r3
}
    400c:	4618      	mov	r0, r3
    400e:	3710      	adds	r7, #16
    4010:	46bd      	mov	sp, r7
    4012:	bd80      	pop	{r7, pc}
    4014:	00003f35 	.word	0x00003f35

00004018 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4018:	b580      	push	{r7, lr}
    401a:	b082      	sub	sp, #8
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	881b      	ldrh	r3, [r3, #0]
    4024:	b29b      	uxth	r3, r3
    4026:	f023 0302 	bic.w	r3, r3, #2
    402a:	b29a      	uxth	r2, r3
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    4030:	f248 0103 	movw	r1, #32771	; 0x8003
    4034:	6878      	ldr	r0, [r7, #4]
    4036:	4b03      	ldr	r3, [pc, #12]	; (4044 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    4038:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    403a:	bf00      	nop
    403c:	3708      	adds	r7, #8
    403e:	46bd      	mov	sp, r7
    4040:	bd80      	pop	{r7, pc}
    4042:	bf00      	nop
    4044:	00003f35 	.word	0x00003f35

00004048 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    4048:	b580      	push	{r7, lr}
    404a:	b082      	sub	sp, #8
    404c:	af00      	add	r7, sp, #0
    404e:	6078      	str	r0, [r7, #4]
    4050:	460b      	mov	r3, r1
    4052:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    4054:	687b      	ldr	r3, [r7, #4]
    4056:	887a      	ldrh	r2, [r7, #2]
    4058:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    405a:	f248 0103 	movw	r1, #32771	; 0x8003
    405e:	6878      	ldr	r0, [r7, #4]
    4060:	4b02      	ldr	r3, [pc, #8]	; (406c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    4062:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    4064:	bf00      	nop
    4066:	3708      	adds	r7, #8
    4068:	46bd      	mov	sp, r7
    406a:	bd80      	pop	{r7, pc}
    406c:	00003f35 	.word	0x00003f35

00004070 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    4070:	b580      	push	{r7, lr}
    4072:	b082      	sub	sp, #8
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
    4078:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    407a:	687b      	ldr	r3, [r7, #4]
    407c:	683a      	ldr	r2, [r7, #0]
    407e:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    4080:	2108      	movs	r1, #8
    4082:	6878      	ldr	r0, [r7, #4]
    4084:	4b02      	ldr	r3, [pc, #8]	; (4090 <hri_rtcmode0_write_COUNT_reg+0x20>)
    4086:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    4088:	bf00      	nop
    408a:	3708      	adds	r7, #8
    408c:	46bd      	mov	sp, r7
    408e:	bd80      	pop	{r7, pc}
    4090:	00003f35 	.word	0x00003f35

00004094 <hri_rtcmode0_write_COMP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    4094:	b580      	push	{r7, lr}
    4096:	b084      	sub	sp, #16
    4098:	af00      	add	r7, sp, #0
    409a:	60f8      	str	r0, [r7, #12]
    409c:	460b      	mov	r3, r1
    409e:	607a      	str	r2, [r7, #4]
    40a0:	72fb      	strb	r3, [r7, #11]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    40a2:	7afa      	ldrb	r2, [r7, #11]
    40a4:	68fb      	ldr	r3, [r7, #12]
    40a6:	3208      	adds	r2, #8
    40a8:	6879      	ldr	r1, [r7, #4]
    40aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    40ae:	2160      	movs	r1, #96	; 0x60
    40b0:	68f8      	ldr	r0, [r7, #12]
    40b2:	4b03      	ldr	r3, [pc, #12]	; (40c0 <hri_rtcmode0_write_COMP_reg+0x2c>)
    40b4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    40b6:	bf00      	nop
    40b8:	3710      	adds	r7, #16
    40ba:	46bd      	mov	sp, r7
    40bc:	bd80      	pop	{r7, pc}
    40be:	bf00      	nop
    40c0:	00003f35 	.word	0x00003f35

000040c4 <hri_rtcmode0_read_COMP_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
    40c4:	b580      	push	{r7, lr}
    40c6:	b082      	sub	sp, #8
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	460b      	mov	r3, r1
    40ce:	70fb      	strb	r3, [r7, #3]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    40d0:	2160      	movs	r1, #96	; 0x60
    40d2:	6878      	ldr	r0, [r7, #4]
    40d4:	4b05      	ldr	r3, [pc, #20]	; (40ec <hri_rtcmode0_read_COMP_reg+0x28>)
    40d6:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    40d8:	78fa      	ldrb	r2, [r7, #3]
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	3208      	adds	r2, #8
    40de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
    40e2:	4618      	mov	r0, r3
    40e4:	3708      	adds	r7, #8
    40e6:	46bd      	mov	sp, r7
    40e8:	bd80      	pop	{r7, pc}
    40ea:	bf00      	nop
    40ec:	00003f35 	.word	0x00003f35

000040f0 <_rtc_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _rtc_timer_init(struct _timer_device *const dev, void *const hw)
{
    40f0:	b580      	push	{r7, lr}
    40f2:	b082      	sub	sp, #8
    40f4:	af00      	add	r7, sp, #0
    40f6:	6078      	str	r0, [r7, #4]
    40f8:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	2b00      	cmp	r3, #0
    40fe:	bf14      	ite	ne
    4100:	2301      	movne	r3, #1
    4102:	2300      	moveq	r3, #0
    4104:	b2db      	uxtb	r3, r3
    4106:	2230      	movs	r2, #48	; 0x30
    4108:	4916      	ldr	r1, [pc, #88]	; (4164 <_rtc_timer_init+0x74>)
    410a:	4618      	mov	r0, r3
    410c:	4b16      	ldr	r3, [pc, #88]	; (4168 <_rtc_timer_init+0x78>)
    410e:	4798      	blx	r3

	dev->hw = hw;
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	683a      	ldr	r2, [r7, #0]
    4114:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	68db      	ldr	r3, [r3, #12]
    411a:	2101      	movs	r1, #1
    411c:	4618      	mov	r0, r3
    411e:	4b13      	ldr	r3, [pc, #76]	; (416c <_rtc_timer_init+0x7c>)
    4120:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	68db      	ldr	r3, [r3, #12]
    4126:	2101      	movs	r1, #1
    4128:	4618      	mov	r0, r3
    412a:	4b11      	ldr	r3, [pc, #68]	; (4170 <_rtc_timer_init+0x80>)
    412c:	4798      	blx	r3
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	68db      	ldr	r3, [r3, #12]
	hri_rtcmode0_write_CTRLA_reg(
    4132:	f248 0180 	movw	r1, #32896	; 0x8080
    4136:	4618      	mov	r0, r3
    4138:	4b0c      	ldr	r3, [pc, #48]	; (416c <_rtc_timer_init+0x7c>)
    413a:	4798      	blx	r3
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	68db      	ldr	r3, [r3, #12]
    4140:	2220      	movs	r2, #32
    4142:	2100      	movs	r1, #0
    4144:	4618      	mov	r0, r3
    4146:	4b0b      	ldr	r3, [pc, #44]	; (4174 <_rtc_timer_init+0x84>)
    4148:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	68db      	ldr	r3, [r3, #12]
    414e:	4618      	mov	r0, r3
    4150:	4b09      	ldr	r3, [pc, #36]	; (4178 <_rtc_timer_init+0x88>)
    4152:	4798      	blx	r3

	_rtc_dev = dev;
    4154:	4a09      	ldr	r2, [pc, #36]	; (417c <_rtc_timer_init+0x8c>)
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    415a:	2300      	movs	r3, #0
}
    415c:	4618      	mov	r0, r3
    415e:	3708      	adds	r7, #8
    4160:	46bd      	mov	sp, r7
    4162:	bd80      	pop	{r7, pc}
    4164:	00009030 	.word	0x00009030
    4168:	00002249 	.word	0x00002249
    416c:	00004049 	.word	0x00004049
    4170:	00003f35 	.word	0x00003f35
    4174:	00004095 	.word	0x00004095
    4178:	00003f8f 	.word	0x00003f8f
    417c:	200003f4 	.word	0x200003f4

00004180 <_rtc_timer_deinit>:

/**
 * \brief De-initialize Timer
 */
void _rtc_timer_deinit(struct _timer_device *const dev)
{
    4180:	b580      	push	{r7, lr}
    4182:	b082      	sub	sp, #8
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	2b00      	cmp	r3, #0
    418c:	d005      	beq.n	419a <_rtc_timer_deinit+0x1a>
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	68db      	ldr	r3, [r3, #12]
    4192:	2b00      	cmp	r3, #0
    4194:	d001      	beq.n	419a <_rtc_timer_deinit+0x1a>
    4196:	2301      	movs	r3, #1
    4198:	e000      	b.n	419c <_rtc_timer_deinit+0x1c>
    419a:	2300      	movs	r3, #0
    419c:	f003 0301 	and.w	r3, r3, #1
    41a0:	b2db      	uxtb	r3, r3
    41a2:	2252      	movs	r2, #82	; 0x52
    41a4:	4908      	ldr	r1, [pc, #32]	; (41c8 <_rtc_timer_deinit+0x48>)
    41a6:	4618      	mov	r0, r3
    41a8:	4b08      	ldr	r3, [pc, #32]	; (41cc <_rtc_timer_deinit+0x4c>)
    41aa:	4798      	blx	r3

	NVIC_DisableIRQ(RTC_IRQn);
    41ac:	200b      	movs	r0, #11
    41ae:	4b08      	ldr	r3, [pc, #32]	; (41d0 <_rtc_timer_deinit+0x50>)
    41b0:	4798      	blx	r3

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    41b2:	687b      	ldr	r3, [r7, #4]
    41b4:	68db      	ldr	r3, [r3, #12]
    41b6:	2101      	movs	r1, #1
    41b8:	4618      	mov	r0, r3
    41ba:	4b06      	ldr	r3, [pc, #24]	; (41d4 <_rtc_timer_deinit+0x54>)
    41bc:	4798      	blx	r3
}
    41be:	bf00      	nop
    41c0:	3708      	adds	r7, #8
    41c2:	46bd      	mov	sp, r7
    41c4:	bd80      	pop	{r7, pc}
    41c6:	bf00      	nop
    41c8:	00009030 	.word	0x00009030
    41cc:	00002249 	.word	0x00002249
    41d0:	00003ef1 	.word	0x00003ef1
    41d4:	00004049 	.word	0x00004049

000041d8 <_rtc_timer_start>:

/**
 * \brief Start hardware timer
 */
void _rtc_timer_start(struct _timer_device *const dev)
{
    41d8:	b580      	push	{r7, lr}
    41da:	b082      	sub	sp, #8
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d005      	beq.n	41f2 <_rtc_timer_start+0x1a>
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	68db      	ldr	r3, [r3, #12]
    41ea:	2b00      	cmp	r3, #0
    41ec:	d001      	beq.n	41f2 <_rtc_timer_start+0x1a>
    41ee:	2301      	movs	r3, #1
    41f0:	e000      	b.n	41f4 <_rtc_timer_start+0x1c>
    41f2:	2300      	movs	r3, #0
    41f4:	f003 0301 	and.w	r3, r3, #1
    41f8:	b2db      	uxtb	r3, r3
    41fa:	225e      	movs	r2, #94	; 0x5e
    41fc:	490d      	ldr	r1, [pc, #52]	; (4234 <_rtc_timer_start+0x5c>)
    41fe:	4618      	mov	r0, r3
    4200:	4b0d      	ldr	r3, [pc, #52]	; (4238 <_rtc_timer_start+0x60>)
    4202:	4798      	blx	r3

	NVIC_EnableIRQ(RTC_IRQn);
    4204:	200b      	movs	r0, #11
    4206:	4b0d      	ldr	r3, [pc, #52]	; (423c <_rtc_timer_start+0x64>)
    4208:	4798      	blx	r3
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	68db      	ldr	r3, [r3, #12]
    420e:	2100      	movs	r1, #0
    4210:	4618      	mov	r0, r3
    4212:	4b0b      	ldr	r3, [pc, #44]	; (4240 <_rtc_timer_start+0x68>)
    4214:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	68db      	ldr	r3, [r3, #12]
    421a:	2108      	movs	r1, #8
    421c:	4618      	mov	r0, r3
    421e:	4b09      	ldr	r3, [pc, #36]	; (4244 <_rtc_timer_start+0x6c>)
    4220:	4798      	blx	r3
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	68db      	ldr	r3, [r3, #12]
    4226:	4618      	mov	r0, r3
    4228:	4b07      	ldr	r3, [pc, #28]	; (4248 <_rtc_timer_start+0x70>)
    422a:	4798      	blx	r3
}
    422c:	bf00      	nop
    422e:	3708      	adds	r7, #8
    4230:	46bd      	mov	sp, r7
    4232:	bd80      	pop	{r7, pc}
    4234:	00009030 	.word	0x00009030
    4238:	00002249 	.word	0x00002249
    423c:	00003eb5 	.word	0x00003eb5
    4240:	00004071 	.word	0x00004071
    4244:	00003f35 	.word	0x00003f35
    4248:	00003fad 	.word	0x00003fad

0000424c <_rtc_timer_stop>:

/**
 * \brief Stop hardware timer
 */
void _rtc_timer_stop(struct _timer_device *const dev)
{
    424c:	b580      	push	{r7, lr}
    424e:	b082      	sub	sp, #8
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	2b00      	cmp	r3, #0
    4258:	d005      	beq.n	4266 <_rtc_timer_stop+0x1a>
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	68db      	ldr	r3, [r3, #12]
    425e:	2b00      	cmp	r3, #0
    4260:	d001      	beq.n	4266 <_rtc_timer_stop+0x1a>
    4262:	2301      	movs	r3, #1
    4264:	e000      	b.n	4268 <_rtc_timer_stop+0x1c>
    4266:	2300      	movs	r3, #0
    4268:	f003 0301 	and.w	r3, r3, #1
    426c:	b2db      	uxtb	r3, r3
    426e:	226b      	movs	r2, #107	; 0x6b
    4270:	4906      	ldr	r1, [pc, #24]	; (428c <_rtc_timer_stop+0x40>)
    4272:	4618      	mov	r0, r3
    4274:	4b06      	ldr	r3, [pc, #24]	; (4290 <_rtc_timer_stop+0x44>)
    4276:	4798      	blx	r3

	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	68db      	ldr	r3, [r3, #12]
    427c:	4618      	mov	r0, r3
    427e:	4b05      	ldr	r3, [pc, #20]	; (4294 <_rtc_timer_stop+0x48>)
    4280:	4798      	blx	r3
}
    4282:	bf00      	nop
    4284:	3708      	adds	r7, #8
    4286:	46bd      	mov	sp, r7
    4288:	bd80      	pop	{r7, pc}
    428a:	bf00      	nop
    428c:	00009030 	.word	0x00009030
    4290:	00002249 	.word	0x00002249
    4294:	00004019 	.word	0x00004019

00004298 <_rtc_timer_set_period>:

/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
    4298:	b580      	push	{r7, lr}
    429a:	b082      	sub	sp, #8
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
    42a0:	6039      	str	r1, [r7, #0]
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	68db      	ldr	r3, [r3, #12]
    42a6:	683a      	ldr	r2, [r7, #0]
    42a8:	2100      	movs	r1, #0
    42aa:	4618      	mov	r0, r3
    42ac:	4b02      	ldr	r3, [pc, #8]	; (42b8 <_rtc_timer_set_period+0x20>)
    42ae:	4798      	blx	r3
}
    42b0:	bf00      	nop
    42b2:	3708      	adds	r7, #8
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}
    42b8:	00004095 	.word	0x00004095

000042bc <_rtc_timer_get_period>:

/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
    42bc:	b580      	push	{r7, lr}
    42be:	b082      	sub	sp, #8
    42c0:	af00      	add	r7, sp, #0
    42c2:	6078      	str	r0, [r7, #4]
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	68db      	ldr	r3, [r3, #12]
    42c8:	2100      	movs	r1, #0
    42ca:	4618      	mov	r0, r3
    42cc:	4b03      	ldr	r3, [pc, #12]	; (42dc <_rtc_timer_get_period+0x20>)
    42ce:	4798      	blx	r3
    42d0:	4603      	mov	r3, r0
}
    42d2:	4618      	mov	r0, r3
    42d4:	3708      	adds	r7, #8
    42d6:	46bd      	mov	sp, r7
    42d8:	bd80      	pop	{r7, pc}
    42da:	bf00      	nop
    42dc:	000040c5 	.word	0x000040c5

000042e0 <_rtc_timer_is_started>:

/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
    42e0:	b580      	push	{r7, lr}
    42e2:	b082      	sub	sp, #8
    42e4:	af00      	add	r7, sp, #0
    42e6:	6078      	str	r0, [r7, #4]
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	68db      	ldr	r3, [r3, #12]
    42ec:	4618      	mov	r0, r3
    42ee:	4b03      	ldr	r3, [pc, #12]	; (42fc <_rtc_timer_is_started+0x1c>)
    42f0:	4798      	blx	r3
    42f2:	4603      	mov	r3, r0
}
    42f4:	4618      	mov	r0, r3
    42f6:	3708      	adds	r7, #8
    42f8:	46bd      	mov	sp, r7
    42fa:	bd80      	pop	{r7, pc}
    42fc:	00003fdd 	.word	0x00003fdd

00004300 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    4300:	b480      	push	{r7}
    4302:	b083      	sub	sp, #12
    4304:	af00      	add	r7, sp, #0
    4306:	6078      	str	r0, [r7, #4]
	(void)dev;
}
    4308:	bf00      	nop
    430a:	370c      	adds	r7, #12
    430c:	46bd      	mov	sp, r7
    430e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4312:	4770      	bx	lr

00004314 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    4314:	b580      	push	{r7, lr}
    4316:	b084      	sub	sp, #16
    4318:	af00      	add	r7, sp, #0
    431a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	68db      	ldr	r3, [r3, #12]
    4320:	4618      	mov	r0, r3
    4322:	4b0d      	ldr	r3, [pc, #52]	; (4358 <_rtc_timer_interrupt_handler+0x44>)
    4324:	4798      	blx	r3
    4326:	4603      	mov	r3, r0
    4328:	81fb      	strh	r3, [r7, #14]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    432a:	89fb      	ldrh	r3, [r7, #14]
    432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4330:	2b00      	cmp	r3, #0
    4332:	d00c      	beq.n	434e <_rtc_timer_interrupt_handler+0x3a>
		if (dev->timer_cb.period_expired) {
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	681b      	ldr	r3, [r3, #0]
    4338:	2b00      	cmp	r3, #0
    433a:	d003      	beq.n	4344 <_rtc_timer_interrupt_handler+0x30>
			dev->timer_cb.period_expired(dev);
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	681b      	ldr	r3, [r3, #0]
    4340:	6878      	ldr	r0, [r7, #4]
    4342:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	68db      	ldr	r3, [r3, #12]
    4348:	4618      	mov	r0, r3
    434a:	4b04      	ldr	r3, [pc, #16]	; (435c <_rtc_timer_interrupt_handler+0x48>)
    434c:	4798      	blx	r3
	}
}
    434e:	bf00      	nop
    4350:	3710      	adds	r7, #16
    4352:	46bd      	mov	sp, r7
    4354:	bd80      	pop	{r7, pc}
    4356:	bf00      	nop
    4358:	00003f75 	.word	0x00003f75
    435c:	00003f59 	.word	0x00003f59

00004360 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    4360:	b480      	push	{r7}
    4362:	af00      	add	r7, sp, #0
	return &_rtc_timer_functions;
    4364:	4b02      	ldr	r3, [pc, #8]	; (4370 <_rtc_get_timer+0x10>)
}
    4366:	4618      	mov	r0, r3
    4368:	46bd      	mov	sp, r7
    436a:	f85d 7b04 	ldr.w	r7, [sp], #4
    436e:	4770      	bx	lr
    4370:	20000000 	.word	0x20000000

00004374 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    4374:	b580      	push	{r7, lr}
    4376:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    4378:	4b03      	ldr	r3, [pc, #12]	; (4388 <RTC_Handler+0x14>)
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	4618      	mov	r0, r3
    437e:	4b03      	ldr	r3, [pc, #12]	; (438c <RTC_Handler+0x18>)
    4380:	4798      	blx	r3
}
    4382:	bf00      	nop
    4384:	bd80      	pop	{r7, pc}
    4386:	bf00      	nop
    4388:	200003f4 	.word	0x200003f4
    438c:	00004315 	.word	0x00004315

00004390 <__NVIC_EnableIRQ>:
{
    4390:	b480      	push	{r7}
    4392:	b083      	sub	sp, #12
    4394:	af00      	add	r7, sp, #0
    4396:	4603      	mov	r3, r0
    4398:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    439a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    439e:	2b00      	cmp	r3, #0
    43a0:	db0b      	blt.n	43ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    43a2:	4909      	ldr	r1, [pc, #36]	; (43c8 <__NVIC_EnableIRQ+0x38>)
    43a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43a8:	095b      	lsrs	r3, r3, #5
    43aa:	88fa      	ldrh	r2, [r7, #6]
    43ac:	f002 021f 	and.w	r2, r2, #31
    43b0:	2001      	movs	r0, #1
    43b2:	fa00 f202 	lsl.w	r2, r0, r2
    43b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    43ba:	bf00      	nop
    43bc:	370c      	adds	r7, #12
    43be:	46bd      	mov	sp, r7
    43c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c4:	4770      	bx	lr
    43c6:	bf00      	nop
    43c8:	e000e100 	.word	0xe000e100

000043cc <__NVIC_DisableIRQ>:
{
    43cc:	b480      	push	{r7}
    43ce:	b083      	sub	sp, #12
    43d0:	af00      	add	r7, sp, #0
    43d2:	4603      	mov	r3, r0
    43d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    43d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43da:	2b00      	cmp	r3, #0
    43dc:	db10      	blt.n	4400 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    43de:	490b      	ldr	r1, [pc, #44]	; (440c <__NVIC_DisableIRQ+0x40>)
    43e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43e4:	095b      	lsrs	r3, r3, #5
    43e6:	88fa      	ldrh	r2, [r7, #6]
    43e8:	f002 021f 	and.w	r2, r2, #31
    43ec:	2001      	movs	r0, #1
    43ee:	fa00 f202 	lsl.w	r2, r0, r2
    43f2:	3320      	adds	r3, #32
    43f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    43f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    43fc:	f3bf 8f6f 	isb	sy
}
    4400:	bf00      	nop
    4402:	370c      	adds	r7, #12
    4404:	46bd      	mov	sp, r7
    4406:	f85d 7b04 	ldr.w	r7, [sp], #4
    440a:	4770      	bx	lr
    440c:	e000e100 	.word	0xe000e100

00004410 <__NVIC_ClearPendingIRQ>:
{
    4410:	b480      	push	{r7}
    4412:	b083      	sub	sp, #12
    4414:	af00      	add	r7, sp, #0
    4416:	4603      	mov	r3, r0
    4418:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    441a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    441e:	2b00      	cmp	r3, #0
    4420:	db0c      	blt.n	443c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4422:	4909      	ldr	r1, [pc, #36]	; (4448 <__NVIC_ClearPendingIRQ+0x38>)
    4424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4428:	095b      	lsrs	r3, r3, #5
    442a:	88fa      	ldrh	r2, [r7, #6]
    442c:	f002 021f 	and.w	r2, r2, #31
    4430:	2001      	movs	r0, #1
    4432:	fa00 f202 	lsl.w	r2, r0, r2
    4436:	3360      	adds	r3, #96	; 0x60
    4438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    443c:	bf00      	nop
    443e:	370c      	adds	r7, #12
    4440:	46bd      	mov	sp, r7
    4442:	f85d 7b04 	ldr.w	r7, [sp], #4
    4446:	4770      	bx	lr
    4448:	e000e100 	.word	0xe000e100

0000444c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    444c:	b480      	push	{r7}
    444e:	b083      	sub	sp, #12
    4450:	af00      	add	r7, sp, #0
    4452:	6078      	str	r0, [r7, #4]
    4454:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    4456:	bf00      	nop
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	69da      	ldr	r2, [r3, #28]
    445c:	683b      	ldr	r3, [r7, #0]
    445e:	4013      	ands	r3, r2
    4460:	2b00      	cmp	r3, #0
    4462:	d1f9      	bne.n	4458 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    4464:	bf00      	nop
    4466:	370c      	adds	r7, #12
    4468:	46bd      	mov	sp, r7
    446a:	f85d 7b04 	ldr.w	r7, [sp], #4
    446e:	4770      	bx	lr

00004470 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    4470:	b480      	push	{r7}
    4472:	b083      	sub	sp, #12
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
    4478:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	69da      	ldr	r2, [r3, #28]
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	4013      	ands	r3, r2
    4482:	2b00      	cmp	r3, #0
    4484:	bf14      	ite	ne
    4486:	2301      	movne	r3, #1
    4488:	2300      	moveq	r3, #0
    448a:	b2db      	uxtb	r3, r3
}
    448c:	4618      	mov	r0, r3
    448e:	370c      	adds	r7, #12
    4490:	46bd      	mov	sp, r7
    4492:	f85d 7b04 	ldr.w	r7, [sp], #4
    4496:	4770      	bx	lr

00004498 <hri_sercomi2cs_wait_for_sync>:

static inline void hri_sercomi2cs_wait_for_sync(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
    4498:	b480      	push	{r7}
    449a:	b083      	sub	sp, #12
    449c:	af00      	add	r7, sp, #0
    449e:	6078      	str	r0, [r7, #4]
    44a0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    44a2:	bf00      	nop
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	69da      	ldr	r2, [r3, #28]
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	4013      	ands	r3, r2
    44ac:	2b00      	cmp	r3, #0
    44ae:	d1f9      	bne.n	44a4 <hri_sercomi2cs_wait_for_sync+0xc>
	};
}
    44b0:	bf00      	nop
    44b2:	370c      	adds	r7, #12
    44b4:	46bd      	mov	sp, r7
    44b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ba:	4770      	bx	lr

000044bc <hri_sercomi2cs_is_syncing>:

static inline bool hri_sercomi2cs_is_syncing(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
    44bc:	b480      	push	{r7}
    44be:	b083      	sub	sp, #12
    44c0:	af00      	add	r7, sp, #0
    44c2:	6078      	str	r0, [r7, #4]
    44c4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    44c6:	687b      	ldr	r3, [r7, #4]
    44c8:	69da      	ldr	r2, [r3, #28]
    44ca:	683b      	ldr	r3, [r7, #0]
    44cc:	4013      	ands	r3, r2
    44ce:	2b00      	cmp	r3, #0
    44d0:	bf14      	ite	ne
    44d2:	2301      	movne	r3, #1
    44d4:	2300      	moveq	r3, #0
    44d6:	b2db      	uxtb	r3, r3
}
    44d8:	4618      	mov	r0, r3
    44da:	370c      	adds	r7, #12
    44dc:	46bd      	mov	sp, r7
    44de:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e2:	4770      	bx	lr

000044e4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    44e4:	b480      	push	{r7}
    44e6:	b083      	sub	sp, #12
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	2201      	movs	r2, #1
    44f0:	761a      	strb	r2, [r3, #24]
}
    44f2:	bf00      	nop
    44f4:	370c      	adds	r7, #12
    44f6:	46bd      	mov	sp, r7
    44f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    44fc:	4770      	bx	lr

000044fe <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    44fe:	b480      	push	{r7}
    4500:	b083      	sub	sp, #12
    4502:	af00      	add	r7, sp, #0
    4504:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	2202      	movs	r2, #2
    450a:	761a      	strb	r2, [r3, #24]
}
    450c:	bf00      	nop
    450e:	370c      	adds	r7, #12
    4510:	46bd      	mov	sp, r7
    4512:	f85d 7b04 	ldr.w	r7, [sp], #4
    4516:	4770      	bx	lr

00004518 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    4518:	b480      	push	{r7}
    451a:	b083      	sub	sp, #12
    451c:	af00      	add	r7, sp, #0
    451e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    4520:	687b      	ldr	r3, [r7, #4]
    4522:	7e1b      	ldrb	r3, [r3, #24]
    4524:	b2db      	uxtb	r3, r3
}
    4526:	4618      	mov	r0, r3
    4528:	370c      	adds	r7, #12
    452a:	46bd      	mov	sp, r7
    452c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4530:	4770      	bx	lr
	...

00004534 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4534:	b580      	push	{r7, lr}
    4536:	b082      	sub	sp, #8
    4538:	af00      	add	r7, sp, #0
    453a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	f023 0202 	bic.w	r2, r3, #2
    4544:	687b      	ldr	r3, [r7, #4]
    4546:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    4548:	2103      	movs	r1, #3
    454a:	6878      	ldr	r0, [r7, #4]
    454c:	4b02      	ldr	r3, [pc, #8]	; (4558 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    454e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4550:	bf00      	nop
    4552:	3708      	adds	r7, #8
    4554:	46bd      	mov	sp, r7
    4556:	bd80      	pop	{r7, pc}
    4558:	0000444d 	.word	0x0000444d

0000455c <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    455c:	b480      	push	{r7}
    455e:	b085      	sub	sp, #20
    4560:	af00      	add	r7, sp, #0
    4562:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    4564:	687b      	ldr	r3, [r7, #4]
    4566:	681b      	ldr	r3, [r3, #0]
    4568:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	0edb      	lsrs	r3, r3, #27
    456e:	f003 0301 	and.w	r3, r3, #1
    4572:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	2b00      	cmp	r3, #0
    4578:	bf14      	ite	ne
    457a:	2301      	movne	r3, #1
    457c:	2300      	moveq	r3, #0
    457e:	b2db      	uxtb	r3, r3
}
    4580:	4618      	mov	r0, r3
    4582:	3714      	adds	r7, #20
    4584:	46bd      	mov	sp, r7
    4586:	f85d 7b04 	ldr.w	r7, [sp], #4
    458a:	4770      	bx	lr

0000458c <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    458c:	b580      	push	{r7, lr}
    458e:	b084      	sub	sp, #16
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
    4594:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    4596:	2103      	movs	r1, #3
    4598:	6878      	ldr	r0, [r7, #4]
    459a:	4b07      	ldr	r3, [pc, #28]	; (45b8 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    459c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	681b      	ldr	r3, [r3, #0]
    45a2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    45a4:	68fa      	ldr	r2, [r7, #12]
    45a6:	683b      	ldr	r3, [r7, #0]
    45a8:	4013      	ands	r3, r2
    45aa:	60fb      	str	r3, [r7, #12]
	return tmp;
    45ac:	68fb      	ldr	r3, [r7, #12]
}
    45ae:	4618      	mov	r0, r3
    45b0:	3710      	adds	r7, #16
    45b2:	46bd      	mov	sp, r7
    45b4:	bd80      	pop	{r7, pc}
    45b6:	bf00      	nop
    45b8:	0000444d 	.word	0x0000444d

000045bc <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    45bc:	b580      	push	{r7, lr}
    45be:	b082      	sub	sp, #8
    45c0:	af00      	add	r7, sp, #0
    45c2:	6078      	str	r0, [r7, #4]
    45c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    45c6:	687b      	ldr	r3, [r7, #4]
    45c8:	683a      	ldr	r2, [r7, #0]
    45ca:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    45cc:	2103      	movs	r1, #3
    45ce:	6878      	ldr	r0, [r7, #4]
    45d0:	4b02      	ldr	r3, [pc, #8]	; (45dc <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    45d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    45d4:	bf00      	nop
    45d6:	3708      	adds	r7, #8
    45d8:	46bd      	mov	sp, r7
    45da:	bd80      	pop	{r7, pc}
    45dc:	0000444d 	.word	0x0000444d

000045e0 <hri_sercomi2cs_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cs_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    45e0:	b580      	push	{r7, lr}
    45e2:	b082      	sub	sp, #8
    45e4:	af00      	add	r7, sp, #0
    45e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	f023 0202 	bic.w	r2, r3, #2
    45f0:	687b      	ldr	r3, [r7, #4]
    45f2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
    45f4:	2103      	movs	r1, #3
    45f6:	6878      	ldr	r0, [r7, #4]
    45f8:	4b02      	ldr	r3, [pc, #8]	; (4604 <hri_sercomi2cs_clear_CTRLA_ENABLE_bit+0x24>)
    45fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    45fc:	bf00      	nop
    45fe:	3708      	adds	r7, #8
    4600:	46bd      	mov	sp, r7
    4602:	bd80      	pop	{r7, pc}
    4604:	00004499 	.word	0x00004499

00004608 <hri_sercomi2cs_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_ctrla_reg_t hri_sercomi2cs_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cs_ctrla_reg_t mask)
{
    4608:	b580      	push	{r7, lr}
    460a:	b084      	sub	sp, #16
    460c:	af00      	add	r7, sp, #0
    460e:	6078      	str	r0, [r7, #4]
    4610:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
    4612:	2103      	movs	r1, #3
    4614:	6878      	ldr	r0, [r7, #4]
    4616:	4b07      	ldr	r3, [pc, #28]	; (4634 <hri_sercomi2cs_get_CTRLA_reg+0x2c>)
    4618:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    461a:	687b      	ldr	r3, [r7, #4]
    461c:	681b      	ldr	r3, [r3, #0]
    461e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4620:	68fa      	ldr	r2, [r7, #12]
    4622:	683b      	ldr	r3, [r7, #0]
    4624:	4013      	ands	r3, r2
    4626:	60fb      	str	r3, [r7, #12]
	return tmp;
    4628:	68fb      	ldr	r3, [r7, #12]
}
    462a:	4618      	mov	r0, r3
    462c:	3710      	adds	r7, #16
    462e:	46bd      	mov	sp, r7
    4630:	bd80      	pop	{r7, pc}
    4632:	bf00      	nop
    4634:	00004499 	.word	0x00004499

00004638 <hri_sercomi2cs_write_CTRLA_reg>:

static inline void hri_sercomi2cs_write_CTRLA_reg(const void *const hw, hri_sercomi2cs_ctrla_reg_t data)
{
    4638:	b580      	push	{r7, lr}
    463a:	b082      	sub	sp, #8
    463c:	af00      	add	r7, sp, #0
    463e:	6078      	str	r0, [r7, #4]
    4640:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	683a      	ldr	r2, [r7, #0]
    4646:	601a      	str	r2, [r3, #0]
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
    4648:	2103      	movs	r1, #3
    464a:	6878      	ldr	r0, [r7, #4]
    464c:	4b02      	ldr	r3, [pc, #8]	; (4658 <hri_sercomi2cs_write_CTRLA_reg+0x20>)
    464e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4650:	bf00      	nop
    4652:	3708      	adds	r7, #8
    4654:	46bd      	mov	sp, r7
    4656:	bd80      	pop	{r7, pc}
    4658:	00004499 	.word	0x00004499

0000465c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    465c:	b580      	push	{r7, lr}
    465e:	b082      	sub	sp, #8
    4660:	af00      	add	r7, sp, #0
    4662:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    4664:	687b      	ldr	r3, [r7, #4]
    4666:	685b      	ldr	r3, [r3, #4]
    4668:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
    4670:	2117      	movs	r1, #23
    4672:	6878      	ldr	r0, [r7, #4]
    4674:	4b02      	ldr	r3, [pc, #8]	; (4680 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    4676:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4678:	bf00      	nop
    467a:	3708      	adds	r7, #8
    467c:	46bd      	mov	sp, r7
    467e:	bd80      	pop	{r7, pc}
    4680:	0000444d 	.word	0x0000444d

00004684 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    4684:	b580      	push	{r7, lr}
    4686:	b082      	sub	sp, #8
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	685b      	ldr	r3, [r3, #4]
    4690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    4694:	687b      	ldr	r3, [r7, #4]
    4696:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
    4698:	2117      	movs	r1, #23
    469a:	6878      	ldr	r0, [r7, #4]
    469c:	4b02      	ldr	r3, [pc, #8]	; (46a8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    469e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    46a0:	bf00      	nop
    46a2:	3708      	adds	r7, #8
    46a4:	46bd      	mov	sp, r7
    46a6:	bd80      	pop	{r7, pc}
    46a8:	0000444d 	.word	0x0000444d

000046ac <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    46ac:	b580      	push	{r7, lr}
    46ae:	b082      	sub	sp, #8
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	685b      	ldr	r3, [r3, #4]
    46b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
    46c0:	2117      	movs	r1, #23
    46c2:	6878      	ldr	r0, [r7, #4]
    46c4:	4b02      	ldr	r3, [pc, #8]	; (46d0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    46c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    46c8:	bf00      	nop
    46ca:	3708      	adds	r7, #8
    46cc:	46bd      	mov	sp, r7
    46ce:	bd80      	pop	{r7, pc}
    46d0:	0000444d 	.word	0x0000444d

000046d4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    46d4:	b580      	push	{r7, lr}
    46d6:	b082      	sub	sp, #8
    46d8:	af00      	add	r7, sp, #0
    46da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	685b      	ldr	r3, [r3, #4]
    46e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
    46e8:	2117      	movs	r1, #23
    46ea:	6878      	ldr	r0, [r7, #4]
    46ec:	4b02      	ldr	r3, [pc, #8]	; (46f8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    46ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    46f0:	bf00      	nop
    46f2:	3708      	adds	r7, #8
    46f4:	46bd      	mov	sp, r7
    46f6:	bd80      	pop	{r7, pc}
    46f8:	0000444d 	.word	0x0000444d

000046fc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b082      	sub	sp, #8
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
    4704:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	685a      	ldr	r2, [r3, #4]
    470a:	683b      	ldr	r3, [r7, #0]
    470c:	041b      	lsls	r3, r3, #16
    470e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    4712:	431a      	orrs	r2, r3
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4718:	2104      	movs	r1, #4
    471a:	6878      	ldr	r0, [r7, #4]
    471c:	4b02      	ldr	r3, [pc, #8]	; (4728 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    471e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4720:	bf00      	nop
    4722:	3708      	adds	r7, #8
    4724:	46bd      	mov	sp, r7
    4726:	bd80      	pop	{r7, pc}
    4728:	0000444d 	.word	0x0000444d

0000472c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    472c:	b580      	push	{r7, lr}
    472e:	b082      	sub	sp, #8
    4730:	af00      	add	r7, sp, #0
    4732:	6078      	str	r0, [r7, #4]
    4734:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	683a      	ldr	r2, [r7, #0]
    473a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
    473c:	2117      	movs	r1, #23
    473e:	6878      	ldr	r0, [r7, #4]
    4740:	4b02      	ldr	r3, [pc, #8]	; (474c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    4742:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4744:	bf00      	nop
    4746:	3708      	adds	r7, #8
    4748:	46bd      	mov	sp, r7
    474a:	bd80      	pop	{r7, pc}
    474c:	0000444d 	.word	0x0000444d

00004750 <hri_sercomi2cs_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
    4750:	b480      	push	{r7}
    4752:	b083      	sub	sp, #12
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
    4758:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	683a      	ldr	r2, [r7, #0]
    475e:	605a      	str	r2, [r3, #4]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4760:	bf00      	nop
    4762:	370c      	adds	r7, #12
    4764:	46bd      	mov	sp, r7
    4766:	f85d 7b04 	ldr.w	r7, [sp], #4
    476a:	4770      	bx	lr

0000476c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    476c:	b480      	push	{r7}
    476e:	b083      	sub	sp, #12
    4770:	af00      	add	r7, sp, #0
    4772:	6078      	str	r0, [r7, #4]
    4774:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	683a      	ldr	r2, [r7, #0]
    477a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    477c:	bf00      	nop
    477e:	370c      	adds	r7, #12
    4780:	46bd      	mov	sp, r7
    4782:	f85d 7b04 	ldr.w	r7, [sp], #4
    4786:	4770      	bx	lr

00004788 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    4788:	b580      	push	{r7, lr}
    478a:	b084      	sub	sp, #16
    478c:	af00      	add	r7, sp, #0
    478e:	6078      	str	r0, [r7, #4]
    4790:	460b      	mov	r3, r1
    4792:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4798:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    479a:	68fb      	ldr	r3, [r7, #12]
    479c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    47a0:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    47a2:	78fb      	ldrb	r3, [r7, #3]
    47a4:	039b      	lsls	r3, r3, #14
    47a6:	461a      	mov	r2, r3
    47a8:	68fb      	ldr	r3, [r7, #12]
    47aa:	4313      	orrs	r3, r2
    47ac:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	68fa      	ldr	r2, [r7, #12]
    47b2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    47b4:	2104      	movs	r1, #4
    47b6:	6878      	ldr	r0, [r7, #4]
    47b8:	4b02      	ldr	r3, [pc, #8]	; (47c4 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    47ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    47bc:	bf00      	nop
    47be:	3710      	adds	r7, #16
    47c0:	46bd      	mov	sp, r7
    47c2:	bd80      	pop	{r7, pc}
    47c4:	0000444d 	.word	0x0000444d

000047c8 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b082      	sub	sp, #8
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    47d2:	687b      	ldr	r3, [r7, #4]
    47d4:	683a      	ldr	r2, [r7, #0]
    47d6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    47d8:	2104      	movs	r1, #4
    47da:	6878      	ldr	r0, [r7, #4]
    47dc:	4b02      	ldr	r3, [pc, #8]	; (47e8 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    47de:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    47e0:	bf00      	nop
    47e2:	3708      	adds	r7, #8
    47e4:	46bd      	mov	sp, r7
    47e6:	bd80      	pop	{r7, pc}
    47e8:	0000444d 	.word	0x0000444d

000047ec <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    47f4:	2104      	movs	r1, #4
    47f6:	6878      	ldr	r0, [r7, #4]
    47f8:	4b03      	ldr	r3, [pc, #12]	; (4808 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    47fa:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4800:	4618      	mov	r0, r3
    4802:	3708      	adds	r7, #8
    4804:	46bd      	mov	sp, r7
    4806:	bd80      	pop	{r7, pc}
    4808:	0000444d 	.word	0x0000444d

0000480c <hri_sercomi2cs_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
    480c:	b480      	push	{r7}
    480e:	b083      	sub	sp, #12
    4810:	af00      	add	r7, sp, #0
    4812:	6078      	str	r0, [r7, #4]
    4814:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	683a      	ldr	r2, [r7, #0]
    481a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    481c:	bf00      	nop
    481e:	370c      	adds	r7, #12
    4820:	46bd      	mov	sp, r7
    4822:	f85d 7b04 	ldr.w	r7, [sp], #4
    4826:	4770      	bx	lr

00004828 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    4828:	b580      	push	{r7, lr}
    482a:	b082      	sub	sp, #8
    482c:	af00      	add	r7, sp, #0
    482e:	6078      	str	r0, [r7, #4]
    4830:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    4832:	687b      	ldr	r3, [r7, #4]
    4834:	683a      	ldr	r2, [r7, #0]
    4836:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4838:	2104      	movs	r1, #4
    483a:	6878      	ldr	r0, [r7, #4]
    483c:	4b02      	ldr	r3, [pc, #8]	; (4848 <hri_sercomi2cm_write_DATA_reg+0x20>)
    483e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    4840:	bf00      	nop
    4842:	3708      	adds	r7, #8
    4844:	46bd      	mov	sp, r7
    4846:	bd80      	pop	{r7, pc}
    4848:	0000444d 	.word	0x0000444d

0000484c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    484c:	b580      	push	{r7, lr}
    484e:	b082      	sub	sp, #8
    4850:	af00      	add	r7, sp, #0
    4852:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    4854:	2104      	movs	r1, #4
    4856:	6878      	ldr	r0, [r7, #4]
    4858:	4b03      	ldr	r3, [pc, #12]	; (4868 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    485a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    4860:	4618      	mov	r0, r3
    4862:	3708      	adds	r7, #8
    4864:	46bd      	mov	sp, r7
    4866:	bd80      	pop	{r7, pc}
    4868:	0000444d 	.word	0x0000444d

0000486c <hri_sercomi2cs_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
    486c:	b480      	push	{r7}
    486e:	b083      	sub	sp, #12
    4870:	af00      	add	r7, sp, #0
    4872:	6078      	str	r0, [r7, #4]
    4874:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	683a      	ldr	r2, [r7, #0]
    487a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    487c:	bf00      	nop
    487e:	370c      	adds	r7, #12
    4880:	46bd      	mov	sp, r7
    4882:	f85d 7b04 	ldr.w	r7, [sp], #4
    4886:	4770      	bx	lr

00004888 <hri_sercomi2cs_read_DATA_reg>:
	((Sercom *)hw)->I2CS.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
    4888:	b480      	push	{r7}
    488a:	b083      	sub	sp, #12
    488c:	af00      	add	r7, sp, #0
    488e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CS.DATA.reg;
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    4894:	4618      	mov	r0, r3
    4896:	370c      	adds	r7, #12
    4898:	46bd      	mov	sp, r7
    489a:	f85d 7b04 	ldr.w	r7, [sp], #4
    489e:	4770      	bx	lr

000048a0 <hri_sercomi2cs_get_STATUS_DIR_bit>:
	((Sercom *)hw)->I2CS.STATUS.reg = SERCOM_I2CS_STATUS_RXNACK;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cs_get_STATUS_DIR_bit(const void *const hw)
{
    48a0:	b480      	push	{r7}
    48a2:	b083      	sub	sp, #12
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR) >> SERCOM_I2CS_STATUS_DIR_Pos;
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	8b5b      	ldrh	r3, [r3, #26]
    48ac:	b29b      	uxth	r3, r3
    48ae:	08db      	lsrs	r3, r3, #3
    48b0:	f003 0301 	and.w	r3, r3, #1
    48b4:	2b00      	cmp	r3, #0
    48b6:	bf14      	ite	ne
    48b8:	2301      	movne	r3, #1
    48ba:	2300      	moveq	r3, #0
    48bc:	b2db      	uxtb	r3, r3
}
    48be:	4618      	mov	r0, r3
    48c0:	370c      	adds	r7, #12
    48c2:	46bd      	mov	sp, r7
    48c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c8:	4770      	bx	lr
	...

000048cc <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    48cc:	b580      	push	{r7, lr}
    48ce:	b082      	sub	sp, #8
    48d0:	af00      	add	r7, sp, #0
    48d2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    48d4:	2104      	movs	r1, #4
    48d6:	6878      	ldr	r0, [r7, #4]
    48d8:	4b04      	ldr	r3, [pc, #16]	; (48ec <hri_sercomi2cm_read_STATUS_reg+0x20>)
    48da:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	8b5b      	ldrh	r3, [r3, #26]
    48e0:	b29b      	uxth	r3, r3
}
    48e2:	4618      	mov	r0, r3
    48e4:	3708      	adds	r7, #8
    48e6:	46bd      	mov	sp, r7
    48e8:	bd80      	pop	{r7, pc}
    48ea:	bf00      	nop
    48ec:	0000444d 	.word	0x0000444d

000048f0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    48f0:	b4b0      	push	{r4, r5, r7}
    48f2:	b08d      	sub	sp, #52	; 0x34
    48f4:	af00      	add	r7, sp, #0
    48f6:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    48f8:	4b13      	ldr	r3, [pc, #76]	; (4948 <_sercom_get_hardware_index+0x58>)
    48fa:	f107 040c 	add.w	r4, r7, #12
    48fe:	461d      	mov	r5, r3
    4900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4904:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    490c:	2300      	movs	r3, #0
    490e:	62fb      	str	r3, [r7, #44]	; 0x2c
    4910:	e010      	b.n	4934 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    4912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4914:	009b      	lsls	r3, r3, #2
    4916:	f107 0230 	add.w	r2, r7, #48	; 0x30
    491a:	4413      	add	r3, r2
    491c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    4920:	461a      	mov	r2, r3
    4922:	687b      	ldr	r3, [r7, #4]
    4924:	429a      	cmp	r2, r3
    4926:	d102      	bne.n	492e <_sercom_get_hardware_index+0x3e>
			return i;
    4928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    492a:	b2db      	uxtb	r3, r3
    492c:	e006      	b.n	493c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4930:	3301      	adds	r3, #1
    4932:	62fb      	str	r3, [r7, #44]	; 0x2c
    4934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4936:	2b07      	cmp	r3, #7
    4938:	d9eb      	bls.n	4912 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    493a:	2300      	movs	r3, #0
}
    493c:	4618      	mov	r0, r3
    493e:	3734      	adds	r7, #52	; 0x34
    4940:	46bd      	mov	sp, r7
    4942:	bcb0      	pop	{r4, r5, r7}
    4944:	4770      	bx	lr
    4946:	bf00      	nop
    4948:	00009064 	.word	0x00009064

0000494c <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    494c:	b480      	push	{r7}
    494e:	b083      	sub	sp, #12
    4950:	af00      	add	r7, sp, #0
    4952:	6078      	str	r0, [r7, #4]
    4954:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM0) {
    4956:	687b      	ldr	r3, [r7, #4]
    4958:	4a13      	ldr	r2, [pc, #76]	; (49a8 <_sercom_init_irq_param+0x5c>)
    495a:	4293      	cmp	r3, r2
    495c:	d102      	bne.n	4964 <_sercom_init_irq_param+0x18>
		_sercom0_dev = (struct _i2c_m_async_device *)dev;
    495e:	4a13      	ldr	r2, [pc, #76]	; (49ac <_sercom_init_irq_param+0x60>)
    4960:	683b      	ldr	r3, [r7, #0]
    4962:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM1) {
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	4a12      	ldr	r2, [pc, #72]	; (49b0 <_sercom_init_irq_param+0x64>)
    4968:	4293      	cmp	r3, r2
    496a:	d102      	bne.n	4972 <_sercom_init_irq_param+0x26>
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
    496c:	4a11      	ldr	r2, [pc, #68]	; (49b4 <_sercom_init_irq_param+0x68>)
    496e:	683b      	ldr	r3, [r7, #0]
    4970:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM2) {
    4972:	687b      	ldr	r3, [r7, #4]
    4974:	4a10      	ldr	r2, [pc, #64]	; (49b8 <_sercom_init_irq_param+0x6c>)
    4976:	4293      	cmp	r3, r2
    4978:	d102      	bne.n	4980 <_sercom_init_irq_param+0x34>
		_sercom2_dev = (struct _i2c_s_async_device *)dev;
    497a:	4a10      	ldr	r2, [pc, #64]	; (49bc <_sercom_init_irq_param+0x70>)
    497c:	683b      	ldr	r3, [r7, #0]
    497e:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM3) {
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	4a0f      	ldr	r2, [pc, #60]	; (49c0 <_sercom_init_irq_param+0x74>)
    4984:	4293      	cmp	r3, r2
    4986:	d102      	bne.n	498e <_sercom_init_irq_param+0x42>
		_sercom3_dev = (struct _i2c_m_async_device *)dev;
    4988:	4a0e      	ldr	r2, [pc, #56]	; (49c4 <_sercom_init_irq_param+0x78>)
    498a:	683b      	ldr	r3, [r7, #0]
    498c:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM6) {
    498e:	687b      	ldr	r3, [r7, #4]
    4990:	4a0d      	ldr	r2, [pc, #52]	; (49c8 <_sercom_init_irq_param+0x7c>)
    4992:	4293      	cmp	r3, r2
    4994:	d102      	bne.n	499c <_sercom_init_irq_param+0x50>
		_sercom6_dev = (struct _i2c_m_async_device *)dev;
    4996:	4a0d      	ldr	r2, [pc, #52]	; (49cc <_sercom_init_irq_param+0x80>)
    4998:	683b      	ldr	r3, [r7, #0]
    499a:	6013      	str	r3, [r2, #0]
	}
}
    499c:	bf00      	nop
    499e:	370c      	adds	r7, #12
    49a0:	46bd      	mov	sp, r7
    49a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a6:	4770      	bx	lr
    49a8:	40003000 	.word	0x40003000
    49ac:	20000410 	.word	0x20000410
    49b0:	40003400 	.word	0x40003400
    49b4:	20000414 	.word	0x20000414
    49b8:	41012000 	.word	0x41012000
    49bc:	20000418 	.word	0x20000418
    49c0:	41014000 	.word	0x41014000
    49c4:	2000041c 	.word	0x2000041c
    49c8:	43000800 	.word	0x43000800
    49cc:	20000420 	.word	0x20000420

000049d0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    49d0:	b580      	push	{r7, lr}
    49d2:	b084      	sub	sp, #16
    49d4:	af00      	add	r7, sp, #0
    49d6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    49d8:	6878      	ldr	r0, [r7, #4]
    49da:	4b13      	ldr	r3, [pc, #76]	; (4a28 <_get_i2cm_index+0x58>)
    49dc:	4798      	blx	r3
    49de:	4603      	mov	r3, r0
    49e0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    49e2:	2300      	movs	r3, #0
    49e4:	73fb      	strb	r3, [r7, #15]
    49e6:	e010      	b.n	4a0a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    49e8:	7bfa      	ldrb	r2, [r7, #15]
    49ea:	4910      	ldr	r1, [pc, #64]	; (4a2c <_get_i2cm_index+0x5c>)
    49ec:	4613      	mov	r3, r2
    49ee:	005b      	lsls	r3, r3, #1
    49f0:	4413      	add	r3, r2
    49f2:	00db      	lsls	r3, r3, #3
    49f4:	440b      	add	r3, r1
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	7bba      	ldrb	r2, [r7, #14]
    49fa:	429a      	cmp	r2, r3
    49fc:	d102      	bne.n	4a04 <_get_i2cm_index+0x34>
			return i;
    49fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a02:	e00d      	b.n	4a20 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    4a04:	7bfb      	ldrb	r3, [r7, #15]
    4a06:	3301      	adds	r3, #1
    4a08:	73fb      	strb	r3, [r7, #15]
    4a0a:	7bfb      	ldrb	r3, [r7, #15]
    4a0c:	2b03      	cmp	r3, #3
    4a0e:	d9eb      	bls.n	49e8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    4a10:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    4a14:	4906      	ldr	r1, [pc, #24]	; (4a30 <_get_i2cm_index+0x60>)
    4a16:	2000      	movs	r0, #0
    4a18:	4b06      	ldr	r3, [pc, #24]	; (4a34 <_get_i2cm_index+0x64>)
    4a1a:	4798      	blx	r3
	return -1;
    4a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
    4a20:	4618      	mov	r0, r3
    4a22:	3710      	adds	r7, #16
    4a24:	46bd      	mov	sp, r7
    4a26:	bd80      	pop	{r7, pc}
    4a28:	000048f1 	.word	0x000048f1
    4a2c:	20000020 	.word	0x20000020
    4a30:	00009048 	.word	0x00009048
    4a34:	00002249 	.word	0x00002249

00004a38 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    4a38:	b580      	push	{r7, lr}
    4a3a:	b082      	sub	sp, #8
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    4a40:	2103      	movs	r1, #3
    4a42:	6878      	ldr	r0, [r7, #4]
    4a44:	4b02      	ldr	r3, [pc, #8]	; (4a50 <_sercom_i2c_send_stop+0x18>)
    4a46:	4798      	blx	r3
}
    4a48:	bf00      	nop
    4a4a:	3708      	adds	r7, #8
    4a4c:	46bd      	mov	sp, r7
    4a4e:	bd80      	pop	{r7, pc}
    4a50:	000046fd 	.word	0x000046fd

00004a54 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    4a54:	b590      	push	{r4, r7, lr}
    4a56:	b087      	sub	sp, #28
    4a58:	af00      	add	r7, sp, #0
    4a5a:	60f8      	str	r0, [r7, #12]
    4a5c:	60b9      	str	r1, [r7, #8]
    4a5e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    4a60:	68f8      	ldr	r0, [r7, #12]
    4a62:	4b7d      	ldr	r3, [pc, #500]	; (4c58 <_sercom_i2c_sync_analyse_flags+0x204>)
    4a64:	4798      	blx	r3
    4a66:	4603      	mov	r3, r0
    4a68:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    4a6a:	68f8      	ldr	r0, [r7, #12]
    4a6c:	4b7b      	ldr	r3, [pc, #492]	; (4c5c <_sercom_i2c_sync_analyse_flags+0x208>)
    4a6e:	4798      	blx	r3
    4a70:	4603      	mov	r3, r0
    4a72:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    4a74:	68bb      	ldr	r3, [r7, #8]
    4a76:	f003 0301 	and.w	r3, r3, #1
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	f000 8095 	beq.w	4baa <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    4a80:	8a7b      	ldrh	r3, [r7, #18]
    4a82:	f003 0302 	and.w	r3, r3, #2
    4a86:	2b00      	cmp	r3, #0
    4a88:	d01d      	beq.n	4ac6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    4a8a:	68f8      	ldr	r0, [r7, #12]
    4a8c:	4b74      	ldr	r3, [pc, #464]	; (4c60 <_sercom_i2c_sync_analyse_flags+0x20c>)
    4a8e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	885b      	ldrh	r3, [r3, #2]
    4a94:	b29b      	uxth	r3, r3
    4a96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4a9a:	b29a      	uxth	r2, r3
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	885b      	ldrh	r3, [r3, #2]
    4aa4:	b29b      	uxth	r3, r3
    4aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4aaa:	b29a      	uxth	r2, r3
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    4ab0:	8a7b      	ldrh	r3, [r7, #18]
    4ab2:	f003 0301 	and.w	r3, r3, #1
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d002      	beq.n	4ac0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    4aba:	f06f 0304 	mvn.w	r3, #4
    4abe:	e0c6      	b.n	4c4e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    4ac0:	f06f 0303 	mvn.w	r3, #3
    4ac4:	e0c3      	b.n	4c4e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    4ac6:	8a7b      	ldrh	r3, [r7, #18]
    4ac8:	f003 0304 	and.w	r3, r3, #4
    4acc:	2b00      	cmp	r3, #0
    4ace:	d01f      	beq.n	4b10 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    4ad0:	687b      	ldr	r3, [r7, #4]
    4ad2:	685b      	ldr	r3, [r3, #4]
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	dd07      	ble.n	4ae8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	885b      	ldrh	r3, [r3, #2]
    4adc:	b29b      	uxth	r3, r3
    4ade:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4ae2:	b29a      	uxth	r2, r3
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	885b      	ldrh	r3, [r3, #2]
    4aec:	b29b      	uxth	r3, r3
    4aee:	b21b      	sxth	r3, r3
    4af0:	2b00      	cmp	r3, #0
    4af2:	da02      	bge.n	4afa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    4af4:	68f8      	ldr	r0, [r7, #12]
    4af6:	4b5b      	ldr	r3, [pc, #364]	; (4c64 <_sercom_i2c_sync_analyse_flags+0x210>)
    4af8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	885b      	ldrh	r3, [r3, #2]
    4afe:	b29b      	uxth	r3, r3
    4b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4b04:	b29a      	uxth	r2, r3
    4b06:	687b      	ldr	r3, [r7, #4]
    4b08:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    4b0a:	f06f 0301 	mvn.w	r3, #1
    4b0e:	e09e      	b.n	4c4e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	885b      	ldrh	r3, [r3, #2]
    4b14:	b29b      	uxth	r3, r3
    4b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d01c      	beq.n	4b58 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    4b1e:	687b      	ldr	r3, [r7, #4]
    4b20:	881b      	ldrh	r3, [r3, #0]
    4b22:	121b      	asrs	r3, r3, #8
    4b24:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4b26:	f003 0406 	and.w	r4, r3, #6
    4b2a:	68f8      	ldr	r0, [r7, #12]
    4b2c:	4b4e      	ldr	r3, [pc, #312]	; (4c68 <_sercom_i2c_sync_analyse_flags+0x214>)
    4b2e:	4798      	blx	r3
    4b30:	4603      	mov	r3, r0
    4b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    4b36:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    4b38:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    4b3c:	4619      	mov	r1, r3
    4b3e:	68f8      	ldr	r0, [r7, #12]
    4b40:	4b4a      	ldr	r3, [pc, #296]	; (4c6c <_sercom_i2c_sync_analyse_flags+0x218>)
    4b42:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    4b44:	687b      	ldr	r3, [r7, #4]
    4b46:	885b      	ldrh	r3, [r3, #2]
    4b48:	b29b      	uxth	r3, r3
    4b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4b4e:	b29a      	uxth	r2, r3
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    4b54:	2300      	movs	r3, #0
    4b56:	e07a      	b.n	4c4e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	685b      	ldr	r3, [r3, #4]
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	d111      	bne.n	4b84 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	885b      	ldrh	r3, [r3, #2]
    4b64:	b29b      	uxth	r3, r3
    4b66:	b21b      	sxth	r3, r3
    4b68:	2b00      	cmp	r3, #0
    4b6a:	da02      	bge.n	4b72 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    4b6c:	68f8      	ldr	r0, [r7, #12]
    4b6e:	4b3d      	ldr	r3, [pc, #244]	; (4c64 <_sercom_i2c_sync_analyse_flags+0x210>)
    4b70:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    4b72:	687b      	ldr	r3, [r7, #4]
    4b74:	885b      	ldrh	r3, [r3, #2]
    4b76:	b29b      	uxth	r3, r3
    4b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4b7c:	b29a      	uxth	r2, r3
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	805a      	strh	r2, [r3, #2]
    4b82:	e010      	b.n	4ba6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	689b      	ldr	r3, [r3, #8]
    4b88:	781b      	ldrb	r3, [r3, #0]
    4b8a:	4619      	mov	r1, r3
    4b8c:	68f8      	ldr	r0, [r7, #12]
    4b8e:	4b38      	ldr	r3, [pc, #224]	; (4c70 <_sercom_i2c_sync_analyse_flags+0x21c>)
    4b90:	4798      	blx	r3
				msg->buffer++;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	689b      	ldr	r3, [r3, #8]
    4b96:	1c5a      	adds	r2, r3, #1
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	609a      	str	r2, [r3, #8]
				msg->len--;
    4b9c:	687b      	ldr	r3, [r7, #4]
    4b9e:	685b      	ldr	r3, [r3, #4]
    4ba0:	1e5a      	subs	r2, r3, #1
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    4ba6:	2300      	movs	r3, #0
    4ba8:	e051      	b.n	4c4e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    4baa:	68bb      	ldr	r3, [r7, #8]
    4bac:	f003 0302 	and.w	r3, r3, #2
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d04b      	beq.n	4c4c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	685b      	ldr	r3, [r3, #4]
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d041      	beq.n	4c40 <_sercom_i2c_sync_analyse_flags+0x1ec>
    4bbc:	8a7b      	ldrh	r3, [r7, #18]
    4bbe:	f003 0304 	and.w	r3, r3, #4
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d13c      	bne.n	4c40 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    4bc6:	687b      	ldr	r3, [r7, #4]
    4bc8:	685b      	ldr	r3, [r3, #4]
    4bca:	1e5a      	subs	r2, r3, #1
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	685b      	ldr	r3, [r3, #4]
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	d102      	bne.n	4bde <_sercom_i2c_sync_analyse_flags+0x18a>
    4bd8:	697b      	ldr	r3, [r7, #20]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d006      	beq.n	4bec <_sercom_i2c_sync_analyse_flags+0x198>
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	685b      	ldr	r3, [r3, #4]
    4be2:	2b01      	cmp	r3, #1
    4be4:	d105      	bne.n	4bf2 <_sercom_i2c_sync_analyse_flags+0x19e>
    4be6:	697b      	ldr	r3, [r7, #20]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d002      	beq.n	4bf2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    4bec:	68f8      	ldr	r0, [r7, #12]
    4bee:	4b21      	ldr	r3, [pc, #132]	; (4c74 <_sercom_i2c_sync_analyse_flags+0x220>)
    4bf0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	685b      	ldr	r3, [r3, #4]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d113      	bne.n	4c22 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	885b      	ldrh	r3, [r3, #2]
    4bfe:	b29b      	uxth	r3, r3
    4c00:	b21b      	sxth	r3, r3
    4c02:	2b00      	cmp	r3, #0
    4c04:	da05      	bge.n	4c12 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    4c06:	68f8      	ldr	r0, [r7, #12]
    4c08:	4b1b      	ldr	r3, [pc, #108]	; (4c78 <_sercom_i2c_sync_analyse_flags+0x224>)
    4c0a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    4c0c:	68f8      	ldr	r0, [r7, #12]
    4c0e:	4b15      	ldr	r3, [pc, #84]	; (4c64 <_sercom_i2c_sync_analyse_flags+0x210>)
    4c10:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    4c12:	687b      	ldr	r3, [r7, #4]
    4c14:	885b      	ldrh	r3, [r3, #2]
    4c16:	b29b      	uxth	r3, r3
    4c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4c1c:	b29a      	uxth	r2, r3
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    4c22:	687b      	ldr	r3, [r7, #4]
    4c24:	689c      	ldr	r4, [r3, #8]
    4c26:	1c62      	adds	r2, r4, #1
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	609a      	str	r2, [r3, #8]
    4c2c:	68f8      	ldr	r0, [r7, #12]
    4c2e:	4b13      	ldr	r3, [pc, #76]	; (4c7c <_sercom_i2c_sync_analyse_flags+0x228>)
    4c30:	4798      	blx	r3
    4c32:	4603      	mov	r3, r0
    4c34:	b2db      	uxtb	r3, r3
    4c36:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    4c38:	68f8      	ldr	r0, [r7, #12]
    4c3a:	4b11      	ldr	r3, [pc, #68]	; (4c80 <_sercom_i2c_sync_analyse_flags+0x22c>)
    4c3c:	4798      	blx	r3
    4c3e:	e005      	b.n	4c4c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    4c40:	68f8      	ldr	r0, [r7, #12]
    4c42:	4b0f      	ldr	r3, [pc, #60]	; (4c80 <_sercom_i2c_sync_analyse_flags+0x22c>)
    4c44:	4798      	blx	r3
			return I2C_NACK;
    4c46:	f06f 0301 	mvn.w	r3, #1
    4c4a:	e000      	b.n	4c4e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    4c4c:	2300      	movs	r3, #0
}
    4c4e:	4618      	mov	r0, r3
    4c50:	371c      	adds	r7, #28
    4c52:	46bd      	mov	sp, r7
    4c54:	bd90      	pop	{r4, r7, pc}
    4c56:	bf00      	nop
    4c58:	0000455d 	.word	0x0000455d
    4c5c:	000048cd 	.word	0x000048cd
    4c60:	000044e5 	.word	0x000044e5
    4c64:	00004a39 	.word	0x00004a39
    4c68:	000047ed 	.word	0x000047ed
    4c6c:	000047c9 	.word	0x000047c9
    4c70:	00004829 	.word	0x00004829
    4c74:	000046ad 	.word	0x000046ad
    4c78:	00004685 	.word	0x00004685
    4c7c:	0000484d 	.word	0x0000484d
    4c80:	000044ff 	.word	0x000044ff

00004c84 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    4c84:	b580      	push	{r7, lr}
    4c86:	b086      	sub	sp, #24
    4c88:	af00      	add	r7, sp, #0
    4c8a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    4c8c:	687b      	ldr	r3, [r7, #4]
    4c8e:	691b      	ldr	r3, [r3, #16]
    4c90:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    4c92:	6938      	ldr	r0, [r7, #16]
    4c94:	4b35      	ldr	r3, [pc, #212]	; (4d6c <_sercom_i2c_m_irq_handler+0xe8>)
    4c96:	4798      	blx	r3
    4c98:	4603      	mov	r3, r0
    4c9a:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    4c9c:	2300      	movs	r3, #0
    4c9e:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	bf14      	ite	ne
    4ca6:	2301      	movne	r3, #1
    4ca8:	2300      	moveq	r3, #0
    4caa:	b2db      	uxtb	r3, r3
    4cac:	f240 4236 	movw	r2, #1078	; 0x436
    4cb0:	492f      	ldr	r1, [pc, #188]	; (4d70 <_sercom_i2c_m_irq_handler+0xec>)
    4cb2:	4618      	mov	r0, r3
    4cb4:	4b2f      	ldr	r3, [pc, #188]	; (4d74 <_sercom_i2c_m_irq_handler+0xf0>)
    4cb6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	691b      	ldr	r3, [r3, #16]
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	bf14      	ite	ne
    4cc0:	2301      	movne	r3, #1
    4cc2:	2300      	moveq	r3, #0
    4cc4:	b2db      	uxtb	r3, r3
    4cc6:	f240 4237 	movw	r2, #1079	; 0x437
    4cca:	4929      	ldr	r1, [pc, #164]	; (4d70 <_sercom_i2c_m_irq_handler+0xec>)
    4ccc:	4618      	mov	r0, r3
    4cce:	4b29      	ldr	r3, [pc, #164]	; (4d74 <_sercom_i2c_m_irq_handler+0xf0>)
    4cd0:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    4cd2:	bf00      	nop
    4cd4:	68fb      	ldr	r3, [r7, #12]
    4cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d126      	bne.n	4d2c <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	461a      	mov	r2, r3
    4ce2:	68f9      	ldr	r1, [r7, #12]
    4ce4:	6938      	ldr	r0, [r7, #16]
    4ce6:	4b24      	ldr	r3, [pc, #144]	; (4d78 <_sercom_i2c_m_irq_handler+0xf4>)
    4ce8:	4798      	blx	r3
    4cea:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    4cec:	697b      	ldr	r3, [r7, #20]
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d11b      	bne.n	4d2a <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    4cf2:	68fb      	ldr	r3, [r7, #12]
    4cf4:	f003 0301 	and.w	r3, r3, #1
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d008      	beq.n	4d0e <_sercom_i2c_m_irq_handler+0x8a>
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	699b      	ldr	r3, [r3, #24]
    4d00:	2b00      	cmp	r3, #0
    4d02:	d004      	beq.n	4d0e <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	699b      	ldr	r3, [r3, #24]
    4d08:	6878      	ldr	r0, [r7, #4]
    4d0a:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    4d0c:	e02a      	b.n	4d64 <_sercom_i2c_m_irq_handler+0xe0>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    4d0e:	68fb      	ldr	r3, [r7, #12]
    4d10:	f003 0302 	and.w	r3, r3, #2
    4d14:	2b00      	cmp	r3, #0
    4d16:	d025      	beq.n	4d64 <_sercom_i2c_m_irq_handler+0xe0>
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	69db      	ldr	r3, [r3, #28]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d021      	beq.n	4d64 <_sercom_i2c_m_irq_handler+0xe0>
			i2c_dev->cb.rx_complete(i2c_dev);
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	69db      	ldr	r3, [r3, #28]
    4d24:	6878      	ldr	r0, [r7, #4]
    4d26:	4798      	blx	r3
		return;
    4d28:	e01c      	b.n	4d64 <_sercom_i2c_m_irq_handler+0xe0>
			break;
    4d2a:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    4d2c:	687b      	ldr	r3, [r7, #4]
    4d2e:	885b      	ldrh	r3, [r3, #2]
    4d30:	b29b      	uxth	r3, r3
    4d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4d36:	b29a      	uxth	r2, r3
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	695b      	ldr	r3, [r3, #20]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d010      	beq.n	4d66 <_sercom_i2c_m_irq_handler+0xe2>
		if (ret != I2C_OK) {
    4d44:	697b      	ldr	r3, [r7, #20]
    4d46:	2b00      	cmp	r3, #0
    4d48:	d005      	beq.n	4d56 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	695b      	ldr	r3, [r3, #20]
    4d4e:	6979      	ldr	r1, [r7, #20]
    4d50:	6878      	ldr	r0, [r7, #4]
    4d52:	4798      	blx	r3
    4d54:	e007      	b.n	4d66 <_sercom_i2c_m_irq_handler+0xe2>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	695b      	ldr	r3, [r3, #20]
    4d5a:	f06f 0104 	mvn.w	r1, #4
    4d5e:	6878      	ldr	r0, [r7, #4]
    4d60:	4798      	blx	r3
    4d62:	e000      	b.n	4d66 <_sercom_i2c_m_irq_handler+0xe2>
		return;
    4d64:	bf00      	nop
		}
	}
}
    4d66:	3718      	adds	r7, #24
    4d68:	46bd      	mov	sp, r7
    4d6a:	bd80      	pop	{r7, pc}
    4d6c:	00004519 	.word	0x00004519
    4d70:	00009048 	.word	0x00009048
    4d74:	00002249 	.word	0x00002249
    4d78:	00004a55 	.word	0x00004a55

00004d7c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b082      	sub	sp, #8
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    4d84:	6878      	ldr	r0, [r7, #4]
    4d86:	4b05      	ldr	r3, [pc, #20]	; (4d9c <_sercom_get_irq_num+0x20>)
    4d88:	4798      	blx	r3
    4d8a:	4603      	mov	r3, r0
    4d8c:	009b      	lsls	r3, r3, #2
    4d8e:	b2db      	uxtb	r3, r3
    4d90:	332e      	adds	r3, #46	; 0x2e
    4d92:	b2db      	uxtb	r3, r3
}
    4d94:	4618      	mov	r0, r3
    4d96:	3708      	adds	r7, #8
    4d98:	46bd      	mov	sp, r7
    4d9a:	bd80      	pop	{r7, pc}
    4d9c:	000048f1 	.word	0x000048f1

00004da0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    4da0:	b580      	push	{r7, lr}
    4da2:	b086      	sub	sp, #24
    4da4:	af00      	add	r7, sp, #0
    4da6:	6078      	str	r0, [r7, #4]
    4da8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	2b00      	cmp	r3, #0
    4dae:	bf14      	ite	ne
    4db0:	2301      	movne	r3, #1
    4db2:	2300      	moveq	r3, #0
    4db4:	b2db      	uxtb	r3, r3
    4db6:	f240 42ab 	movw	r2, #1195	; 0x4ab
    4dba:	491d      	ldr	r1, [pc, #116]	; (4e30 <_i2c_m_async_init+0x90>)
    4dbc:	4618      	mov	r0, r3
    4dbe:	4b1d      	ldr	r3, [pc, #116]	; (4e34 <_i2c_m_async_init+0x94>)
    4dc0:	4798      	blx	r3

	i2c_dev->hw = hw;
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	683a      	ldr	r2, [r7, #0]
    4dc6:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	6839      	ldr	r1, [r7, #0]
    4dcc:	4618      	mov	r0, r3
    4dce:	4b1a      	ldr	r3, [pc, #104]	; (4e38 <_i2c_m_async_init+0x98>)
    4dd0:	4798      	blx	r3
    4dd2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4dd4:	68fb      	ldr	r3, [r7, #12]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d001      	beq.n	4dde <_i2c_m_async_init+0x3e>
		return init_status;
    4dda:	68fb      	ldr	r3, [r7, #12]
    4ddc:	e024      	b.n	4e28 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    4dde:	6879      	ldr	r1, [r7, #4]
    4de0:	6838      	ldr	r0, [r7, #0]
    4de2:	4b16      	ldr	r3, [pc, #88]	; (4e3c <_i2c_m_async_init+0x9c>)
    4de4:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    4de6:	6838      	ldr	r0, [r7, #0]
    4de8:	4b15      	ldr	r3, [pc, #84]	; (4e40 <_i2c_m_async_init+0xa0>)
    4dea:	4798      	blx	r3
    4dec:	4603      	mov	r3, r0
    4dee:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    4df0:	2300      	movs	r3, #0
    4df2:	613b      	str	r3, [r7, #16]
    4df4:	e014      	b.n	4e20 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    4df6:	7dfb      	ldrb	r3, [r7, #23]
    4df8:	b21b      	sxth	r3, r3
    4dfa:	4618      	mov	r0, r3
    4dfc:	4b11      	ldr	r3, [pc, #68]	; (4e44 <_i2c_m_async_init+0xa4>)
    4dfe:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    4e00:	7dfb      	ldrb	r3, [r7, #23]
    4e02:	b21b      	sxth	r3, r3
    4e04:	4618      	mov	r0, r3
    4e06:	4b10      	ldr	r3, [pc, #64]	; (4e48 <_i2c_m_async_init+0xa8>)
    4e08:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    4e0a:	7dfb      	ldrb	r3, [r7, #23]
    4e0c:	b21b      	sxth	r3, r3
    4e0e:	4618      	mov	r0, r3
    4e10:	4b0e      	ldr	r3, [pc, #56]	; (4e4c <_i2c_m_async_init+0xac>)
    4e12:	4798      	blx	r3
		irq++;
    4e14:	7dfb      	ldrb	r3, [r7, #23]
    4e16:	3301      	adds	r3, #1
    4e18:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    4e1a:	693b      	ldr	r3, [r7, #16]
    4e1c:	3301      	adds	r3, #1
    4e1e:	613b      	str	r3, [r7, #16]
    4e20:	693b      	ldr	r3, [r7, #16]
    4e22:	2b03      	cmp	r3, #3
    4e24:	d9e7      	bls.n	4df6 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    4e26:	2300      	movs	r3, #0
}
    4e28:	4618      	mov	r0, r3
    4e2a:	3718      	adds	r7, #24
    4e2c:	46bd      	mov	sp, r7
    4e2e:	bd80      	pop	{r7, pc}
    4e30:	00009048 	.word	0x00009048
    4e34:	00002249 	.word	0x00002249
    4e38:	00005069 	.word	0x00005069
    4e3c:	0000494d 	.word	0x0000494d
    4e40:	00004d7d 	.word	0x00004d7d
    4e44:	000043cd 	.word	0x000043cd
    4e48:	00004411 	.word	0x00004411
    4e4c:	00004391 	.word	0x00004391

00004e50 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    4e50:	b590      	push	{r4, r7, lr}
    4e52:	b087      	sub	sp, #28
    4e54:	af00      	add	r7, sp, #0
    4e56:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    4e58:	687b      	ldr	r3, [r7, #4]
    4e5a:	691b      	ldr	r3, [r3, #16]
    4e5c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    4e62:	6978      	ldr	r0, [r7, #20]
    4e64:	4b33      	ldr	r3, [pc, #204]	; (4f34 <_sercom_i2c_send_address+0xe4>)
    4e66:	4798      	blx	r3
    4e68:	4603      	mov	r3, r0
    4e6a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	bf14      	ite	ne
    4e72:	2301      	movne	r3, #1
    4e74:	2300      	moveq	r3, #0
    4e76:	b2db      	uxtb	r3, r3
    4e78:	f240 42d9 	movw	r2, #1241	; 0x4d9
    4e7c:	492e      	ldr	r1, [pc, #184]	; (4f38 <_sercom_i2c_send_address+0xe8>)
    4e7e:	4618      	mov	r0, r3
    4e80:	4b2e      	ldr	r3, [pc, #184]	; (4f3c <_sercom_i2c_send_address+0xec>)
    4e82:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    4e84:	693b      	ldr	r3, [r7, #16]
    4e86:	685b      	ldr	r3, [r3, #4]
    4e88:	2b01      	cmp	r3, #1
    4e8a:	d106      	bne.n	4e9a <_sercom_i2c_send_address+0x4a>
    4e8c:	68fb      	ldr	r3, [r7, #12]
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d003      	beq.n	4e9a <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    4e92:	6978      	ldr	r0, [r7, #20]
    4e94:	4b2a      	ldr	r3, [pc, #168]	; (4f40 <_sercom_i2c_send_address+0xf0>)
    4e96:	4798      	blx	r3
    4e98:	e002      	b.n	4ea0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    4e9a:	6978      	ldr	r0, [r7, #20]
    4e9c:	4b29      	ldr	r3, [pc, #164]	; (4f44 <_sercom_i2c_send_address+0xf4>)
    4e9e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    4ea0:	693b      	ldr	r3, [r7, #16]
    4ea2:	881b      	ldrh	r3, [r3, #0]
    4ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	d022      	beq.n	4ef2 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    4eac:	693b      	ldr	r3, [r7, #16]
    4eae:	885b      	ldrh	r3, [r3, #2]
    4eb0:	b29b      	uxth	r3, r3
    4eb2:	f003 0301 	and.w	r3, r3, #1
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d007      	beq.n	4eca <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    4eba:	693b      	ldr	r3, [r7, #16]
    4ebc:	885b      	ldrh	r3, [r3, #2]
    4ebe:	b29b      	uxth	r3, r3
    4ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4ec4:	b29a      	uxth	r2, r3
    4ec6:	693b      	ldr	r3, [r7, #16]
    4ec8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    4eca:	693b      	ldr	r3, [r7, #16]
    4ecc:	881b      	ldrh	r3, [r3, #0]
    4ece:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4ed0:	f240 74fe 	movw	r4, #2046	; 0x7fe
    4ed4:	401c      	ands	r4, r3
    4ed6:	6978      	ldr	r0, [r7, #20]
    4ed8:	4b1b      	ldr	r3, [pc, #108]	; (4f48 <_sercom_i2c_send_address+0xf8>)
    4eda:	4798      	blx	r3
    4edc:	4603      	mov	r3, r0
    4ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    4ee2:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    4ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    4ee8:	4619      	mov	r1, r3
    4eea:	6978      	ldr	r0, [r7, #20]
    4eec:	4b17      	ldr	r3, [pc, #92]	; (4f4c <_sercom_i2c_send_address+0xfc>)
    4eee:	4798      	blx	r3
    4ef0:	e01a      	b.n	4f28 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    4ef2:	693b      	ldr	r3, [r7, #16]
    4ef4:	881b      	ldrh	r3, [r3, #0]
    4ef6:	005b      	lsls	r3, r3, #1
    4ef8:	b2db      	uxtb	r3, r3
    4efa:	693a      	ldr	r2, [r7, #16]
    4efc:	8852      	ldrh	r2, [r2, #2]
    4efe:	b292      	uxth	r2, r2
    4f00:	f002 0201 	and.w	r2, r2, #1
    4f04:	2a00      	cmp	r2, #0
    4f06:	bf14      	ite	ne
    4f08:	2201      	movne	r2, #1
    4f0a:	2200      	moveq	r2, #0
    4f0c:	b2d2      	uxtb	r2, r2
    4f0e:	4313      	orrs	r3, r2
    4f10:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4f12:	6978      	ldr	r0, [r7, #20]
    4f14:	4b0c      	ldr	r3, [pc, #48]	; (4f48 <_sercom_i2c_send_address+0xf8>)
    4f16:	4798      	blx	r3
    4f18:	4603      	mov	r3, r0
    4f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    4f1e:	4323      	orrs	r3, r4
    4f20:	4619      	mov	r1, r3
    4f22:	6978      	ldr	r0, [r7, #20]
    4f24:	4b09      	ldr	r3, [pc, #36]	; (4f4c <_sercom_i2c_send_address+0xfc>)
    4f26:	4798      	blx	r3
	}

	return ERR_NONE;
    4f28:	2300      	movs	r3, #0
}
    4f2a:	4618      	mov	r0, r3
    4f2c:	371c      	adds	r7, #28
    4f2e:	46bd      	mov	sp, r7
    4f30:	bd90      	pop	{r4, r7, pc}
    4f32:	bf00      	nop
    4f34:	0000455d 	.word	0x0000455d
    4f38:	00009048 	.word	0x00009048
    4f3c:	00002249 	.word	0x00002249
    4f40:	000046ad 	.word	0x000046ad
    4f44:	000046d5 	.word	0x000046d5
    4f48:	000047ed 	.word	0x000047ed
    4f4c:	000047c9 	.word	0x000047c9

00004f50 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    4f50:	b580      	push	{r7, lr}
    4f52:	b084      	sub	sp, #16
    4f54:	af00      	add	r7, sp, #0
    4f56:	6078      	str	r0, [r7, #4]
    4f58:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	bf14      	ite	ne
    4f60:	2301      	movne	r3, #1
    4f62:	2300      	moveq	r3, #0
    4f64:	b2db      	uxtb	r3, r3
    4f66:	f240 5201 	movw	r2, #1281	; 0x501
    4f6a:	492a      	ldr	r1, [pc, #168]	; (5014 <_i2c_m_async_transfer+0xc4>)
    4f6c:	4618      	mov	r0, r3
    4f6e:	4b2a      	ldr	r3, [pc, #168]	; (5018 <_i2c_m_async_transfer+0xc8>)
    4f70:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	691b      	ldr	r3, [r3, #16]
    4f76:	2b00      	cmp	r3, #0
    4f78:	bf14      	ite	ne
    4f7a:	2301      	movne	r3, #1
    4f7c:	2300      	moveq	r3, #0
    4f7e:	b2db      	uxtb	r3, r3
    4f80:	f240 5202 	movw	r2, #1282	; 0x502
    4f84:	4923      	ldr	r1, [pc, #140]	; (5014 <_i2c_m_async_transfer+0xc4>)
    4f86:	4618      	mov	r0, r3
    4f88:	4b23      	ldr	r3, [pc, #140]	; (5018 <_i2c_m_async_transfer+0xc8>)
    4f8a:	4798      	blx	r3
	ASSERT(msg);
    4f8c:	683b      	ldr	r3, [r7, #0]
    4f8e:	2b00      	cmp	r3, #0
    4f90:	bf14      	ite	ne
    4f92:	2301      	movne	r3, #1
    4f94:	2300      	moveq	r3, #0
    4f96:	b2db      	uxtb	r3, r3
    4f98:	f240 5203 	movw	r2, #1283	; 0x503
    4f9c:	491d      	ldr	r1, [pc, #116]	; (5014 <_i2c_m_async_transfer+0xc4>)
    4f9e:	4618      	mov	r0, r3
    4fa0:	4b1d      	ldr	r3, [pc, #116]	; (5018 <_i2c_m_async_transfer+0xc8>)
    4fa2:	4798      	blx	r3

	if (msg->len == 0) {
    4fa4:	683b      	ldr	r3, [r7, #0]
    4fa6:	685b      	ldr	r3, [r3, #4]
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d101      	bne.n	4fb0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    4fac:	2300      	movs	r3, #0
    4fae:	e02d      	b.n	500c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	885b      	ldrh	r3, [r3, #2]
    4fb4:	b29b      	uxth	r3, r3
    4fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d002      	beq.n	4fc4 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    4fbe:	f06f 0303 	mvn.w	r3, #3
    4fc2:	e023      	b.n	500c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    4fc4:	683b      	ldr	r3, [r7, #0]
    4fc6:	885b      	ldrh	r3, [r3, #2]
    4fc8:	b29b      	uxth	r3, r3
    4fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4fce:	b29a      	uxth	r2, r3
    4fd0:	683b      	ldr	r3, [r7, #0]
    4fd2:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	683a      	ldr	r2, [r7, #0]
    4fd8:	ca07      	ldmia	r2, {r0, r1, r2}
    4fda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    4fde:	687b      	ldr	r3, [r7, #4]
    4fe0:	691b      	ldr	r3, [r3, #16]
    4fe2:	4618      	mov	r0, r3
    4fe4:	4b0d      	ldr	r3, [pc, #52]	; (501c <_i2c_m_async_transfer+0xcc>)
    4fe6:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    4fe8:	6878      	ldr	r0, [r7, #4]
    4fea:	4b0d      	ldr	r3, [pc, #52]	; (5020 <_i2c_m_async_transfer+0xd0>)
    4fec:	4798      	blx	r3
    4fee:	60f8      	str	r0, [r7, #12]

	if (ret) {
    4ff0:	68fb      	ldr	r3, [r7, #12]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d009      	beq.n	500a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    4ff6:	687b      	ldr	r3, [r7, #4]
    4ff8:	885b      	ldrh	r3, [r3, #2]
    4ffa:	b29b      	uxth	r3, r3
    4ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5000:	b29a      	uxth	r2, r3
    5002:	687b      	ldr	r3, [r7, #4]
    5004:	805a      	strh	r2, [r3, #2]

		return ret;
    5006:	68fb      	ldr	r3, [r7, #12]
    5008:	e000      	b.n	500c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    500a:	2300      	movs	r3, #0
}
    500c:	4618      	mov	r0, r3
    500e:	3710      	adds	r7, #16
    5010:	46bd      	mov	sp, r7
    5012:	bd80      	pop	{r7, pc}
    5014:	00009048 	.word	0x00009048
    5018:	00002249 	.word	0x00002249
    501c:	0000465d 	.word	0x0000465d
    5020:	00004e51 	.word	0x00004e51

00005024 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    5024:	b480      	push	{r7}
    5026:	b085      	sub	sp, #20
    5028:	af00      	add	r7, sp, #0
    502a:	60f8      	str	r0, [r7, #12]
    502c:	460b      	mov	r3, r1
    502e:	607a      	str	r2, [r7, #4]
    5030:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    5032:	7afb      	ldrb	r3, [r7, #11]
    5034:	2b01      	cmp	r3, #1
    5036:	d008      	beq.n	504a <_i2c_m_async_register_callback+0x26>
    5038:	2b02      	cmp	r3, #2
    503a:	d00a      	beq.n	5052 <_i2c_m_async_register_callback+0x2e>
    503c:	2b00      	cmp	r3, #0
    503e:	d000      	beq.n	5042 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    5040:	e00b      	b.n	505a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    5042:	68fb      	ldr	r3, [r7, #12]
    5044:	687a      	ldr	r2, [r7, #4]
    5046:	615a      	str	r2, [r3, #20]
		break;
    5048:	e007      	b.n	505a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    504a:	68fb      	ldr	r3, [r7, #12]
    504c:	687a      	ldr	r2, [r7, #4]
    504e:	619a      	str	r2, [r3, #24]
		break;
    5050:	e003      	b.n	505a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    5052:	68fb      	ldr	r3, [r7, #12]
    5054:	687a      	ldr	r2, [r7, #4]
    5056:	61da      	str	r2, [r3, #28]
		break;
    5058:	bf00      	nop
	}

	return ERR_NONE;
    505a:	2300      	movs	r3, #0
}
    505c:	4618      	mov	r0, r3
    505e:	3714      	adds	r7, #20
    5060:	46bd      	mov	sp, r7
    5062:	f85d 7b04 	ldr.w	r7, [sp], #4
    5066:	4770      	bx	lr

00005068 <_i2c_m_sync_init_impl>:
		}
	}
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    5068:	b580      	push	{r7, lr}
    506a:	b084      	sub	sp, #16
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
    5070:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    5072:	6838      	ldr	r0, [r7, #0]
    5074:	4b42      	ldr	r3, [pc, #264]	; (5180 <_i2c_m_sync_init_impl+0x118>)
    5076:	4798      	blx	r3
    5078:	4603      	mov	r3, r0
    507a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    507c:	2101      	movs	r1, #1
    507e:	6838      	ldr	r0, [r7, #0]
    5080:	4b40      	ldr	r3, [pc, #256]	; (5184 <_i2c_m_sync_init_impl+0x11c>)
    5082:	4798      	blx	r3
    5084:	4603      	mov	r3, r0
    5086:	f083 0301 	eor.w	r3, r3, #1
    508a:	b2db      	uxtb	r3, r3
    508c:	2b00      	cmp	r3, #0
    508e:	d020      	beq.n	50d2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    5090:	7bfa      	ldrb	r2, [r7, #15]
    5092:	493d      	ldr	r1, [pc, #244]	; (5188 <_i2c_m_sync_init_impl+0x120>)
    5094:	4613      	mov	r3, r2
    5096:	005b      	lsls	r3, r3, #1
    5098:	4413      	add	r3, r2
    509a:	00db      	lsls	r3, r3, #3
    509c:	440b      	add	r3, r1
    509e:	3304      	adds	r3, #4
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	f003 031c 	and.w	r3, r3, #28
    50a6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    50a8:	2102      	movs	r1, #2
    50aa:	6838      	ldr	r0, [r7, #0]
    50ac:	4b37      	ldr	r3, [pc, #220]	; (518c <_i2c_m_sync_init_impl+0x124>)
    50ae:	4798      	blx	r3
    50b0:	4603      	mov	r3, r0
    50b2:	2b00      	cmp	r3, #0
    50b4:	d006      	beq.n	50c4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    50b6:	6838      	ldr	r0, [r7, #0]
    50b8:	4b35      	ldr	r3, [pc, #212]	; (5190 <_i2c_m_sync_init_impl+0x128>)
    50ba:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    50bc:	2102      	movs	r1, #2
    50be:	6838      	ldr	r0, [r7, #0]
    50c0:	4b34      	ldr	r3, [pc, #208]	; (5194 <_i2c_m_sync_init_impl+0x12c>)
    50c2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    50c4:	68bb      	ldr	r3, [r7, #8]
    50c6:	f043 0301 	orr.w	r3, r3, #1
    50ca:	4619      	mov	r1, r3
    50cc:	6838      	ldr	r0, [r7, #0]
    50ce:	4b32      	ldr	r3, [pc, #200]	; (5198 <_i2c_m_sync_init_impl+0x130>)
    50d0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    50d2:	2101      	movs	r1, #1
    50d4:	6838      	ldr	r0, [r7, #0]
    50d6:	4b2f      	ldr	r3, [pc, #188]	; (5194 <_i2c_m_sync_init_impl+0x12c>)
    50d8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    50da:	7bfa      	ldrb	r2, [r7, #15]
    50dc:	492a      	ldr	r1, [pc, #168]	; (5188 <_i2c_m_sync_init_impl+0x120>)
    50de:	4613      	mov	r3, r2
    50e0:	005b      	lsls	r3, r3, #1
    50e2:	4413      	add	r3, r2
    50e4:	00db      	lsls	r3, r3, #3
    50e6:	440b      	add	r3, r1
    50e8:	3304      	adds	r3, #4
    50ea:	681b      	ldr	r3, [r3, #0]
    50ec:	4619      	mov	r1, r3
    50ee:	6838      	ldr	r0, [r7, #0]
    50f0:	4b29      	ldr	r3, [pc, #164]	; (5198 <_i2c_m_sync_init_impl+0x130>)
    50f2:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    50f4:	7bfa      	ldrb	r2, [r7, #15]
    50f6:	4924      	ldr	r1, [pc, #144]	; (5188 <_i2c_m_sync_init_impl+0x120>)
    50f8:	4613      	mov	r3, r2
    50fa:	005b      	lsls	r3, r3, #1
    50fc:	4413      	add	r3, r2
    50fe:	00db      	lsls	r3, r3, #3
    5100:	440b      	add	r3, r1
    5102:	3308      	adds	r3, #8
    5104:	681b      	ldr	r3, [r3, #0]
    5106:	4619      	mov	r1, r3
    5108:	6838      	ldr	r0, [r7, #0]
    510a:	4b24      	ldr	r3, [pc, #144]	; (519c <_i2c_m_sync_init_impl+0x134>)
    510c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    510e:	7bfa      	ldrb	r2, [r7, #15]
    5110:	491d      	ldr	r1, [pc, #116]	; (5188 <_i2c_m_sync_init_impl+0x120>)
    5112:	4613      	mov	r3, r2
    5114:	005b      	lsls	r3, r3, #1
    5116:	4413      	add	r3, r2
    5118:	00db      	lsls	r3, r3, #3
    511a:	440b      	add	r3, r1
    511c:	330c      	adds	r3, #12
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	4619      	mov	r1, r3
    5122:	6838      	ldr	r0, [r7, #0]
    5124:	4b1e      	ldr	r3, [pc, #120]	; (51a0 <_i2c_m_sync_init_impl+0x138>)
    5126:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    5128:	7bfa      	ldrb	r2, [r7, #15]
    512a:	4917      	ldr	r1, [pc, #92]	; (5188 <_i2c_m_sync_init_impl+0x120>)
    512c:	4613      	mov	r3, r2
    512e:	005b      	lsls	r3, r3, #1
    5130:	4413      	add	r3, r2
    5132:	00db      	lsls	r3, r3, #3
    5134:	440b      	add	r3, r1
    5136:	3304      	adds	r3, #4
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	0e1b      	lsrs	r3, r3, #24
    513c:	b29b      	uxth	r3, r3
    513e:	f003 0303 	and.w	r3, r3, #3
    5142:	b29a      	uxth	r2, r3
    5144:	687b      	ldr	r3, [r7, #4]
    5146:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	899b      	ldrh	r3, [r3, #12]
    514c:	2b01      	cmp	r3, #1
    514e:	bf8c      	ite	hi
    5150:	2301      	movhi	r3, #1
    5152:	2300      	movls	r3, #0
    5154:	b2db      	uxtb	r3, r3
    5156:	4619      	mov	r1, r3
    5158:	6838      	ldr	r0, [r7, #0]
    515a:	4b12      	ldr	r3, [pc, #72]	; (51a4 <_i2c_m_sync_init_impl+0x13c>)
    515c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    515e:	7bfa      	ldrb	r2, [r7, #15]
    5160:	4909      	ldr	r1, [pc, #36]	; (5188 <_i2c_m_sync_init_impl+0x120>)
    5162:	4613      	mov	r3, r2
    5164:	005b      	lsls	r3, r3, #1
    5166:	4413      	add	r3, r2
    5168:	00db      	lsls	r3, r3, #3
    516a:	440b      	add	r3, r1
    516c:	3312      	adds	r3, #18
    516e:	881a      	ldrh	r2, [r3, #0]
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    5174:	2300      	movs	r3, #0
}
    5176:	4618      	mov	r0, r3
    5178:	3710      	adds	r7, #16
    517a:	46bd      	mov	sp, r7
    517c:	bd80      	pop	{r7, pc}
    517e:	bf00      	nop
    5180:	000049d1 	.word	0x000049d1
    5184:	00004471 	.word	0x00004471
    5188:	20000020 	.word	0x20000020
    518c:	0000458d 	.word	0x0000458d
    5190:	00004535 	.word	0x00004535
    5194:	0000444d 	.word	0x0000444d
    5198:	000045bd 	.word	0x000045bd
    519c:	0000472d 	.word	0x0000472d
    51a0:	0000476d 	.word	0x0000476d
    51a4:	00004789 	.word	0x00004789

000051a8 <_i2c_s_async_init>:

/**
 * \brief Initialize asynchronous I2C slave
 */
int32_t _i2c_s_async_init(struct _i2c_s_async_device *const device, void *const hw)
{
    51a8:	b580      	push	{r7, lr}
    51aa:	b086      	sub	sp, #24
    51ac:	af00      	add	r7, sp, #0
    51ae:	6078      	str	r0, [r7, #4]
    51b0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	2b00      	cmp	r3, #0
    51b6:	bf14      	ite	ne
    51b8:	2301      	movne	r3, #1
    51ba:	2300      	moveq	r3, #0
    51bc:	b2db      	uxtb	r3, r3
    51be:	f240 62f7 	movw	r2, #1783	; 0x6f7
    51c2:	491c      	ldr	r1, [pc, #112]	; (5234 <_i2c_s_async_init+0x8c>)
    51c4:	4618      	mov	r0, r3
    51c6:	4b1c      	ldr	r3, [pc, #112]	; (5238 <_i2c_s_async_init+0x90>)
    51c8:	4798      	blx	r3

	init_status = _i2c_s_init(hw);
    51ca:	6838      	ldr	r0, [r7, #0]
    51cc:	4b1b      	ldr	r3, [pc, #108]	; (523c <_i2c_s_async_init+0x94>)
    51ce:	4798      	blx	r3
    51d0:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    51d2:	68fb      	ldr	r3, [r7, #12]
    51d4:	2b00      	cmp	r3, #0
    51d6:	d001      	beq.n	51dc <_i2c_s_async_init+0x34>
		return init_status;
    51d8:	68fb      	ldr	r3, [r7, #12]
    51da:	e027      	b.n	522c <_i2c_s_async_init+0x84>
	}

	device->hw = hw;
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	683a      	ldr	r2, [r7, #0]
    51e0:	601a      	str	r2, [r3, #0]
	_sercom_init_irq_param(hw, (void *)device);
    51e2:	6879      	ldr	r1, [r7, #4]
    51e4:	6838      	ldr	r0, [r7, #0]
    51e6:	4b16      	ldr	r3, [pc, #88]	; (5240 <_i2c_s_async_init+0x98>)
    51e8:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    51ea:	6838      	ldr	r0, [r7, #0]
    51ec:	4b15      	ldr	r3, [pc, #84]	; (5244 <_i2c_s_async_init+0x9c>)
    51ee:	4798      	blx	r3
    51f0:	4603      	mov	r3, r0
    51f2:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    51f4:	2300      	movs	r3, #0
    51f6:	613b      	str	r3, [r7, #16]
    51f8:	e014      	b.n	5224 <_i2c_s_async_init+0x7c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    51fa:	7dfb      	ldrb	r3, [r7, #23]
    51fc:	b21b      	sxth	r3, r3
    51fe:	4618      	mov	r0, r3
    5200:	4b11      	ldr	r3, [pc, #68]	; (5248 <_i2c_s_async_init+0xa0>)
    5202:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    5204:	7dfb      	ldrb	r3, [r7, #23]
    5206:	b21b      	sxth	r3, r3
    5208:	4618      	mov	r0, r3
    520a:	4b10      	ldr	r3, [pc, #64]	; (524c <_i2c_s_async_init+0xa4>)
    520c:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    520e:	7dfb      	ldrb	r3, [r7, #23]
    5210:	b21b      	sxth	r3, r3
    5212:	4618      	mov	r0, r3
    5214:	4b0e      	ldr	r3, [pc, #56]	; (5250 <_i2c_s_async_init+0xa8>)
    5216:	4798      	blx	r3
		irq++;
    5218:	7dfb      	ldrb	r3, [r7, #23]
    521a:	3301      	adds	r3, #1
    521c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    521e:	693b      	ldr	r3, [r7, #16]
    5220:	3301      	adds	r3, #1
    5222:	613b      	str	r3, [r7, #16]
    5224:	693b      	ldr	r3, [r7, #16]
    5226:	2b03      	cmp	r3, #3
    5228:	d9e7      	bls.n	51fa <_i2c_s_async_init+0x52>
	}

	return ERR_NONE;
    522a:	2300      	movs	r3, #0
}
    522c:	4618      	mov	r0, r3
    522e:	3718      	adds	r7, #24
    5230:	46bd      	mov	sp, r7
    5232:	bd80      	pop	{r7, pc}
    5234:	00009048 	.word	0x00009048
    5238:	00002249 	.word	0x00002249
    523c:	0000534d 	.word	0x0000534d
    5240:	0000494d 	.word	0x0000494d
    5244:	00004d7d 	.word	0x00004d7d
    5248:	000043cd 	.word	0x000043cd
    524c:	00004411 	.word	0x00004411
    5250:	00004391 	.word	0x00004391

00005254 <_i2c_s_async_write_byte>:

/**
 * \brief Write a byte to the given I2C instance
 */
void _i2c_s_async_write_byte(struct _i2c_s_async_device *const device, const uint8_t data)
{
    5254:	b580      	push	{r7, lr}
    5256:	b082      	sub	sp, #8
    5258:	af00      	add	r7, sp, #0
    525a:	6078      	str	r0, [r7, #4]
    525c:	460b      	mov	r3, r1
    525e:	70fb      	strb	r3, [r7, #3]
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	78fa      	ldrb	r2, [r7, #3]
    5266:	4611      	mov	r1, r2
    5268:	4618      	mov	r0, r3
    526a:	4b03      	ldr	r3, [pc, #12]	; (5278 <_i2c_s_async_write_byte+0x24>)
    526c:	4798      	blx	r3
}
    526e:	bf00      	nop
    5270:	3708      	adds	r7, #8
    5272:	46bd      	mov	sp, r7
    5274:	bd80      	pop	{r7, pc}
    5276:	bf00      	nop
    5278:	0000486d 	.word	0x0000486d

0000527c <_sercom_i2c_s_irq_handler>:
 * \internal Sercom i2c slave interrupt handler
 *
 * \param[in] p The pointer to i2c slave device
 */
static void _sercom_i2c_s_irq_handler(struct _i2c_s_async_device *device)
{
    527c:	b590      	push	{r4, r7, lr}
    527e:	b085      	sub	sp, #20
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
	void *   hw    = device->hw;
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	681b      	ldr	r3, [r3, #0]
    5288:	60fb      	str	r3, [r7, #12]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    528a:	68f8      	ldr	r0, [r7, #12]
    528c:	4b2a      	ldr	r3, [pc, #168]	; (5338 <_sercom_i2c_s_irq_handler+0xbc>)
    528e:	4798      	blx	r3
    5290:	4603      	mov	r3, r0
    5292:	60bb      	str	r3, [r7, #8]

	if (flags & SERCOM_I2CS_INTFLAG_ERROR) {
    5294:	68bb      	ldr	r3, [r7, #8]
    5296:	f003 0380 	and.w	r3, r3, #128	; 0x80
    529a:	2b00      	cmp	r3, #0
    529c:	d011      	beq.n	52c2 <_sercom_i2c_s_irq_handler+0x46>
		ASSERT(device->cb.error);
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	685b      	ldr	r3, [r3, #4]
    52a2:	2b00      	cmp	r3, #0
    52a4:	bf14      	ite	ne
    52a6:	2301      	movne	r3, #1
    52a8:	2300      	moveq	r3, #0
    52aa:	b2db      	uxtb	r3, r3
    52ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    52b0:	4922      	ldr	r1, [pc, #136]	; (533c <_sercom_i2c_s_irq_handler+0xc0>)
    52b2:	4618      	mov	r0, r3
    52b4:	4b22      	ldr	r3, [pc, #136]	; (5340 <_sercom_i2c_s_irq_handler+0xc4>)
    52b6:	4798      	blx	r3
		device->cb.error(device);
    52b8:	687b      	ldr	r3, [r7, #4]
    52ba:	685b      	ldr	r3, [r3, #4]
    52bc:	6878      	ldr	r0, [r7, #4]
    52be:	4798      	blx	r3
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
#endif
	}
}
    52c0:	e036      	b.n	5330 <_sercom_i2c_s_irq_handler+0xb4>
	} else if (flags & SERCOM_I2CS_INTFLAG_DRDY) {
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	f003 0304 	and.w	r3, r3, #4
    52c8:	2b00      	cmp	r3, #0
    52ca:	d031      	beq.n	5330 <_sercom_i2c_s_irq_handler+0xb4>
		if (!hri_sercomi2cs_get_STATUS_DIR_bit(hw)) {
    52cc:	68f8      	ldr	r0, [r7, #12]
    52ce:	4b1d      	ldr	r3, [pc, #116]	; (5344 <_sercom_i2c_s_irq_handler+0xc8>)
    52d0:	4798      	blx	r3
    52d2:	4603      	mov	r3, r0
    52d4:	f083 0301 	eor.w	r3, r3, #1
    52d8:	b2db      	uxtb	r3, r3
    52da:	2b00      	cmp	r3, #0
    52dc:	d017      	beq.n	530e <_sercom_i2c_s_irq_handler+0x92>
			ASSERT(device->cb.rx_done);
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	68db      	ldr	r3, [r3, #12]
    52e2:	2b00      	cmp	r3, #0
    52e4:	bf14      	ite	ne
    52e6:	2301      	movne	r3, #1
    52e8:	2300      	moveq	r3, #0
    52ea:	b2db      	uxtb	r3, r3
    52ec:	f240 72d4 	movw	r2, #2004	; 0x7d4
    52f0:	4912      	ldr	r1, [pc, #72]	; (533c <_sercom_i2c_s_irq_handler+0xc0>)
    52f2:	4618      	mov	r0, r3
    52f4:	4b12      	ldr	r3, [pc, #72]	; (5340 <_sercom_i2c_s_irq_handler+0xc4>)
    52f6:	4798      	blx	r3
			device->cb.rx_done(device, hri_sercomi2cs_read_DATA_reg(hw));
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	68dc      	ldr	r4, [r3, #12]
    52fc:	68f8      	ldr	r0, [r7, #12]
    52fe:	4b12      	ldr	r3, [pc, #72]	; (5348 <_sercom_i2c_s_irq_handler+0xcc>)
    5300:	4798      	blx	r3
    5302:	4603      	mov	r3, r0
    5304:	b2db      	uxtb	r3, r3
    5306:	4619      	mov	r1, r3
    5308:	6878      	ldr	r0, [r7, #4]
    530a:	47a0      	blx	r4
}
    530c:	e010      	b.n	5330 <_sercom_i2c_s_irq_handler+0xb4>
			ASSERT(device->cb.tx);
    530e:	687b      	ldr	r3, [r7, #4]
    5310:	689b      	ldr	r3, [r3, #8]
    5312:	2b00      	cmp	r3, #0
    5314:	bf14      	ite	ne
    5316:	2301      	movne	r3, #1
    5318:	2300      	moveq	r3, #0
    531a:	b2db      	uxtb	r3, r3
    531c:	f240 72d7 	movw	r2, #2007	; 0x7d7
    5320:	4906      	ldr	r1, [pc, #24]	; (533c <_sercom_i2c_s_irq_handler+0xc0>)
    5322:	4618      	mov	r0, r3
    5324:	4b06      	ldr	r3, [pc, #24]	; (5340 <_sercom_i2c_s_irq_handler+0xc4>)
    5326:	4798      	blx	r3
			device->cb.tx(device);
    5328:	687b      	ldr	r3, [r7, #4]
    532a:	689b      	ldr	r3, [r3, #8]
    532c:	6878      	ldr	r0, [r7, #4]
    532e:	4798      	blx	r3
}
    5330:	bf00      	nop
    5332:	3714      	adds	r7, #20
    5334:	46bd      	mov	sp, r7
    5336:	bd90      	pop	{r4, r7, pc}
    5338:	00004519 	.word	0x00004519
    533c:	00009048 	.word	0x00009048
    5340:	00002249 	.word	0x00002249
    5344:	000048a1 	.word	0x000048a1
    5348:	00004889 	.word	0x00004889

0000534c <_i2c_s_init>:
 * \param[in] p The pointer to hardware instance
 *
 *\ return status of initialization
 */
static int32_t _i2c_s_init(void *const hw)
{
    534c:	b580      	push	{r7, lr}
    534e:	b084      	sub	sp, #16
    5350:	af00      	add	r7, sp, #0
    5352:	6078      	str	r0, [r7, #4]
	int8_t i = _get_i2c_s_index(hw);
    5354:	6878      	ldr	r0, [r7, #4]
    5356:	4b2f      	ldr	r3, [pc, #188]	; (5414 <_i2c_s_init+0xc8>)
    5358:	4798      	blx	r3
    535a:	4603      	mov	r3, r0
    535c:	73fb      	strb	r3, [r7, #15]
	if (i == -1) {
    535e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5362:	f1b3 3fff 	cmp.w	r3, #4294967295
    5366:	d102      	bne.n	536e <_i2c_s_init+0x22>
		return ERR_INVALID_ARG;
    5368:	f06f 030c 	mvn.w	r3, #12
    536c:	e04e      	b.n	540c <_i2c_s_init+0xc0>
	}

	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    536e:	2101      	movs	r1, #1
    5370:	6878      	ldr	r0, [r7, #4]
    5372:	4b29      	ldr	r3, [pc, #164]	; (5418 <_i2c_s_init+0xcc>)
    5374:	4798      	blx	r3
    5376:	4603      	mov	r3, r0
    5378:	f083 0301 	eor.w	r3, r3, #1
    537c:	b2db      	uxtb	r3, r3
    537e:	2b00      	cmp	r3, #0
    5380:	d01e      	beq.n	53c0 <_i2c_s_init+0x74>
		uint32_t mode = _i2css[i].ctrl_a & SERCOM_I2CS_CTRLA_MODE_Msk;
    5382:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5386:	4a25      	ldr	r2, [pc, #148]	; (541c <_i2c_s_init+0xd0>)
    5388:	011b      	lsls	r3, r3, #4
    538a:	4413      	add	r3, r2
    538c:	3304      	adds	r3, #4
    538e:	681b      	ldr	r3, [r3, #0]
    5390:	f003 031c 	and.w	r3, r3, #28
    5394:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    5396:	2102      	movs	r1, #2
    5398:	6878      	ldr	r0, [r7, #4]
    539a:	4b21      	ldr	r3, [pc, #132]	; (5420 <_i2c_s_init+0xd4>)
    539c:	4798      	blx	r3
    539e:	4603      	mov	r3, r0
    53a0:	2b00      	cmp	r3, #0
    53a2:	d006      	beq.n	53b2 <_i2c_s_init+0x66>
			hri_sercomi2cs_clear_CTRLA_ENABLE_bit(hw);
    53a4:	6878      	ldr	r0, [r7, #4]
    53a6:	4b1f      	ldr	r3, [pc, #124]	; (5424 <_i2c_s_init+0xd8>)
    53a8:	4798      	blx	r3
			hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_ENABLE);
    53aa:	2102      	movs	r1, #2
    53ac:	6878      	ldr	r0, [r7, #4]
    53ae:	4b1e      	ldr	r3, [pc, #120]	; (5428 <_i2c_s_init+0xdc>)
    53b0:	4798      	blx	r3
		}
		hri_sercomi2cs_write_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_SWRST | mode);
    53b2:	68bb      	ldr	r3, [r7, #8]
    53b4:	f043 0301 	orr.w	r3, r3, #1
    53b8:	4619      	mov	r1, r3
    53ba:	6878      	ldr	r0, [r7, #4]
    53bc:	4b1b      	ldr	r3, [pc, #108]	; (542c <_i2c_s_init+0xe0>)
    53be:	4798      	blx	r3
	}
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST);
    53c0:	2101      	movs	r1, #1
    53c2:	6878      	ldr	r0, [r7, #4]
    53c4:	4b18      	ldr	r3, [pc, #96]	; (5428 <_i2c_s_init+0xdc>)
    53c6:	4798      	blx	r3

	hri_sercomi2cs_write_CTRLA_reg(hw, _i2css[i].ctrl_a);
    53c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53cc:	4a13      	ldr	r2, [pc, #76]	; (541c <_i2c_s_init+0xd0>)
    53ce:	011b      	lsls	r3, r3, #4
    53d0:	4413      	add	r3, r2
    53d2:	3304      	adds	r3, #4
    53d4:	681b      	ldr	r3, [r3, #0]
    53d6:	4619      	mov	r1, r3
    53d8:	6878      	ldr	r0, [r7, #4]
    53da:	4b14      	ldr	r3, [pc, #80]	; (542c <_i2c_s_init+0xe0>)
    53dc:	4798      	blx	r3
	hri_sercomi2cs_write_CTRLB_reg(hw, _i2css[i].ctrl_b);
    53de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53e2:	4a0e      	ldr	r2, [pc, #56]	; (541c <_i2c_s_init+0xd0>)
    53e4:	011b      	lsls	r3, r3, #4
    53e6:	4413      	add	r3, r2
    53e8:	3308      	adds	r3, #8
    53ea:	681b      	ldr	r3, [r3, #0]
    53ec:	4619      	mov	r1, r3
    53ee:	6878      	ldr	r0, [r7, #4]
    53f0:	4b0f      	ldr	r3, [pc, #60]	; (5430 <_i2c_s_init+0xe4>)
    53f2:	4798      	blx	r3
	hri_sercomi2cs_write_ADDR_reg(hw, _i2css[i].address);
    53f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53f8:	4a08      	ldr	r2, [pc, #32]	; (541c <_i2c_s_init+0xd0>)
    53fa:	011b      	lsls	r3, r3, #4
    53fc:	4413      	add	r3, r2
    53fe:	330c      	adds	r3, #12
    5400:	681b      	ldr	r3, [r3, #0]
    5402:	4619      	mov	r1, r3
    5404:	6878      	ldr	r0, [r7, #4]
    5406:	4b0b      	ldr	r3, [pc, #44]	; (5434 <_i2c_s_init+0xe8>)
    5408:	4798      	blx	r3

	return ERR_NONE;
    540a:	2300      	movs	r3, #0
}
    540c:	4618      	mov	r0, r3
    540e:	3710      	adds	r7, #16
    5410:	46bd      	mov	sp, r7
    5412:	bd80      	pop	{r7, pc}
    5414:	00005439 	.word	0x00005439
    5418:	000044bd 	.word	0x000044bd
    541c:	20000080 	.word	0x20000080
    5420:	00004609 	.word	0x00004609
    5424:	000045e1 	.word	0x000045e1
    5428:	00004499 	.word	0x00004499
    542c:	00004639 	.word	0x00004639
    5430:	00004751 	.word	0x00004751
    5434:	0000480d 	.word	0x0000480d

00005438 <_get_i2c_s_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2c_s_index(const void *const hw)
{
    5438:	b580      	push	{r7, lr}
    543a:	b084      	sub	sp, #16
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5440:	6878      	ldr	r0, [r7, #4]
    5442:	4b12      	ldr	r3, [pc, #72]	; (548c <_get_i2c_s_index+0x54>)
    5444:	4798      	blx	r3
    5446:	4603      	mov	r3, r0
    5448:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
    544a:	2300      	movs	r3, #0
    544c:	73fb      	strb	r3, [r7, #15]
    544e:	e00d      	b.n	546c <_get_i2c_s_index+0x34>
		if (_i2css[i].number == sercom_offset) {
    5450:	7bfb      	ldrb	r3, [r7, #15]
    5452:	4a0f      	ldr	r2, [pc, #60]	; (5490 <_get_i2c_s_index+0x58>)
    5454:	011b      	lsls	r3, r3, #4
    5456:	4413      	add	r3, r2
    5458:	781b      	ldrb	r3, [r3, #0]
    545a:	7bba      	ldrb	r2, [r7, #14]
    545c:	429a      	cmp	r2, r3
    545e:	d102      	bne.n	5466 <_get_i2c_s_index+0x2e>
			return i;
    5460:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5464:	e00d      	b.n	5482 <_get_i2c_s_index+0x4a>
	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
    5466:	7bfb      	ldrb	r3, [r7, #15]
    5468:	3301      	adds	r3, #1
    546a:	73fb      	strb	r3, [r7, #15]
    546c:	7bfb      	ldrb	r3, [r7, #15]
    546e:	2b00      	cmp	r3, #0
    5470:	d0ee      	beq.n	5450 <_get_i2c_s_index+0x18>
		}
	}

	ASSERT(false);
    5472:	f640 0214 	movw	r2, #2068	; 0x814
    5476:	4907      	ldr	r1, [pc, #28]	; (5494 <_get_i2c_s_index+0x5c>)
    5478:	2000      	movs	r0, #0
    547a:	4b07      	ldr	r3, [pc, #28]	; (5498 <_get_i2c_s_index+0x60>)
    547c:	4798      	blx	r3
	return -1;
    547e:	f04f 33ff 	mov.w	r3, #4294967295
}
    5482:	4618      	mov	r0, r3
    5484:	3710      	adds	r7, #16
    5486:	46bd      	mov	sp, r7
    5488:	bd80      	pop	{r7, pc}
    548a:	bf00      	nop
    548c:	000048f1 	.word	0x000048f1
    5490:	20000080 	.word	0x20000080
    5494:	00009048 	.word	0x00009048
    5498:	00002249 	.word	0x00002249

0000549c <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    549c:	b580      	push	{r7, lr}
    549e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom0_dev);
    54a0:	4b03      	ldr	r3, [pc, #12]	; (54b0 <SERCOM0_0_Handler+0x14>)
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	4618      	mov	r0, r3
    54a6:	4b03      	ldr	r3, [pc, #12]	; (54b4 <SERCOM0_0_Handler+0x18>)
    54a8:	4798      	blx	r3
}
    54aa:	bf00      	nop
    54ac:	bd80      	pop	{r7, pc}
    54ae:	bf00      	nop
    54b0:	20000410 	.word	0x20000410
    54b4:	00004c85 	.word	0x00004c85

000054b8 <SERCOM0_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    54b8:	b580      	push	{r7, lr}
    54ba:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom0_dev);
    54bc:	4b03      	ldr	r3, [pc, #12]	; (54cc <SERCOM0_1_Handler+0x14>)
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	4618      	mov	r0, r3
    54c2:	4b03      	ldr	r3, [pc, #12]	; (54d0 <SERCOM0_1_Handler+0x18>)
    54c4:	4798      	blx	r3
}
    54c6:	bf00      	nop
    54c8:	bd80      	pop	{r7, pc}
    54ca:	bf00      	nop
    54cc:	20000410 	.word	0x20000410
    54d0:	00004c85 	.word	0x00004c85

000054d4 <SERCOM0_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    54d4:	b580      	push	{r7, lr}
    54d6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom0_dev);
    54d8:	4b03      	ldr	r3, [pc, #12]	; (54e8 <SERCOM0_2_Handler+0x14>)
    54da:	681b      	ldr	r3, [r3, #0]
    54dc:	4618      	mov	r0, r3
    54de:	4b03      	ldr	r3, [pc, #12]	; (54ec <SERCOM0_2_Handler+0x18>)
    54e0:	4798      	blx	r3
}
    54e2:	bf00      	nop
    54e4:	bd80      	pop	{r7, pc}
    54e6:	bf00      	nop
    54e8:	20000410 	.word	0x20000410
    54ec:	00004c85 	.word	0x00004c85

000054f0 <SERCOM0_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    54f0:	b580      	push	{r7, lr}
    54f2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom0_dev);
    54f4:	4b03      	ldr	r3, [pc, #12]	; (5504 <SERCOM0_3_Handler+0x14>)
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	4618      	mov	r0, r3
    54fa:	4b03      	ldr	r3, [pc, #12]	; (5508 <SERCOM0_3_Handler+0x18>)
    54fc:	4798      	blx	r3
}
    54fe:	bf00      	nop
    5500:	bd80      	pop	{r7, pc}
    5502:	bf00      	nop
    5504:	20000410 	.word	0x20000410
    5508:	00004c85 	.word	0x00004c85

0000550c <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    550c:	b580      	push	{r7, lr}
    550e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    5510:	4b03      	ldr	r3, [pc, #12]	; (5520 <SERCOM1_0_Handler+0x14>)
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	4618      	mov	r0, r3
    5516:	4b03      	ldr	r3, [pc, #12]	; (5524 <SERCOM1_0_Handler+0x18>)
    5518:	4798      	blx	r3
}
    551a:	bf00      	nop
    551c:	bd80      	pop	{r7, pc}
    551e:	bf00      	nop
    5520:	20000414 	.word	0x20000414
    5524:	00004c85 	.word	0x00004c85

00005528 <SERCOM1_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    5528:	b580      	push	{r7, lr}
    552a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    552c:	4b03      	ldr	r3, [pc, #12]	; (553c <SERCOM1_1_Handler+0x14>)
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	4618      	mov	r0, r3
    5532:	4b03      	ldr	r3, [pc, #12]	; (5540 <SERCOM1_1_Handler+0x18>)
    5534:	4798      	blx	r3
}
    5536:	bf00      	nop
    5538:	bd80      	pop	{r7, pc}
    553a:	bf00      	nop
    553c:	20000414 	.word	0x20000414
    5540:	00004c85 	.word	0x00004c85

00005544 <SERCOM1_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    5544:	b580      	push	{r7, lr}
    5546:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    5548:	4b03      	ldr	r3, [pc, #12]	; (5558 <SERCOM1_2_Handler+0x14>)
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	4618      	mov	r0, r3
    554e:	4b03      	ldr	r3, [pc, #12]	; (555c <SERCOM1_2_Handler+0x18>)
    5550:	4798      	blx	r3
}
    5552:	bf00      	nop
    5554:	bd80      	pop	{r7, pc}
    5556:	bf00      	nop
    5558:	20000414 	.word	0x20000414
    555c:	00004c85 	.word	0x00004c85

00005560 <SERCOM1_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    5560:	b580      	push	{r7, lr}
    5562:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    5564:	4b03      	ldr	r3, [pc, #12]	; (5574 <SERCOM1_3_Handler+0x14>)
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	4618      	mov	r0, r3
    556a:	4b03      	ldr	r3, [pc, #12]	; (5578 <SERCOM1_3_Handler+0x18>)
    556c:	4798      	blx	r3
}
    556e:	bf00      	nop
    5570:	bd80      	pop	{r7, pc}
    5572:	bf00      	nop
    5574:	20000414 	.word	0x20000414
    5578:	00004c85 	.word	0x00004c85

0000557c <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    557c:	b580      	push	{r7, lr}
    557e:	af00      	add	r7, sp, #0
	_sercom_i2c_s_irq_handler(_sercom2_dev);
    5580:	4b03      	ldr	r3, [pc, #12]	; (5590 <SERCOM2_0_Handler+0x14>)
    5582:	681b      	ldr	r3, [r3, #0]
    5584:	4618      	mov	r0, r3
    5586:	4b03      	ldr	r3, [pc, #12]	; (5594 <SERCOM2_0_Handler+0x18>)
    5588:	4798      	blx	r3
}
    558a:	bf00      	nop
    558c:	bd80      	pop	{r7, pc}
    558e:	bf00      	nop
    5590:	20000418 	.word	0x20000418
    5594:	0000527d 	.word	0x0000527d

00005598 <SERCOM2_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    5598:	b580      	push	{r7, lr}
    559a:	af00      	add	r7, sp, #0
	_sercom_i2c_s_irq_handler(_sercom2_dev);
    559c:	4b03      	ldr	r3, [pc, #12]	; (55ac <SERCOM2_1_Handler+0x14>)
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	4618      	mov	r0, r3
    55a2:	4b03      	ldr	r3, [pc, #12]	; (55b0 <SERCOM2_1_Handler+0x18>)
    55a4:	4798      	blx	r3
}
    55a6:	bf00      	nop
    55a8:	bd80      	pop	{r7, pc}
    55aa:	bf00      	nop
    55ac:	20000418 	.word	0x20000418
    55b0:	0000527d 	.word	0x0000527d

000055b4 <SERCOM2_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	af00      	add	r7, sp, #0
	_sercom_i2c_s_irq_handler(_sercom2_dev);
    55b8:	4b03      	ldr	r3, [pc, #12]	; (55c8 <SERCOM2_2_Handler+0x14>)
    55ba:	681b      	ldr	r3, [r3, #0]
    55bc:	4618      	mov	r0, r3
    55be:	4b03      	ldr	r3, [pc, #12]	; (55cc <SERCOM2_2_Handler+0x18>)
    55c0:	4798      	blx	r3
}
    55c2:	bf00      	nop
    55c4:	bd80      	pop	{r7, pc}
    55c6:	bf00      	nop
    55c8:	20000418 	.word	0x20000418
    55cc:	0000527d 	.word	0x0000527d

000055d0 <SERCOM2_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    55d0:	b580      	push	{r7, lr}
    55d2:	af00      	add	r7, sp, #0
	_sercom_i2c_s_irq_handler(_sercom2_dev);
    55d4:	4b03      	ldr	r3, [pc, #12]	; (55e4 <SERCOM2_3_Handler+0x14>)
    55d6:	681b      	ldr	r3, [r3, #0]
    55d8:	4618      	mov	r0, r3
    55da:	4b03      	ldr	r3, [pc, #12]	; (55e8 <SERCOM2_3_Handler+0x18>)
    55dc:	4798      	blx	r3
}
    55de:	bf00      	nop
    55e0:	bd80      	pop	{r7, pc}
    55e2:	bf00      	nop
    55e4:	20000418 	.word	0x20000418
    55e8:	0000527d 	.word	0x0000527d

000055ec <SERCOM3_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_0_Handler(void)
{
    55ec:	b580      	push	{r7, lr}
    55ee:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom3_dev);
    55f0:	4b03      	ldr	r3, [pc, #12]	; (5600 <SERCOM3_0_Handler+0x14>)
    55f2:	681b      	ldr	r3, [r3, #0]
    55f4:	4618      	mov	r0, r3
    55f6:	4b03      	ldr	r3, [pc, #12]	; (5604 <SERCOM3_0_Handler+0x18>)
    55f8:	4798      	blx	r3
}
    55fa:	bf00      	nop
    55fc:	bd80      	pop	{r7, pc}
    55fe:	bf00      	nop
    5600:	2000041c 	.word	0x2000041c
    5604:	00004c85 	.word	0x00004c85

00005608 <SERCOM3_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_1_Handler(void)
{
    5608:	b580      	push	{r7, lr}
    560a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom3_dev);
    560c:	4b03      	ldr	r3, [pc, #12]	; (561c <SERCOM3_1_Handler+0x14>)
    560e:	681b      	ldr	r3, [r3, #0]
    5610:	4618      	mov	r0, r3
    5612:	4b03      	ldr	r3, [pc, #12]	; (5620 <SERCOM3_1_Handler+0x18>)
    5614:	4798      	blx	r3
}
    5616:	bf00      	nop
    5618:	bd80      	pop	{r7, pc}
    561a:	bf00      	nop
    561c:	2000041c 	.word	0x2000041c
    5620:	00004c85 	.word	0x00004c85

00005624 <SERCOM3_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_2_Handler(void)
{
    5624:	b580      	push	{r7, lr}
    5626:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom3_dev);
    5628:	4b03      	ldr	r3, [pc, #12]	; (5638 <SERCOM3_2_Handler+0x14>)
    562a:	681b      	ldr	r3, [r3, #0]
    562c:	4618      	mov	r0, r3
    562e:	4b03      	ldr	r3, [pc, #12]	; (563c <SERCOM3_2_Handler+0x18>)
    5630:	4798      	blx	r3
}
    5632:	bf00      	nop
    5634:	bd80      	pop	{r7, pc}
    5636:	bf00      	nop
    5638:	2000041c 	.word	0x2000041c
    563c:	00004c85 	.word	0x00004c85

00005640 <SERCOM3_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_3_Handler(void)
{
    5640:	b580      	push	{r7, lr}
    5642:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom3_dev);
    5644:	4b03      	ldr	r3, [pc, #12]	; (5654 <SERCOM3_3_Handler+0x14>)
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	4618      	mov	r0, r3
    564a:	4b03      	ldr	r3, [pc, #12]	; (5658 <SERCOM3_3_Handler+0x18>)
    564c:	4798      	blx	r3
}
    564e:	bf00      	nop
    5650:	bd80      	pop	{r7, pc}
    5652:	bf00      	nop
    5654:	2000041c 	.word	0x2000041c
    5658:	00004c85 	.word	0x00004c85

0000565c <SERCOM6_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_0_Handler(void)
{
    565c:	b580      	push	{r7, lr}
    565e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    5660:	4b03      	ldr	r3, [pc, #12]	; (5670 <SERCOM6_0_Handler+0x14>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	4618      	mov	r0, r3
    5666:	4b03      	ldr	r3, [pc, #12]	; (5674 <SERCOM6_0_Handler+0x18>)
    5668:	4798      	blx	r3
}
    566a:	bf00      	nop
    566c:	bd80      	pop	{r7, pc}
    566e:	bf00      	nop
    5670:	20000420 	.word	0x20000420
    5674:	00004c85 	.word	0x00004c85

00005678 <SERCOM6_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_1_Handler(void)
{
    5678:	b580      	push	{r7, lr}
    567a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    567c:	4b03      	ldr	r3, [pc, #12]	; (568c <SERCOM6_1_Handler+0x14>)
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	4618      	mov	r0, r3
    5682:	4b03      	ldr	r3, [pc, #12]	; (5690 <SERCOM6_1_Handler+0x18>)
    5684:	4798      	blx	r3
}
    5686:	bf00      	nop
    5688:	bd80      	pop	{r7, pc}
    568a:	bf00      	nop
    568c:	20000420 	.word	0x20000420
    5690:	00004c85 	.word	0x00004c85

00005694 <SERCOM6_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_2_Handler(void)
{
    5694:	b580      	push	{r7, lr}
    5696:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    5698:	4b03      	ldr	r3, [pc, #12]	; (56a8 <SERCOM6_2_Handler+0x14>)
    569a:	681b      	ldr	r3, [r3, #0]
    569c:	4618      	mov	r0, r3
    569e:	4b03      	ldr	r3, [pc, #12]	; (56ac <SERCOM6_2_Handler+0x18>)
    56a0:	4798      	blx	r3
}
    56a2:	bf00      	nop
    56a4:	bd80      	pop	{r7, pc}
    56a6:	bf00      	nop
    56a8:	20000420 	.word	0x20000420
    56ac:	00004c85 	.word	0x00004c85

000056b0 <SERCOM6_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM6_3_Handler(void)
{
    56b0:	b580      	push	{r7, lr}
    56b2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom6_dev);
    56b4:	4b03      	ldr	r3, [pc, #12]	; (56c4 <SERCOM6_3_Handler+0x14>)
    56b6:	681b      	ldr	r3, [r3, #0]
    56b8:	4618      	mov	r0, r3
    56ba:	4b03      	ldr	r3, [pc, #12]	; (56c8 <SERCOM6_3_Handler+0x18>)
    56bc:	4798      	blx	r3
}
    56be:	bf00      	nop
    56c0:	bd80      	pop	{r7, pc}
    56c2:	bf00      	nop
    56c4:	20000420 	.word	0x20000420
    56c8:	00004c85 	.word	0x00004c85

000056cc <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    56cc:	b480      	push	{r7}
    56ce:	b083      	sub	sp, #12
    56d0:	af00      	add	r7, sp, #0
    56d2:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    56d4:	4b06      	ldr	r3, [pc, #24]	; (56f0 <_system_time_init+0x24>)
    56d6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    56da:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    56dc:	4b04      	ldr	r3, [pc, #16]	; (56f0 <_system_time_init+0x24>)
    56de:	2205      	movs	r2, #5
    56e0:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    56e2:	bf00      	nop
    56e4:	370c      	adds	r7, #12
    56e6:	46bd      	mov	sp, r7
    56e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ec:	4770      	bx	lr
    56ee:	bf00      	nop
    56f0:	e000e010 	.word	0xe000e010

000056f4 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    56f4:	b580      	push	{r7, lr}
    56f6:	b082      	sub	sp, #8
    56f8:	af00      	add	r7, sp, #0
    56fa:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    56fc:	6878      	ldr	r0, [r7, #4]
    56fe:	4b03      	ldr	r3, [pc, #12]	; (570c <_delay_init+0x18>)
    5700:	4798      	blx	r3
}
    5702:	bf00      	nop
    5704:	3708      	adds	r7, #8
    5706:	46bd      	mov	sp, r7
    5708:	bd80      	pop	{r7, pc}
    570a:	bf00      	nop
    570c:	000056cd 	.word	0x000056cd

00005710 <__NVIC_EnableIRQ>:
{
    5710:	b480      	push	{r7}
    5712:	b083      	sub	sp, #12
    5714:	af00      	add	r7, sp, #0
    5716:	4603      	mov	r3, r0
    5718:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    571a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    571e:	2b00      	cmp	r3, #0
    5720:	db0b      	blt.n	573a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5722:	4909      	ldr	r1, [pc, #36]	; (5748 <__NVIC_EnableIRQ+0x38>)
    5724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5728:	095b      	lsrs	r3, r3, #5
    572a:	88fa      	ldrh	r2, [r7, #6]
    572c:	f002 021f 	and.w	r2, r2, #31
    5730:	2001      	movs	r0, #1
    5732:	fa00 f202 	lsl.w	r2, r0, r2
    5736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    573a:	bf00      	nop
    573c:	370c      	adds	r7, #12
    573e:	46bd      	mov	sp, r7
    5740:	f85d 7b04 	ldr.w	r7, [sp], #4
    5744:	4770      	bx	lr
    5746:	bf00      	nop
    5748:	e000e100 	.word	0xe000e100

0000574c <__NVIC_DisableIRQ>:
{
    574c:	b480      	push	{r7}
    574e:	b083      	sub	sp, #12
    5750:	af00      	add	r7, sp, #0
    5752:	4603      	mov	r3, r0
    5754:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    575a:	2b00      	cmp	r3, #0
    575c:	db10      	blt.n	5780 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    575e:	490b      	ldr	r1, [pc, #44]	; (578c <__NVIC_DisableIRQ+0x40>)
    5760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5764:	095b      	lsrs	r3, r3, #5
    5766:	88fa      	ldrh	r2, [r7, #6]
    5768:	f002 021f 	and.w	r2, r2, #31
    576c:	2001      	movs	r0, #1
    576e:	fa00 f202 	lsl.w	r2, r0, r2
    5772:	3320      	adds	r3, #32
    5774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    577c:	f3bf 8f6f 	isb	sy
}
    5780:	bf00      	nop
    5782:	370c      	adds	r7, #12
    5784:	46bd      	mov	sp, r7
    5786:	f85d 7b04 	ldr.w	r7, [sp], #4
    578a:	4770      	bx	lr
    578c:	e000e100 	.word	0xe000e100

00005790 <__NVIC_ClearPendingIRQ>:
{
    5790:	b480      	push	{r7}
    5792:	b083      	sub	sp, #12
    5794:	af00      	add	r7, sp, #0
    5796:	4603      	mov	r3, r0
    5798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    579a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    579e:	2b00      	cmp	r3, #0
    57a0:	db0c      	blt.n	57bc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    57a2:	4909      	ldr	r1, [pc, #36]	; (57c8 <__NVIC_ClearPendingIRQ+0x38>)
    57a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57a8:	095b      	lsrs	r3, r3, #5
    57aa:	88fa      	ldrh	r2, [r7, #6]
    57ac:	f002 021f 	and.w	r2, r2, #31
    57b0:	2001      	movs	r0, #1
    57b2:	fa00 f202 	lsl.w	r2, r0, r2
    57b6:	3360      	adds	r3, #96	; 0x60
    57b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    57bc:	bf00      	nop
    57be:	370c      	adds	r7, #12
    57c0:	46bd      	mov	sp, r7
    57c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c6:	4770      	bx	lr
    57c8:	e000e100 	.word	0xe000e100

000057cc <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    57cc:	b480      	push	{r7}
    57ce:	b083      	sub	sp, #12
    57d0:	af00      	add	r7, sp, #0
    57d2:	6078      	str	r0, [r7, #4]
    57d4:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    57d6:	bf00      	nop
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	689a      	ldr	r2, [r3, #8]
    57dc:	683b      	ldr	r3, [r7, #0]
    57de:	4013      	ands	r3, r2
    57e0:	2b00      	cmp	r3, #0
    57e2:	d1f9      	bne.n	57d8 <hri_tcc_wait_for_sync+0xc>
	};
}
    57e4:	bf00      	nop
    57e6:	370c      	adds	r7, #12
    57e8:	46bd      	mov	sp, r7
    57ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ee:	4770      	bx	lr

000057f0 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    57f0:	b480      	push	{r7}
    57f2:	b083      	sub	sp, #12
    57f4:	af00      	add	r7, sp, #0
    57f6:	6078      	str	r0, [r7, #4]
    57f8:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	689a      	ldr	r2, [r3, #8]
    57fe:	683b      	ldr	r3, [r7, #0]
    5800:	4013      	ands	r3, r2
    5802:	2b00      	cmp	r3, #0
    5804:	bf14      	ite	ne
    5806:	2301      	movne	r3, #1
    5808:	2300      	moveq	r3, #0
    580a:	b2db      	uxtb	r3, r3
}
    580c:	4618      	mov	r0, r3
    580e:	370c      	adds	r7, #12
    5810:	46bd      	mov	sp, r7
    5812:	f85d 7b04 	ldr.w	r7, [sp], #4
    5816:	4770      	bx	lr

00005818 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    5818:	b480      	push	{r7}
    581a:	b083      	sub	sp, #12
    581c:	af00      	add	r7, sp, #0
    581e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5824:	f003 0301 	and.w	r3, r3, #1
    5828:	2b00      	cmp	r3, #0
    582a:	bf14      	ite	ne
    582c:	2301      	movne	r3, #1
    582e:	2300      	moveq	r3, #0
    5830:	b2db      	uxtb	r3, r3
}
    5832:	4618      	mov	r0, r3
    5834:	370c      	adds	r7, #12
    5836:	46bd      	mov	sp, r7
    5838:	f85d 7b04 	ldr.w	r7, [sp], #4
    583c:	4770      	bx	lr

0000583e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    583e:	b480      	push	{r7}
    5840:	b083      	sub	sp, #12
    5842:	af00      	add	r7, sp, #0
    5844:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	2201      	movs	r2, #1
    584a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    584c:	bf00      	nop
    584e:	370c      	adds	r7, #12
    5850:	46bd      	mov	sp, r7
    5852:	f85d 7b04 	ldr.w	r7, [sp], #4
    5856:	4770      	bx	lr

00005858 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    5858:	b480      	push	{r7}
    585a:	b083      	sub	sp, #12
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
    5860:	460b      	mov	r3, r1
    5862:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	78fa      	ldrb	r2, [r7, #3]
    5868:	715a      	strb	r2, [r3, #5]
}
    586a:	bf00      	nop
    586c:	370c      	adds	r7, #12
    586e:	46bd      	mov	sp, r7
    5870:	f85d 7b04 	ldr.w	r7, [sp], #4
    5874:	4770      	bx	lr

00005876 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    5876:	b480      	push	{r7}
    5878:	b083      	sub	sp, #12
    587a:	af00      	add	r7, sp, #0
    587c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    587e:	687b      	ldr	r3, [r7, #4]
    5880:	2201      	movs	r2, #1
    5882:	629a      	str	r2, [r3, #40]	; 0x28
}
    5884:	bf00      	nop
    5886:	370c      	adds	r7, #12
    5888:	46bd      	mov	sp, r7
    588a:	f85d 7b04 	ldr.w	r7, [sp], #4
    588e:	4770      	bx	lr

00005890 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    5890:	b580      	push	{r7, lr}
    5892:	b082      	sub	sp, #8
    5894:	af00      	add	r7, sp, #0
    5896:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	f043 0201 	orr.w	r2, r3, #1
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    58a4:	2101      	movs	r1, #1
    58a6:	6878      	ldr	r0, [r7, #4]
    58a8:	4b02      	ldr	r3, [pc, #8]	; (58b4 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    58aa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    58ac:	bf00      	nop
    58ae:	3708      	adds	r7, #8
    58b0:	46bd      	mov	sp, r7
    58b2:	bd80      	pop	{r7, pc}
    58b4:	000057cd 	.word	0x000057cd

000058b8 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    58b8:	b580      	push	{r7, lr}
    58ba:	b082      	sub	sp, #8
    58bc:	af00      	add	r7, sp, #0
    58be:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    58c0:	687b      	ldr	r3, [r7, #4]
    58c2:	681b      	ldr	r3, [r3, #0]
    58c4:	f043 0202 	orr.w	r2, r3, #2
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    58cc:	2103      	movs	r1, #3
    58ce:	6878      	ldr	r0, [r7, #4]
    58d0:	4b02      	ldr	r3, [pc, #8]	; (58dc <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    58d2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    58d4:	bf00      	nop
    58d6:	3708      	adds	r7, #8
    58d8:	46bd      	mov	sp, r7
    58da:	bd80      	pop	{r7, pc}
    58dc:	000057cd 	.word	0x000057cd

000058e0 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    58e0:	b580      	push	{r7, lr}
    58e2:	b084      	sub	sp, #16
    58e4:	af00      	add	r7, sp, #0
    58e6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    58e8:	2103      	movs	r1, #3
    58ea:	6878      	ldr	r0, [r7, #4]
    58ec:	4b09      	ldr	r3, [pc, #36]	; (5914 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    58ee:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    58f6:	68fb      	ldr	r3, [r7, #12]
    58f8:	085b      	lsrs	r3, r3, #1
    58fa:	f003 0301 	and.w	r3, r3, #1
    58fe:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5900:	68fb      	ldr	r3, [r7, #12]
    5902:	2b00      	cmp	r3, #0
    5904:	bf14      	ite	ne
    5906:	2301      	movne	r3, #1
    5908:	2300      	moveq	r3, #0
    590a:	b2db      	uxtb	r3, r3
}
    590c:	4618      	mov	r0, r3
    590e:	3710      	adds	r7, #16
    5910:	46bd      	mov	sp, r7
    5912:	bd80      	pop	{r7, pc}
    5914:	000057cd 	.word	0x000057cd

00005918 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5918:	b580      	push	{r7, lr}
    591a:	b082      	sub	sp, #8
    591c:	af00      	add	r7, sp, #0
    591e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    5920:	687b      	ldr	r3, [r7, #4]
    5922:	681b      	ldr	r3, [r3, #0]
    5924:	f023 0202 	bic.w	r2, r3, #2
    5928:	687b      	ldr	r3, [r7, #4]
    592a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    592c:	2103      	movs	r1, #3
    592e:	6878      	ldr	r0, [r7, #4]
    5930:	4b02      	ldr	r3, [pc, #8]	; (593c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    5932:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    5934:	bf00      	nop
    5936:	3708      	adds	r7, #8
    5938:	46bd      	mov	sp, r7
    593a:	bd80      	pop	{r7, pc}
    593c:	000057cd 	.word	0x000057cd

00005940 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    5940:	b580      	push	{r7, lr}
    5942:	b084      	sub	sp, #16
    5944:	af00      	add	r7, sp, #0
    5946:	6078      	str	r0, [r7, #4]
    5948:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    594a:	2103      	movs	r1, #3
    594c:	6878      	ldr	r0, [r7, #4]
    594e:	4b07      	ldr	r3, [pc, #28]	; (596c <hri_tcc_get_CTRLA_reg+0x2c>)
    5950:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5958:	68fa      	ldr	r2, [r7, #12]
    595a:	683b      	ldr	r3, [r7, #0]
    595c:	4013      	ands	r3, r2
    595e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5960:	68fb      	ldr	r3, [r7, #12]
}
    5962:	4618      	mov	r0, r3
    5964:	3710      	adds	r7, #16
    5966:	46bd      	mov	sp, r7
    5968:	bd80      	pop	{r7, pc}
    596a:	bf00      	nop
    596c:	000057cd 	.word	0x000057cd

00005970 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    5970:	b580      	push	{r7, lr}
    5972:	b082      	sub	sp, #8
    5974:	af00      	add	r7, sp, #0
    5976:	6078      	str	r0, [r7, #4]
    5978:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	683a      	ldr	r2, [r7, #0]
    597e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    5980:	2103      	movs	r1, #3
    5982:	6878      	ldr	r0, [r7, #4]
    5984:	4b02      	ldr	r3, [pc, #8]	; (5990 <hri_tcc_write_CTRLA_reg+0x20>)
    5986:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    5988:	bf00      	nop
    598a:	3708      	adds	r7, #8
    598c:	46bd      	mov	sp, r7
    598e:	bd80      	pop	{r7, pc}
    5990:	000057cd 	.word	0x000057cd

00005994 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    5994:	b480      	push	{r7}
    5996:	b083      	sub	sp, #12
    5998:	af00      	add	r7, sp, #0
    599a:	6078      	str	r0, [r7, #4]
    599c:	460b      	mov	r3, r1
    599e:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	78fa      	ldrb	r2, [r7, #3]
    59a4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    59a6:	bf00      	nop
    59a8:	370c      	adds	r7, #12
    59aa:	46bd      	mov	sp, r7
    59ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b0:	4770      	bx	lr

000059b2 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    59b2:	b480      	push	{r7}
    59b4:	b083      	sub	sp, #12
    59b6:	af00      	add	r7, sp, #0
    59b8:	6078      	str	r0, [r7, #4]
    59ba:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    59bc:	687b      	ldr	r3, [r7, #4]
    59be:	683a      	ldr	r2, [r7, #0]
    59c0:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    59c2:	bf00      	nop
    59c4:	370c      	adds	r7, #12
    59c6:	46bd      	mov	sp, r7
    59c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59cc:	4770      	bx	lr
	...

000059d0 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    59d0:	b580      	push	{r7, lr}
    59d2:	b082      	sub	sp, #8
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
    59d8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	683a      	ldr	r2, [r7, #0]
    59de:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    59e0:	2180      	movs	r1, #128	; 0x80
    59e2:	6878      	ldr	r0, [r7, #4]
    59e4:	4b02      	ldr	r3, [pc, #8]	; (59f0 <hri_tcc_write_PER_reg+0x20>)
    59e6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    59e8:	bf00      	nop
    59ea:	3708      	adds	r7, #8
    59ec:	46bd      	mov	sp, r7
    59ee:	bd80      	pop	{r7, pc}
    59f0:	000057cd 	.word	0x000057cd

000059f4 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    59f4:	b580      	push	{r7, lr}
    59f6:	b082      	sub	sp, #8
    59f8:	af00      	add	r7, sp, #0
    59fa:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    59fc:	2180      	movs	r1, #128	; 0x80
    59fe:	6878      	ldr	r0, [r7, #4]
    5a00:	4b03      	ldr	r3, [pc, #12]	; (5a10 <hri_tcc_read_PER_reg+0x1c>)
    5a02:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    5a08:	4618      	mov	r0, r3
    5a0a:	3708      	adds	r7, #8
    5a0c:	46bd      	mov	sp, r7
    5a0e:	bd80      	pop	{r7, pc}
    5a10:	000057cd 	.word	0x000057cd

00005a14 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    5a14:	b480      	push	{r7}
    5a16:	b083      	sub	sp, #12
    5a18:	af00      	add	r7, sp, #0
    5a1a:	6078      	str	r0, [r7, #4]
    5a1c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    5a1e:	687b      	ldr	r3, [r7, #4]
    5a20:	4a09      	ldr	r2, [pc, #36]	; (5a48 <_tcc_init_irq_param+0x34>)
    5a22:	4293      	cmp	r3, r2
    5a24:	d102      	bne.n	5a2c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    5a26:	4a09      	ldr	r2, [pc, #36]	; (5a4c <_tcc_init_irq_param+0x38>)
    5a28:	683b      	ldr	r3, [r7, #0]
    5a2a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	4a08      	ldr	r2, [pc, #32]	; (5a50 <_tcc_init_irq_param+0x3c>)
    5a30:	4293      	cmp	r3, r2
    5a32:	d102      	bne.n	5a3a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    5a34:	4a07      	ldr	r2, [pc, #28]	; (5a54 <_tcc_init_irq_param+0x40>)
    5a36:	683b      	ldr	r3, [r7, #0]
    5a38:	6013      	str	r3, [r2, #0]
	}
}
    5a3a:	bf00      	nop
    5a3c:	370c      	adds	r7, #12
    5a3e:	46bd      	mov	sp, r7
    5a40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a44:	4770      	bx	lr
    5a46:	bf00      	nop
    5a48:	41016000 	.word	0x41016000
    5a4c:	20000424 	.word	0x20000424
    5a50:	41018000 	.word	0x41018000
    5a54:	20000428 	.word	0x20000428

00005a58 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    5a58:	b580      	push	{r7, lr}
    5a5a:	b084      	sub	sp, #16
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	6078      	str	r0, [r7, #4]
    5a60:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    5a62:	6838      	ldr	r0, [r7, #0]
    5a64:	4b33      	ldr	r3, [pc, #204]	; (5b34 <_tcc_timer_init+0xdc>)
    5a66:	4798      	blx	r3
    5a68:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    5a6a:	68fb      	ldr	r3, [r7, #12]
    5a6c:	2b00      	cmp	r3, #0
    5a6e:	d102      	bne.n	5a76 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    5a70:	f06f 0309 	mvn.w	r3, #9
    5a74:	e05a      	b.n	5b2c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    5a76:	687b      	ldr	r3, [r7, #4]
    5a78:	683a      	ldr	r2, [r7, #0]
    5a7a:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    5a7c:	2101      	movs	r1, #1
    5a7e:	6838      	ldr	r0, [r7, #0]
    5a80:	4b2d      	ldr	r3, [pc, #180]	; (5b38 <_tcc_timer_init+0xe0>)
    5a82:	4798      	blx	r3
    5a84:	4603      	mov	r3, r0
    5a86:	f083 0301 	eor.w	r3, r3, #1
    5a8a:	b2db      	uxtb	r3, r3
    5a8c:	2b00      	cmp	r3, #0
    5a8e:	d011      	beq.n	5ab4 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    5a90:	2102      	movs	r1, #2
    5a92:	6838      	ldr	r0, [r7, #0]
    5a94:	4b29      	ldr	r3, [pc, #164]	; (5b3c <_tcc_timer_init+0xe4>)
    5a96:	4798      	blx	r3
    5a98:	4603      	mov	r3, r0
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d006      	beq.n	5aac <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    5a9e:	6838      	ldr	r0, [r7, #0]
    5aa0:	4b27      	ldr	r3, [pc, #156]	; (5b40 <_tcc_timer_init+0xe8>)
    5aa2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    5aa4:	2102      	movs	r1, #2
    5aa6:	6838      	ldr	r0, [r7, #0]
    5aa8:	4b26      	ldr	r3, [pc, #152]	; (5b44 <_tcc_timer_init+0xec>)
    5aaa:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    5aac:	2101      	movs	r1, #1
    5aae:	6838      	ldr	r0, [r7, #0]
    5ab0:	4b25      	ldr	r3, [pc, #148]	; (5b48 <_tcc_timer_init+0xf0>)
    5ab2:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    5ab4:	2101      	movs	r1, #1
    5ab6:	6838      	ldr	r0, [r7, #0]
    5ab8:	4b22      	ldr	r3, [pc, #136]	; (5b44 <_tcc_timer_init+0xec>)
    5aba:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	689b      	ldr	r3, [r3, #8]
    5ac0:	4619      	mov	r1, r3
    5ac2:	6838      	ldr	r0, [r7, #0]
    5ac4:	4b20      	ldr	r3, [pc, #128]	; (5b48 <_tcc_timer_init+0xf0>)
    5ac6:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    5ac8:	68fb      	ldr	r3, [r7, #12]
    5aca:	7b1b      	ldrb	r3, [r3, #12]
    5acc:	4619      	mov	r1, r3
    5ace:	6838      	ldr	r0, [r7, #0]
    5ad0:	4b1e      	ldr	r3, [pc, #120]	; (5b4c <_tcc_timer_init+0xf4>)
    5ad2:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    5ad4:	68fb      	ldr	r3, [r7, #12]
    5ad6:	7b5b      	ldrb	r3, [r3, #13]
    5ad8:	4619      	mov	r1, r3
    5ada:	6838      	ldr	r0, [r7, #0]
    5adc:	4b1c      	ldr	r3, [pc, #112]	; (5b50 <_tcc_timer_init+0xf8>)
    5ade:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    5ae0:	68fb      	ldr	r3, [r7, #12]
    5ae2:	691b      	ldr	r3, [r3, #16]
    5ae4:	4619      	mov	r1, r3
    5ae6:	6838      	ldr	r0, [r7, #0]
    5ae8:	4b1a      	ldr	r3, [pc, #104]	; (5b54 <_tcc_timer_init+0xfc>)
    5aea:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    5aec:	68fb      	ldr	r3, [r7, #12]
    5aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5af0:	4619      	mov	r1, r3
    5af2:	6838      	ldr	r0, [r7, #0]
    5af4:	4b18      	ldr	r3, [pc, #96]	; (5b58 <_tcc_timer_init+0x100>)
    5af6:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    5af8:	6838      	ldr	r0, [r7, #0]
    5afa:	4b18      	ldr	r3, [pc, #96]	; (5b5c <_tcc_timer_init+0x104>)
    5afc:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    5afe:	6879      	ldr	r1, [r7, #4]
    5b00:	6838      	ldr	r0, [r7, #0]
    5b02:	4b17      	ldr	r3, [pc, #92]	; (5b60 <_tcc_timer_init+0x108>)
    5b04:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    5b06:	68fb      	ldr	r3, [r7, #12]
    5b08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    5b0c:	4618      	mov	r0, r3
    5b0e:	4b15      	ldr	r3, [pc, #84]	; (5b64 <_tcc_timer_init+0x10c>)
    5b10:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    5b12:	68fb      	ldr	r3, [r7, #12]
    5b14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    5b18:	4618      	mov	r0, r3
    5b1a:	4b13      	ldr	r3, [pc, #76]	; (5b68 <_tcc_timer_init+0x110>)
    5b1c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    5b1e:	68fb      	ldr	r3, [r7, #12]
    5b20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    5b24:	4618      	mov	r0, r3
    5b26:	4b11      	ldr	r3, [pc, #68]	; (5b6c <_tcc_timer_init+0x114>)
    5b28:	4798      	blx	r3

	return ERR_NONE;
    5b2a:	2300      	movs	r3, #0
}
    5b2c:	4618      	mov	r0, r3
    5b2e:	3710      	adds	r7, #16
    5b30:	46bd      	mov	sp, r7
    5b32:	bd80      	pop	{r7, pc}
    5b34:	00005d21 	.word	0x00005d21
    5b38:	000057f1 	.word	0x000057f1
    5b3c:	00005941 	.word	0x00005941
    5b40:	00005919 	.word	0x00005919
    5b44:	000057cd 	.word	0x000057cd
    5b48:	00005971 	.word	0x00005971
    5b4c:	00005859 	.word	0x00005859
    5b50:	00005995 	.word	0x00005995
    5b54:	000059b3 	.word	0x000059b3
    5b58:	000059d1 	.word	0x000059d1
    5b5c:	00005877 	.word	0x00005877
    5b60:	00005a15 	.word	0x00005a15
    5b64:	0000574d 	.word	0x0000574d
    5b68:	00005791 	.word	0x00005791
    5b6c:	00005711 	.word	0x00005711

00005b70 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    5b70:	b580      	push	{r7, lr}
    5b72:	b084      	sub	sp, #16
    5b74:	af00      	add	r7, sp, #0
    5b76:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	68db      	ldr	r3, [r3, #12]
    5b7c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    5b7e:	68f8      	ldr	r0, [r7, #12]
    5b80:	4b0a      	ldr	r3, [pc, #40]	; (5bac <_tcc_timer_deinit+0x3c>)
    5b82:	4798      	blx	r3
    5b84:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    5b86:	68bb      	ldr	r3, [r7, #8]
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d00b      	beq.n	5ba4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    5b8c:	68bb      	ldr	r3, [r7, #8]
    5b8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    5b92:	4618      	mov	r0, r3
    5b94:	4b06      	ldr	r3, [pc, #24]	; (5bb0 <_tcc_timer_deinit+0x40>)
    5b96:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    5b98:	68f8      	ldr	r0, [r7, #12]
    5b9a:	4b06      	ldr	r3, [pc, #24]	; (5bb4 <_tcc_timer_deinit+0x44>)
    5b9c:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    5b9e:	68f8      	ldr	r0, [r7, #12]
    5ba0:	4b05      	ldr	r3, [pc, #20]	; (5bb8 <_tcc_timer_deinit+0x48>)
    5ba2:	4798      	blx	r3
	}
}
    5ba4:	bf00      	nop
    5ba6:	3710      	adds	r7, #16
    5ba8:	46bd      	mov	sp, r7
    5baa:	bd80      	pop	{r7, pc}
    5bac:	00005d21 	.word	0x00005d21
    5bb0:	0000574d 	.word	0x0000574d
    5bb4:	00005919 	.word	0x00005919
    5bb8:	00005891 	.word	0x00005891

00005bbc <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b082      	sub	sp, #8
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	68db      	ldr	r3, [r3, #12]
    5bc8:	4618      	mov	r0, r3
    5bca:	4b03      	ldr	r3, [pc, #12]	; (5bd8 <_tcc_timer_start+0x1c>)
    5bcc:	4798      	blx	r3
}
    5bce:	bf00      	nop
    5bd0:	3708      	adds	r7, #8
    5bd2:	46bd      	mov	sp, r7
    5bd4:	bd80      	pop	{r7, pc}
    5bd6:	bf00      	nop
    5bd8:	000058b9 	.word	0x000058b9

00005bdc <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    5bdc:	b580      	push	{r7, lr}
    5bde:	b082      	sub	sp, #8
    5be0:	af00      	add	r7, sp, #0
    5be2:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	68db      	ldr	r3, [r3, #12]
    5be8:	4618      	mov	r0, r3
    5bea:	4b03      	ldr	r3, [pc, #12]	; (5bf8 <_tcc_timer_stop+0x1c>)
    5bec:	4798      	blx	r3
}
    5bee:	bf00      	nop
    5bf0:	3708      	adds	r7, #8
    5bf2:	46bd      	mov	sp, r7
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	bf00      	nop
    5bf8:	00005919 	.word	0x00005919

00005bfc <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b082      	sub	sp, #8
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
    5c04:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	68db      	ldr	r3, [r3, #12]
    5c0a:	6839      	ldr	r1, [r7, #0]
    5c0c:	4618      	mov	r0, r3
    5c0e:	4b03      	ldr	r3, [pc, #12]	; (5c1c <_tcc_timer_set_period+0x20>)
    5c10:	4798      	blx	r3
}
    5c12:	bf00      	nop
    5c14:	3708      	adds	r7, #8
    5c16:	46bd      	mov	sp, r7
    5c18:	bd80      	pop	{r7, pc}
    5c1a:	bf00      	nop
    5c1c:	000059d1 	.word	0x000059d1

00005c20 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b082      	sub	sp, #8
    5c24:	af00      	add	r7, sp, #0
    5c26:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	68db      	ldr	r3, [r3, #12]
    5c2c:	4618      	mov	r0, r3
    5c2e:	4b03      	ldr	r3, [pc, #12]	; (5c3c <_tcc_timer_get_period+0x1c>)
    5c30:	4798      	blx	r3
    5c32:	4603      	mov	r3, r0
}
    5c34:	4618      	mov	r0, r3
    5c36:	3708      	adds	r7, #8
    5c38:	46bd      	mov	sp, r7
    5c3a:	bd80      	pop	{r7, pc}
    5c3c:	000059f5 	.word	0x000059f5

00005c40 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	68db      	ldr	r3, [r3, #12]
    5c4c:	4618      	mov	r0, r3
    5c4e:	4b03      	ldr	r3, [pc, #12]	; (5c5c <_tcc_timer_is_started+0x1c>)
    5c50:	4798      	blx	r3
    5c52:	4603      	mov	r3, r0
}
    5c54:	4618      	mov	r0, r3
    5c56:	3708      	adds	r7, #8
    5c58:	46bd      	mov	sp, r7
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	000058e1 	.word	0x000058e1

00005c60 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    5c60:	b480      	push	{r7}
    5c62:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    5c64:	4b02      	ldr	r3, [pc, #8]	; (5c70 <_tcc_get_timer+0x10>)
}
    5c66:	4618      	mov	r0, r3
    5c68:	46bd      	mov	sp, r7
    5c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c6e:	4770      	bx	lr
    5c70:	200000f0 	.word	0x200000f0

00005c74 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    5c74:	b580      	push	{r7, lr}
    5c76:	b084      	sub	sp, #16
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	68db      	ldr	r3, [r3, #12]
    5c80:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    5c82:	68f8      	ldr	r0, [r7, #12]
    5c84:	4b08      	ldr	r3, [pc, #32]	; (5ca8 <_tcc_timer_set_irq+0x34>)
    5c86:	4798      	blx	r3
    5c88:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    5c8a:	68bb      	ldr	r3, [r7, #8]
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d006      	beq.n	5c9e <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    5c90:	68bb      	ldr	r3, [r7, #8]
    5c92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    5c96:	b2db      	uxtb	r3, r3
    5c98:	4618      	mov	r0, r3
    5c9a:	4b04      	ldr	r3, [pc, #16]	; (5cac <_tcc_timer_set_irq+0x38>)
    5c9c:	4798      	blx	r3
	}
}
    5c9e:	bf00      	nop
    5ca0:	3710      	adds	r7, #16
    5ca2:	46bd      	mov	sp, r7
    5ca4:	bd80      	pop	{r7, pc}
    5ca6:	bf00      	nop
    5ca8:	00005d21 	.word	0x00005d21
    5cac:	00002bd1 	.word	0x00002bd1

00005cb0 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    5cb0:	b580      	push	{r7, lr}
    5cb2:	b084      	sub	sp, #16
    5cb4:	af00      	add	r7, sp, #0
    5cb6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	68db      	ldr	r3, [r3, #12]
    5cbc:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    5cbe:	68f8      	ldr	r0, [r7, #12]
    5cc0:	4b07      	ldr	r3, [pc, #28]	; (5ce0 <tcc_interrupt_handler+0x30>)
    5cc2:	4798      	blx	r3
    5cc4:	4603      	mov	r3, r0
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d006      	beq.n	5cd8 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    5cca:	68f8      	ldr	r0, [r7, #12]
    5ccc:	4b05      	ldr	r3, [pc, #20]	; (5ce4 <tcc_interrupt_handler+0x34>)
    5cce:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	681b      	ldr	r3, [r3, #0]
    5cd4:	6878      	ldr	r0, [r7, #4]
    5cd6:	4798      	blx	r3
	}
}
    5cd8:	bf00      	nop
    5cda:	3710      	adds	r7, #16
    5cdc:	46bd      	mov	sp, r7
    5cde:	bd80      	pop	{r7, pc}
    5ce0:	00005819 	.word	0x00005819
    5ce4:	0000583f 	.word	0x0000583f

00005ce8 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    5cec:	4b03      	ldr	r3, [pc, #12]	; (5cfc <TCC0_0_Handler+0x14>)
    5cee:	681b      	ldr	r3, [r3, #0]
    5cf0:	4618      	mov	r0, r3
    5cf2:	4b03      	ldr	r3, [pc, #12]	; (5d00 <TCC0_0_Handler+0x18>)
    5cf4:	4798      	blx	r3
}
    5cf6:	bf00      	nop
    5cf8:	bd80      	pop	{r7, pc}
    5cfa:	bf00      	nop
    5cfc:	20000424 	.word	0x20000424
    5d00:	00005cb1 	.word	0x00005cb1

00005d04 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    5d04:	b580      	push	{r7, lr}
    5d06:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    5d08:	4b03      	ldr	r3, [pc, #12]	; (5d18 <TCC1_0_Handler+0x14>)
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	4618      	mov	r0, r3
    5d0e:	4b03      	ldr	r3, [pc, #12]	; (5d1c <TCC1_0_Handler+0x18>)
    5d10:	4798      	blx	r3
}
    5d12:	bf00      	nop
    5d14:	bd80      	pop	{r7, pc}
    5d16:	bf00      	nop
    5d18:	20000428 	.word	0x20000428
    5d1c:	00005cb1 	.word	0x00005cb1

00005d20 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    5d20:	b480      	push	{r7}
    5d22:	b085      	sub	sp, #20
    5d24:	af00      	add	r7, sp, #0
    5d26:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    5d28:	2300      	movs	r3, #0
    5d2a:	73fb      	strb	r3, [r7, #15]
    5d2c:	e015      	b.n	5d5a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    5d2e:	7bfa      	ldrb	r2, [r7, #15]
    5d30:	490f      	ldr	r1, [pc, #60]	; (5d70 <_get_tcc_cfg+0x50>)
    5d32:	4613      	mov	r3, r2
    5d34:	005b      	lsls	r3, r3, #1
    5d36:	4413      	add	r3, r2
    5d38:	011b      	lsls	r3, r3, #4
    5d3a:	440b      	add	r3, r1
    5d3c:	681a      	ldr	r2, [r3, #0]
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	429a      	cmp	r2, r3
    5d42:	d107      	bne.n	5d54 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    5d44:	7bfa      	ldrb	r2, [r7, #15]
    5d46:	4613      	mov	r3, r2
    5d48:	005b      	lsls	r3, r3, #1
    5d4a:	4413      	add	r3, r2
    5d4c:	011b      	lsls	r3, r3, #4
    5d4e:	4a08      	ldr	r2, [pc, #32]	; (5d70 <_get_tcc_cfg+0x50>)
    5d50:	4413      	add	r3, r2
    5d52:	e006      	b.n	5d62 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    5d54:	7bfb      	ldrb	r3, [r7, #15]
    5d56:	3301      	adds	r3, #1
    5d58:	73fb      	strb	r3, [r7, #15]
    5d5a:	7bfb      	ldrb	r3, [r7, #15]
    5d5c:	2b01      	cmp	r3, #1
    5d5e:	d9e6      	bls.n	5d2e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    5d60:	2300      	movs	r3, #0
}
    5d62:	4618      	mov	r0, r3
    5d64:	3714      	adds	r7, #20
    5d66:	46bd      	mov	sp, r7
    5d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6c:	4770      	bx	lr
    5d6e:	bf00      	nop
    5d70:	20000090 	.word	0x20000090

00005d74 <__NVIC_EnableIRQ>:
{
    5d74:	b480      	push	{r7}
    5d76:	b083      	sub	sp, #12
    5d78:	af00      	add	r7, sp, #0
    5d7a:	4603      	mov	r3, r0
    5d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d82:	2b00      	cmp	r3, #0
    5d84:	db0b      	blt.n	5d9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5d86:	4909      	ldr	r1, [pc, #36]	; (5dac <__NVIC_EnableIRQ+0x38>)
    5d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d8c:	095b      	lsrs	r3, r3, #5
    5d8e:	88fa      	ldrh	r2, [r7, #6]
    5d90:	f002 021f 	and.w	r2, r2, #31
    5d94:	2001      	movs	r0, #1
    5d96:	fa00 f202 	lsl.w	r2, r0, r2
    5d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d9e:	bf00      	nop
    5da0:	370c      	adds	r7, #12
    5da2:	46bd      	mov	sp, r7
    5da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da8:	4770      	bx	lr
    5daa:	bf00      	nop
    5dac:	e000e100 	.word	0xe000e100

00005db0 <__NVIC_DisableIRQ>:
{
    5db0:	b480      	push	{r7}
    5db2:	b083      	sub	sp, #12
    5db4:	af00      	add	r7, sp, #0
    5db6:	4603      	mov	r3, r0
    5db8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	db10      	blt.n	5de4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5dc2:	490b      	ldr	r1, [pc, #44]	; (5df0 <__NVIC_DisableIRQ+0x40>)
    5dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5dc8:	095b      	lsrs	r3, r3, #5
    5dca:	88fa      	ldrh	r2, [r7, #6]
    5dcc:	f002 021f 	and.w	r2, r2, #31
    5dd0:	2001      	movs	r0, #1
    5dd2:	fa00 f202 	lsl.w	r2, r0, r2
    5dd6:	3320      	adds	r3, #32
    5dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5ddc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5de0:	f3bf 8f6f 	isb	sy
}
    5de4:	bf00      	nop
    5de6:	370c      	adds	r7, #12
    5de8:	46bd      	mov	sp, r7
    5dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dee:	4770      	bx	lr
    5df0:	e000e100 	.word	0xe000e100

00005df4 <__NVIC_ClearPendingIRQ>:
{
    5df4:	b480      	push	{r7}
    5df6:	b083      	sub	sp, #12
    5df8:	af00      	add	r7, sp, #0
    5dfa:	4603      	mov	r3, r0
    5dfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5e02:	2b00      	cmp	r3, #0
    5e04:	db0c      	blt.n	5e20 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5e06:	4909      	ldr	r1, [pc, #36]	; (5e2c <__NVIC_ClearPendingIRQ+0x38>)
    5e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5e0c:	095b      	lsrs	r3, r3, #5
    5e0e:	88fa      	ldrh	r2, [r7, #6]
    5e10:	f002 021f 	and.w	r2, r2, #31
    5e14:	2001      	movs	r0, #1
    5e16:	fa00 f202 	lsl.w	r2, r0, r2
    5e1a:	3360      	adds	r3, #96	; 0x60
    5e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5e20:	bf00      	nop
    5e22:	370c      	adds	r7, #12
    5e24:	46bd      	mov	sp, r7
    5e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e2a:	4770      	bx	lr
    5e2c:	e000e100 	.word	0xe000e100

00005e30 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    5e30:	b480      	push	{r7}
    5e32:	b083      	sub	sp, #12
    5e34:	af00      	add	r7, sp, #0
    5e36:	6078      	str	r0, [r7, #4]
    5e38:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    5e3a:	bf00      	nop
    5e3c:	687b      	ldr	r3, [r7, #4]
    5e3e:	691a      	ldr	r2, [r3, #16]
    5e40:	683b      	ldr	r3, [r7, #0]
    5e42:	4013      	ands	r3, r2
    5e44:	2b00      	cmp	r3, #0
    5e46:	d1f9      	bne.n	5e3c <hri_tc_wait_for_sync+0xc>
	};
}
    5e48:	bf00      	nop
    5e4a:	370c      	adds	r7, #12
    5e4c:	46bd      	mov	sp, r7
    5e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e52:	4770      	bx	lr

00005e54 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    5e54:	b480      	push	{r7}
    5e56:	b083      	sub	sp, #12
    5e58:	af00      	add	r7, sp, #0
    5e5a:	6078      	str	r0, [r7, #4]
    5e5c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	691a      	ldr	r2, [r3, #16]
    5e62:	683b      	ldr	r3, [r7, #0]
    5e64:	4013      	ands	r3, r2
    5e66:	2b00      	cmp	r3, #0
    5e68:	bf14      	ite	ne
    5e6a:	2301      	movne	r3, #1
    5e6c:	2300      	moveq	r3, #0
    5e6e:	b2db      	uxtb	r3, r3
}
    5e70:	4618      	mov	r0, r3
    5e72:	370c      	adds	r7, #12
    5e74:	46bd      	mov	sp, r7
    5e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e7a:	4770      	bx	lr

00005e7c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    5e7c:	b480      	push	{r7}
    5e7e:	b083      	sub	sp, #12
    5e80:	af00      	add	r7, sp, #0
    5e82:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	7a9b      	ldrb	r3, [r3, #10]
    5e88:	b2db      	uxtb	r3, r3
    5e8a:	f003 0301 	and.w	r3, r3, #1
    5e8e:	2b00      	cmp	r3, #0
    5e90:	bf14      	ite	ne
    5e92:	2301      	movne	r3, #1
    5e94:	2300      	moveq	r3, #0
    5e96:	b2db      	uxtb	r3, r3
}
    5e98:	4618      	mov	r0, r3
    5e9a:	370c      	adds	r7, #12
    5e9c:	46bd      	mov	sp, r7
    5e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ea2:	4770      	bx	lr

00005ea4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    5ea4:	b480      	push	{r7}
    5ea6:	b083      	sub	sp, #12
    5ea8:	af00      	add	r7, sp, #0
    5eaa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	2201      	movs	r2, #1
    5eb0:	729a      	strb	r2, [r3, #10]
}
    5eb2:	bf00      	nop
    5eb4:	370c      	adds	r7, #12
    5eb6:	46bd      	mov	sp, r7
    5eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ebc:	4770      	bx	lr

00005ebe <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    5ebe:	b480      	push	{r7}
    5ec0:	b083      	sub	sp, #12
    5ec2:	af00      	add	r7, sp, #0
    5ec4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	2201      	movs	r2, #1
    5eca:	725a      	strb	r2, [r3, #9]
}
    5ecc:	bf00      	nop
    5ece:	370c      	adds	r7, #12
    5ed0:	46bd      	mov	sp, r7
    5ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed6:	4770      	bx	lr

00005ed8 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    5ed8:	b580      	push	{r7, lr}
    5eda:	b082      	sub	sp, #8
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	681b      	ldr	r3, [r3, #0]
    5ee4:	f043 0201 	orr.w	r2, r3, #1
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    5eec:	2101      	movs	r1, #1
    5eee:	6878      	ldr	r0, [r7, #4]
    5ef0:	4b02      	ldr	r3, [pc, #8]	; (5efc <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    5ef2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    5ef4:	bf00      	nop
    5ef6:	3708      	adds	r7, #8
    5ef8:	46bd      	mov	sp, r7
    5efa:	bd80      	pop	{r7, pc}
    5efc:	00005e31 	.word	0x00005e31

00005f00 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5f00:	b580      	push	{r7, lr}
    5f02:	b082      	sub	sp, #8
    5f04:	af00      	add	r7, sp, #0
    5f06:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	681b      	ldr	r3, [r3, #0]
    5f0c:	f043 0202 	orr.w	r2, r3, #2
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    5f14:	2103      	movs	r1, #3
    5f16:	6878      	ldr	r0, [r7, #4]
    5f18:	4b02      	ldr	r3, [pc, #8]	; (5f24 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    5f1a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    5f1c:	bf00      	nop
    5f1e:	3708      	adds	r7, #8
    5f20:	46bd      	mov	sp, r7
    5f22:	bd80      	pop	{r7, pc}
    5f24:	00005e31 	.word	0x00005e31

00005f28 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	b084      	sub	sp, #16
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    5f30:	2103      	movs	r1, #3
    5f32:	6878      	ldr	r0, [r7, #4]
    5f34:	4b09      	ldr	r3, [pc, #36]	; (5f5c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    5f36:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	681b      	ldr	r3, [r3, #0]
    5f3c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    5f3e:	68fb      	ldr	r3, [r7, #12]
    5f40:	085b      	lsrs	r3, r3, #1
    5f42:	f003 0301 	and.w	r3, r3, #1
    5f46:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5f48:	68fb      	ldr	r3, [r7, #12]
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	bf14      	ite	ne
    5f4e:	2301      	movne	r3, #1
    5f50:	2300      	moveq	r3, #0
    5f52:	b2db      	uxtb	r3, r3
}
    5f54:	4618      	mov	r0, r3
    5f56:	3710      	adds	r7, #16
    5f58:	46bd      	mov	sp, r7
    5f5a:	bd80      	pop	{r7, pc}
    5f5c:	00005e31 	.word	0x00005e31

00005f60 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5f60:	b580      	push	{r7, lr}
    5f62:	b082      	sub	sp, #8
    5f64:	af00      	add	r7, sp, #0
    5f66:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5f68:	687b      	ldr	r3, [r7, #4]
    5f6a:	681b      	ldr	r3, [r3, #0]
    5f6c:	f023 0202 	bic.w	r2, r3, #2
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    5f74:	2103      	movs	r1, #3
    5f76:	6878      	ldr	r0, [r7, #4]
    5f78:	4b02      	ldr	r3, [pc, #8]	; (5f84 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    5f7a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    5f7c:	bf00      	nop
    5f7e:	3708      	adds	r7, #8
    5f80:	46bd      	mov	sp, r7
    5f82:	bd80      	pop	{r7, pc}
    5f84:	00005e31 	.word	0x00005e31

00005f88 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    5f88:	b480      	push	{r7}
    5f8a:	b085      	sub	sp, #20
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5f90:	687b      	ldr	r3, [r7, #4]
    5f92:	681b      	ldr	r3, [r3, #0]
    5f94:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    5f96:	68fb      	ldr	r3, [r7, #12]
    5f98:	089b      	lsrs	r3, r3, #2
    5f9a:	f003 0303 	and.w	r3, r3, #3
    5f9e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5fa0:	68fb      	ldr	r3, [r7, #12]
}
    5fa2:	4618      	mov	r0, r3
    5fa4:	3714      	adds	r7, #20
    5fa6:	46bd      	mov	sp, r7
    5fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fac:	4770      	bx	lr
	...

00005fb0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    5fb0:	b580      	push	{r7, lr}
    5fb2:	b084      	sub	sp, #16
    5fb4:	af00      	add	r7, sp, #0
    5fb6:	6078      	str	r0, [r7, #4]
    5fb8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    5fba:	2103      	movs	r1, #3
    5fbc:	6878      	ldr	r0, [r7, #4]
    5fbe:	4b07      	ldr	r3, [pc, #28]	; (5fdc <hri_tc_get_CTRLA_reg+0x2c>)
    5fc0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    5fc2:	687b      	ldr	r3, [r7, #4]
    5fc4:	681b      	ldr	r3, [r3, #0]
    5fc6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5fc8:	68fa      	ldr	r2, [r7, #12]
    5fca:	683b      	ldr	r3, [r7, #0]
    5fcc:	4013      	ands	r3, r2
    5fce:	60fb      	str	r3, [r7, #12]
	return tmp;
    5fd0:	68fb      	ldr	r3, [r7, #12]
}
    5fd2:	4618      	mov	r0, r3
    5fd4:	3710      	adds	r7, #16
    5fd6:	46bd      	mov	sp, r7
    5fd8:	bd80      	pop	{r7, pc}
    5fda:	bf00      	nop
    5fdc:	00005e31 	.word	0x00005e31

00005fe0 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    5fe0:	b580      	push	{r7, lr}
    5fe2:	b082      	sub	sp, #8
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
    5fe8:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	683a      	ldr	r2, [r7, #0]
    5fee:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    5ff0:	2103      	movs	r1, #3
    5ff2:	6878      	ldr	r0, [r7, #4]
    5ff4:	4b02      	ldr	r3, [pc, #8]	; (6000 <hri_tc_write_CTRLA_reg+0x20>)
    5ff6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    5ff8:	bf00      	nop
    5ffa:	3708      	adds	r7, #8
    5ffc:	46bd      	mov	sp, r7
    5ffe:	bd80      	pop	{r7, pc}
    6000:	00005e31 	.word	0x00005e31

00006004 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    6004:	b480      	push	{r7}
    6006:	b083      	sub	sp, #12
    6008:	af00      	add	r7, sp, #0
    600a:	6078      	str	r0, [r7, #4]
    600c:	460b      	mov	r3, r1
    600e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	887a      	ldrh	r2, [r7, #2]
    6014:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    6016:	bf00      	nop
    6018:	370c      	adds	r7, #12
    601a:	46bd      	mov	sp, r7
    601c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6020:	4770      	bx	lr

00006022 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    6022:	b480      	push	{r7}
    6024:	b083      	sub	sp, #12
    6026:	af00      	add	r7, sp, #0
    6028:	6078      	str	r0, [r7, #4]
    602a:	460b      	mov	r3, r1
    602c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	78fa      	ldrb	r2, [r7, #3]
    6032:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    6034:	bf00      	nop
    6036:	370c      	adds	r7, #12
    6038:	46bd      	mov	sp, r7
    603a:	f85d 7b04 	ldr.w	r7, [sp], #4
    603e:	4770      	bx	lr

00006040 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    6040:	b480      	push	{r7}
    6042:	b083      	sub	sp, #12
    6044:	af00      	add	r7, sp, #0
    6046:	6078      	str	r0, [r7, #4]
    6048:	460b      	mov	r3, r1
    604a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	78fa      	ldrb	r2, [r7, #3]
    6050:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    6052:	bf00      	nop
    6054:	370c      	adds	r7, #12
    6056:	46bd      	mov	sp, r7
    6058:	f85d 7b04 	ldr.w	r7, [sp], #4
    605c:	4770      	bx	lr
	...

00006060 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    6060:	b580      	push	{r7, lr}
    6062:	b082      	sub	sp, #8
    6064:	af00      	add	r7, sp, #0
    6066:	6078      	str	r0, [r7, #4]
    6068:	460b      	mov	r3, r1
    606a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	78fa      	ldrb	r2, [r7, #3]
    6070:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    6072:	2120      	movs	r1, #32
    6074:	6878      	ldr	r0, [r7, #4]
    6076:	4b03      	ldr	r3, [pc, #12]	; (6084 <hri_tccount8_write_PER_reg+0x24>)
    6078:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    607a:	bf00      	nop
    607c:	3708      	adds	r7, #8
    607e:	46bd      	mov	sp, r7
    6080:	bd80      	pop	{r7, pc}
    6082:	bf00      	nop
    6084:	00005e31 	.word	0x00005e31

00006088 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    6088:	b580      	push	{r7, lr}
    608a:	b082      	sub	sp, #8
    608c:	af00      	add	r7, sp, #0
    608e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    6090:	2120      	movs	r1, #32
    6092:	6878      	ldr	r0, [r7, #4]
    6094:	4b04      	ldr	r3, [pc, #16]	; (60a8 <hri_tccount8_read_PER_reg+0x20>)
    6096:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	7edb      	ldrb	r3, [r3, #27]
    609c:	b2db      	uxtb	r3, r3
}
    609e:	4618      	mov	r0, r3
    60a0:	3708      	adds	r7, #8
    60a2:	46bd      	mov	sp, r7
    60a4:	bd80      	pop	{r7, pc}
    60a6:	bf00      	nop
    60a8:	00005e31 	.word	0x00005e31

000060ac <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    60ac:	b580      	push	{r7, lr}
    60ae:	b082      	sub	sp, #8
    60b0:	af00      	add	r7, sp, #0
    60b2:	6078      	str	r0, [r7, #4]
    60b4:	460b      	mov	r3, r1
    60b6:	70fb      	strb	r3, [r7, #3]
    60b8:	4613      	mov	r3, r2
    60ba:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    60bc:	78fb      	ldrb	r3, [r7, #3]
    60be:	687a      	ldr	r2, [r7, #4]
    60c0:	4413      	add	r3, r2
    60c2:	78ba      	ldrb	r2, [r7, #2]
    60c4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    60c6:	21c0      	movs	r1, #192	; 0xc0
    60c8:	6878      	ldr	r0, [r7, #4]
    60ca:	4b03      	ldr	r3, [pc, #12]	; (60d8 <hri_tccount8_write_CC_reg+0x2c>)
    60cc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    60ce:	bf00      	nop
    60d0:	3708      	adds	r7, #8
    60d2:	46bd      	mov	sp, r7
    60d4:	bd80      	pop	{r7, pc}
    60d6:	bf00      	nop
    60d8:	00005e31 	.word	0x00005e31

000060dc <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    60dc:	b580      	push	{r7, lr}
    60de:	b082      	sub	sp, #8
    60e0:	af00      	add	r7, sp, #0
    60e2:	6078      	str	r0, [r7, #4]
    60e4:	460b      	mov	r3, r1
    60e6:	70fb      	strb	r3, [r7, #3]
    60e8:	4613      	mov	r3, r2
    60ea:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    60ec:	78fb      	ldrb	r3, [r7, #3]
    60ee:	687a      	ldr	r2, [r7, #4]
    60f0:	330c      	adds	r3, #12
    60f2:	005b      	lsls	r3, r3, #1
    60f4:	4413      	add	r3, r2
    60f6:	883a      	ldrh	r2, [r7, #0]
    60f8:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    60fa:	21c0      	movs	r1, #192	; 0xc0
    60fc:	6878      	ldr	r0, [r7, #4]
    60fe:	4b03      	ldr	r3, [pc, #12]	; (610c <hri_tccount16_write_CC_reg+0x30>)
    6100:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6102:	bf00      	nop
    6104:	3708      	adds	r7, #8
    6106:	46bd      	mov	sp, r7
    6108:	bd80      	pop	{r7, pc}
    610a:	bf00      	nop
    610c:	00005e31 	.word	0x00005e31

00006110 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    6110:	b580      	push	{r7, lr}
    6112:	b082      	sub	sp, #8
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
    6118:	460b      	mov	r3, r1
    611a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    611c:	21c0      	movs	r1, #192	; 0xc0
    611e:	6878      	ldr	r0, [r7, #4]
    6120:	4b06      	ldr	r3, [pc, #24]	; (613c <hri_tccount16_read_CC_reg+0x2c>)
    6122:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    6124:	78fb      	ldrb	r3, [r7, #3]
    6126:	687a      	ldr	r2, [r7, #4]
    6128:	330c      	adds	r3, #12
    612a:	005b      	lsls	r3, r3, #1
    612c:	4413      	add	r3, r2
    612e:	889b      	ldrh	r3, [r3, #4]
    6130:	b29b      	uxth	r3, r3
}
    6132:	4618      	mov	r0, r3
    6134:	3708      	adds	r7, #8
    6136:	46bd      	mov	sp, r7
    6138:	bd80      	pop	{r7, pc}
    613a:	bf00      	nop
    613c:	00005e31 	.word	0x00005e31

00006140 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    6140:	b580      	push	{r7, lr}
    6142:	b084      	sub	sp, #16
    6144:	af00      	add	r7, sp, #0
    6146:	60f8      	str	r0, [r7, #12]
    6148:	460b      	mov	r3, r1
    614a:	607a      	str	r2, [r7, #4]
    614c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    614e:	7afb      	ldrb	r3, [r7, #11]
    6150:	68fa      	ldr	r2, [r7, #12]
    6152:	3306      	adds	r3, #6
    6154:	009b      	lsls	r3, r3, #2
    6156:	4413      	add	r3, r2
    6158:	687a      	ldr	r2, [r7, #4]
    615a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    615c:	21c0      	movs	r1, #192	; 0xc0
    615e:	68f8      	ldr	r0, [r7, #12]
    6160:	4b02      	ldr	r3, [pc, #8]	; (616c <hri_tccount32_write_CC_reg+0x2c>)
    6162:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6164:	bf00      	nop
    6166:	3710      	adds	r7, #16
    6168:	46bd      	mov	sp, r7
    616a:	bd80      	pop	{r7, pc}
    616c:	00005e31 	.word	0x00005e31

00006170 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    6170:	b580      	push	{r7, lr}
    6172:	b082      	sub	sp, #8
    6174:	af00      	add	r7, sp, #0
    6176:	6078      	str	r0, [r7, #4]
    6178:	460b      	mov	r3, r1
    617a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    617c:	21c0      	movs	r1, #192	; 0xc0
    617e:	6878      	ldr	r0, [r7, #4]
    6180:	4b05      	ldr	r3, [pc, #20]	; (6198 <hri_tccount32_read_CC_reg+0x28>)
    6182:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    6184:	78fb      	ldrb	r3, [r7, #3]
    6186:	687a      	ldr	r2, [r7, #4]
    6188:	3306      	adds	r3, #6
    618a:	009b      	lsls	r3, r3, #2
    618c:	4413      	add	r3, r2
    618e:	685b      	ldr	r3, [r3, #4]
}
    6190:	4618      	mov	r0, r3
    6192:	3708      	adds	r7, #8
    6194:	46bd      	mov	sp, r7
    6196:	bd80      	pop	{r7, pc}
    6198:	00005e31 	.word	0x00005e31

0000619c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    619c:	b580      	push	{r7, lr}
    619e:	b084      	sub	sp, #16
    61a0:	af00      	add	r7, sp, #0
    61a2:	6078      	str	r0, [r7, #4]
    61a4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    61a6:	6838      	ldr	r0, [r7, #0]
    61a8:	4b93      	ldr	r3, [pc, #588]	; (63f8 <_tc_timer_init+0x25c>)
    61aa:	4798      	blx	r3
    61ac:	4603      	mov	r3, r0
    61ae:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	683a      	ldr	r2, [r7, #0]
    61b4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    61b6:	22a4      	movs	r2, #164	; 0xa4
    61b8:	4990      	ldr	r1, [pc, #576]	; (63fc <_tc_timer_init+0x260>)
    61ba:	2001      	movs	r0, #1
    61bc:	4b90      	ldr	r3, [pc, #576]	; (6400 <_tc_timer_init+0x264>)
    61be:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    61c0:	2101      	movs	r1, #1
    61c2:	6838      	ldr	r0, [r7, #0]
    61c4:	4b8f      	ldr	r3, [pc, #572]	; (6404 <_tc_timer_init+0x268>)
    61c6:	4798      	blx	r3
    61c8:	4603      	mov	r3, r0
    61ca:	f083 0301 	eor.w	r3, r3, #1
    61ce:	b2db      	uxtb	r3, r3
    61d0:	2b00      	cmp	r3, #0
    61d2:	d011      	beq.n	61f8 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    61d4:	2102      	movs	r1, #2
    61d6:	6838      	ldr	r0, [r7, #0]
    61d8:	4b8b      	ldr	r3, [pc, #556]	; (6408 <_tc_timer_init+0x26c>)
    61da:	4798      	blx	r3
    61dc:	4603      	mov	r3, r0
    61de:	2b00      	cmp	r3, #0
    61e0:	d006      	beq.n	61f0 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    61e2:	6838      	ldr	r0, [r7, #0]
    61e4:	4b89      	ldr	r3, [pc, #548]	; (640c <_tc_timer_init+0x270>)
    61e6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    61e8:	2102      	movs	r1, #2
    61ea:	6838      	ldr	r0, [r7, #0]
    61ec:	4b88      	ldr	r3, [pc, #544]	; (6410 <_tc_timer_init+0x274>)
    61ee:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    61f0:	2101      	movs	r1, #1
    61f2:	6838      	ldr	r0, [r7, #0]
    61f4:	4b87      	ldr	r3, [pc, #540]	; (6414 <_tc_timer_init+0x278>)
    61f6:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    61f8:	2101      	movs	r1, #1
    61fa:	6838      	ldr	r0, [r7, #0]
    61fc:	4b84      	ldr	r3, [pc, #528]	; (6410 <_tc_timer_init+0x274>)
    61fe:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    6200:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6204:	4984      	ldr	r1, [pc, #528]	; (6418 <_tc_timer_init+0x27c>)
    6206:	4613      	mov	r3, r2
    6208:	009b      	lsls	r3, r3, #2
    620a:	4413      	add	r3, r2
    620c:	009b      	lsls	r3, r3, #2
    620e:	440b      	add	r3, r1
    6210:	3304      	adds	r3, #4
    6212:	681b      	ldr	r3, [r3, #0]
    6214:	4619      	mov	r1, r3
    6216:	6838      	ldr	r0, [r7, #0]
    6218:	4b7e      	ldr	r3, [pc, #504]	; (6414 <_tc_timer_init+0x278>)
    621a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    621c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6220:	497d      	ldr	r1, [pc, #500]	; (6418 <_tc_timer_init+0x27c>)
    6222:	4613      	mov	r3, r2
    6224:	009b      	lsls	r3, r3, #2
    6226:	4413      	add	r3, r2
    6228:	009b      	lsls	r3, r3, #2
    622a:	440b      	add	r3, r1
    622c:	330a      	adds	r3, #10
    622e:	781b      	ldrb	r3, [r3, #0]
    6230:	4619      	mov	r1, r3
    6232:	6838      	ldr	r0, [r7, #0]
    6234:	4b79      	ldr	r3, [pc, #484]	; (641c <_tc_timer_init+0x280>)
    6236:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    6238:	f997 200f 	ldrsb.w	r2, [r7, #15]
    623c:	4976      	ldr	r1, [pc, #472]	; (6418 <_tc_timer_init+0x27c>)
    623e:	4613      	mov	r3, r2
    6240:	009b      	lsls	r3, r3, #2
    6242:	4413      	add	r3, r2
    6244:	009b      	lsls	r3, r3, #2
    6246:	440b      	add	r3, r1
    6248:	3308      	adds	r3, #8
    624a:	881b      	ldrh	r3, [r3, #0]
    624c:	4619      	mov	r1, r3
    624e:	6838      	ldr	r0, [r7, #0]
    6250:	4b73      	ldr	r3, [pc, #460]	; (6420 <_tc_timer_init+0x284>)
    6252:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    6254:	2101      	movs	r1, #1
    6256:	6838      	ldr	r0, [r7, #0]
    6258:	4b72      	ldr	r3, [pc, #456]	; (6424 <_tc_timer_init+0x288>)
    625a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    625c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6260:	496d      	ldr	r1, [pc, #436]	; (6418 <_tc_timer_init+0x27c>)
    6262:	4613      	mov	r3, r2
    6264:	009b      	lsls	r3, r3, #2
    6266:	4413      	add	r3, r2
    6268:	009b      	lsls	r3, r3, #2
    626a:	440b      	add	r3, r1
    626c:	3304      	adds	r3, #4
    626e:	681b      	ldr	r3, [r3, #0]
    6270:	f003 030c 	and.w	r3, r3, #12
    6274:	2b08      	cmp	r3, #8
    6276:	d11e      	bne.n	62b6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    6278:	f997 200f 	ldrsb.w	r2, [r7, #15]
    627c:	4966      	ldr	r1, [pc, #408]	; (6418 <_tc_timer_init+0x27c>)
    627e:	4613      	mov	r3, r2
    6280:	009b      	lsls	r3, r3, #2
    6282:	4413      	add	r3, r2
    6284:	009b      	lsls	r3, r3, #2
    6286:	440b      	add	r3, r1
    6288:	330c      	adds	r3, #12
    628a:	681b      	ldr	r3, [r3, #0]
    628c:	461a      	mov	r2, r3
    628e:	2100      	movs	r1, #0
    6290:	6838      	ldr	r0, [r7, #0]
    6292:	4b65      	ldr	r3, [pc, #404]	; (6428 <_tc_timer_init+0x28c>)
    6294:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    6296:	f997 200f 	ldrsb.w	r2, [r7, #15]
    629a:	495f      	ldr	r1, [pc, #380]	; (6418 <_tc_timer_init+0x27c>)
    629c:	4613      	mov	r3, r2
    629e:	009b      	lsls	r3, r3, #2
    62a0:	4413      	add	r3, r2
    62a2:	009b      	lsls	r3, r3, #2
    62a4:	440b      	add	r3, r1
    62a6:	3310      	adds	r3, #16
    62a8:	681b      	ldr	r3, [r3, #0]
    62aa:	461a      	mov	r2, r3
    62ac:	2101      	movs	r1, #1
    62ae:	6838      	ldr	r0, [r7, #0]
    62b0:	4b5d      	ldr	r3, [pc, #372]	; (6428 <_tc_timer_init+0x28c>)
    62b2:	4798      	blx	r3
    62b4:	e06a      	b.n	638c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    62b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    62ba:	4957      	ldr	r1, [pc, #348]	; (6418 <_tc_timer_init+0x27c>)
    62bc:	4613      	mov	r3, r2
    62be:	009b      	lsls	r3, r3, #2
    62c0:	4413      	add	r3, r2
    62c2:	009b      	lsls	r3, r3, #2
    62c4:	440b      	add	r3, r1
    62c6:	3304      	adds	r3, #4
    62c8:	681b      	ldr	r3, [r3, #0]
    62ca:	f003 030c 	and.w	r3, r3, #12
    62ce:	2b00      	cmp	r3, #0
    62d0:	d120      	bne.n	6314 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    62d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    62d6:	4950      	ldr	r1, [pc, #320]	; (6418 <_tc_timer_init+0x27c>)
    62d8:	4613      	mov	r3, r2
    62da:	009b      	lsls	r3, r3, #2
    62dc:	4413      	add	r3, r2
    62de:	009b      	lsls	r3, r3, #2
    62e0:	440b      	add	r3, r1
    62e2:	330c      	adds	r3, #12
    62e4:	681b      	ldr	r3, [r3, #0]
    62e6:	b29b      	uxth	r3, r3
    62e8:	461a      	mov	r2, r3
    62ea:	2100      	movs	r1, #0
    62ec:	6838      	ldr	r0, [r7, #0]
    62ee:	4b4f      	ldr	r3, [pc, #316]	; (642c <_tc_timer_init+0x290>)
    62f0:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    62f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    62f6:	4948      	ldr	r1, [pc, #288]	; (6418 <_tc_timer_init+0x27c>)
    62f8:	4613      	mov	r3, r2
    62fa:	009b      	lsls	r3, r3, #2
    62fc:	4413      	add	r3, r2
    62fe:	009b      	lsls	r3, r3, #2
    6300:	440b      	add	r3, r1
    6302:	3310      	adds	r3, #16
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	b29b      	uxth	r3, r3
    6308:	461a      	mov	r2, r3
    630a:	2101      	movs	r1, #1
    630c:	6838      	ldr	r0, [r7, #0]
    630e:	4b47      	ldr	r3, [pc, #284]	; (642c <_tc_timer_init+0x290>)
    6310:	4798      	blx	r3
    6312:	e03b      	b.n	638c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    6314:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6318:	493f      	ldr	r1, [pc, #252]	; (6418 <_tc_timer_init+0x27c>)
    631a:	4613      	mov	r3, r2
    631c:	009b      	lsls	r3, r3, #2
    631e:	4413      	add	r3, r2
    6320:	009b      	lsls	r3, r3, #2
    6322:	440b      	add	r3, r1
    6324:	3304      	adds	r3, #4
    6326:	681b      	ldr	r3, [r3, #0]
    6328:	f003 030c 	and.w	r3, r3, #12
    632c:	2b04      	cmp	r3, #4
    632e:	d12d      	bne.n	638c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    6330:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6334:	4938      	ldr	r1, [pc, #224]	; (6418 <_tc_timer_init+0x27c>)
    6336:	4613      	mov	r3, r2
    6338:	009b      	lsls	r3, r3, #2
    633a:	4413      	add	r3, r2
    633c:	009b      	lsls	r3, r3, #2
    633e:	440b      	add	r3, r1
    6340:	330c      	adds	r3, #12
    6342:	681b      	ldr	r3, [r3, #0]
    6344:	b2db      	uxtb	r3, r3
    6346:	461a      	mov	r2, r3
    6348:	2100      	movs	r1, #0
    634a:	6838      	ldr	r0, [r7, #0]
    634c:	4b38      	ldr	r3, [pc, #224]	; (6430 <_tc_timer_init+0x294>)
    634e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    6350:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6354:	4930      	ldr	r1, [pc, #192]	; (6418 <_tc_timer_init+0x27c>)
    6356:	4613      	mov	r3, r2
    6358:	009b      	lsls	r3, r3, #2
    635a:	4413      	add	r3, r2
    635c:	009b      	lsls	r3, r3, #2
    635e:	440b      	add	r3, r1
    6360:	3310      	adds	r3, #16
    6362:	681b      	ldr	r3, [r3, #0]
    6364:	b2db      	uxtb	r3, r3
    6366:	461a      	mov	r2, r3
    6368:	2101      	movs	r1, #1
    636a:	6838      	ldr	r0, [r7, #0]
    636c:	4b30      	ldr	r3, [pc, #192]	; (6430 <_tc_timer_init+0x294>)
    636e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    6370:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6374:	4928      	ldr	r1, [pc, #160]	; (6418 <_tc_timer_init+0x27c>)
    6376:	4613      	mov	r3, r2
    6378:	009b      	lsls	r3, r3, #2
    637a:	4413      	add	r3, r2
    637c:	009b      	lsls	r3, r3, #2
    637e:	440b      	add	r3, r1
    6380:	330b      	adds	r3, #11
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	4619      	mov	r1, r3
    6386:	6838      	ldr	r0, [r7, #0]
    6388:	4b2a      	ldr	r3, [pc, #168]	; (6434 <_tc_timer_init+0x298>)
    638a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    638c:	6838      	ldr	r0, [r7, #0]
    638e:	4b2a      	ldr	r3, [pc, #168]	; (6438 <_tc_timer_init+0x29c>)
    6390:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    6392:	6879      	ldr	r1, [r7, #4]
    6394:	6838      	ldr	r0, [r7, #0]
    6396:	4b29      	ldr	r3, [pc, #164]	; (643c <_tc_timer_init+0x2a0>)
    6398:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    639a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    639e:	491e      	ldr	r1, [pc, #120]	; (6418 <_tc_timer_init+0x27c>)
    63a0:	4613      	mov	r3, r2
    63a2:	009b      	lsls	r3, r3, #2
    63a4:	4413      	add	r3, r2
    63a6:	009b      	lsls	r3, r3, #2
    63a8:	440b      	add	r3, r1
    63aa:	3302      	adds	r3, #2
    63ac:	f9b3 3000 	ldrsh.w	r3, [r3]
    63b0:	4618      	mov	r0, r3
    63b2:	4b23      	ldr	r3, [pc, #140]	; (6440 <_tc_timer_init+0x2a4>)
    63b4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    63b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    63ba:	4917      	ldr	r1, [pc, #92]	; (6418 <_tc_timer_init+0x27c>)
    63bc:	4613      	mov	r3, r2
    63be:	009b      	lsls	r3, r3, #2
    63c0:	4413      	add	r3, r2
    63c2:	009b      	lsls	r3, r3, #2
    63c4:	440b      	add	r3, r1
    63c6:	3302      	adds	r3, #2
    63c8:	f9b3 3000 	ldrsh.w	r3, [r3]
    63cc:	4618      	mov	r0, r3
    63ce:	4b1d      	ldr	r3, [pc, #116]	; (6444 <_tc_timer_init+0x2a8>)
    63d0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    63d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    63d6:	4910      	ldr	r1, [pc, #64]	; (6418 <_tc_timer_init+0x27c>)
    63d8:	4613      	mov	r3, r2
    63da:	009b      	lsls	r3, r3, #2
    63dc:	4413      	add	r3, r2
    63de:	009b      	lsls	r3, r3, #2
    63e0:	440b      	add	r3, r1
    63e2:	3302      	adds	r3, #2
    63e4:	f9b3 3000 	ldrsh.w	r3, [r3]
    63e8:	4618      	mov	r0, r3
    63ea:	4b17      	ldr	r3, [pc, #92]	; (6448 <_tc_timer_init+0x2ac>)
    63ec:	4798      	blx	r3

	return ERR_NONE;
    63ee:	2300      	movs	r3, #0
}
    63f0:	4618      	mov	r0, r3
    63f2:	3710      	adds	r7, #16
    63f4:	46bd      	mov	sp, r7
    63f6:	bd80      	pop	{r7, pc}
    63f8:	00006755 	.word	0x00006755
    63fc:	00009098 	.word	0x00009098
    6400:	00002249 	.word	0x00002249
    6404:	00005e55 	.word	0x00005e55
    6408:	00005fb1 	.word	0x00005fb1
    640c:	00005f61 	.word	0x00005f61
    6410:	00005e31 	.word	0x00005e31
    6414:	00005fe1 	.word	0x00005fe1
    6418:	20000110 	.word	0x20000110
    641c:	00006041 	.word	0x00006041
    6420:	00006005 	.word	0x00006005
    6424:	00006023 	.word	0x00006023
    6428:	00006141 	.word	0x00006141
    642c:	000060dd 	.word	0x000060dd
    6430:	000060ad 	.word	0x000060ad
    6434:	00006061 	.word	0x00006061
    6438:	00005ebf 	.word	0x00005ebf
    643c:	000067bd 	.word	0x000067bd
    6440:	00005db1 	.word	0x00005db1
    6444:	00005df5 	.word	0x00005df5
    6448:	00005d75 	.word	0x00005d75

0000644c <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    644c:	b580      	push	{r7, lr}
    644e:	b084      	sub	sp, #16
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	68db      	ldr	r3, [r3, #12]
    6458:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    645a:	68f8      	ldr	r0, [r7, #12]
    645c:	4b10      	ldr	r3, [pc, #64]	; (64a0 <_tc_timer_deinit+0x54>)
    645e:	4798      	blx	r3
    6460:	4603      	mov	r3, r0
    6462:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    6464:	22d1      	movs	r2, #209	; 0xd1
    6466:	490f      	ldr	r1, [pc, #60]	; (64a4 <_tc_timer_deinit+0x58>)
    6468:	2001      	movs	r0, #1
    646a:	4b0f      	ldr	r3, [pc, #60]	; (64a8 <_tc_timer_deinit+0x5c>)
    646c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    646e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    6472:	490e      	ldr	r1, [pc, #56]	; (64ac <_tc_timer_deinit+0x60>)
    6474:	4613      	mov	r3, r2
    6476:	009b      	lsls	r3, r3, #2
    6478:	4413      	add	r3, r2
    647a:	009b      	lsls	r3, r3, #2
    647c:	440b      	add	r3, r1
    647e:	3302      	adds	r3, #2
    6480:	f9b3 3000 	ldrsh.w	r3, [r3]
    6484:	4618      	mov	r0, r3
    6486:	4b0a      	ldr	r3, [pc, #40]	; (64b0 <_tc_timer_deinit+0x64>)
    6488:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    648a:	68f8      	ldr	r0, [r7, #12]
    648c:	4b09      	ldr	r3, [pc, #36]	; (64b4 <_tc_timer_deinit+0x68>)
    648e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    6490:	68f8      	ldr	r0, [r7, #12]
    6492:	4b09      	ldr	r3, [pc, #36]	; (64b8 <_tc_timer_deinit+0x6c>)
    6494:	4798      	blx	r3
}
    6496:	bf00      	nop
    6498:	3710      	adds	r7, #16
    649a:	46bd      	mov	sp, r7
    649c:	bd80      	pop	{r7, pc}
    649e:	bf00      	nop
    64a0:	00006755 	.word	0x00006755
    64a4:	00009098 	.word	0x00009098
    64a8:	00002249 	.word	0x00002249
    64ac:	20000110 	.word	0x20000110
    64b0:	00005db1 	.word	0x00005db1
    64b4:	00005f61 	.word	0x00005f61
    64b8:	00005ed9 	.word	0x00005ed9

000064bc <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    64bc:	b580      	push	{r7, lr}
    64be:	b082      	sub	sp, #8
    64c0:	af00      	add	r7, sp, #0
    64c2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    64c4:	687b      	ldr	r3, [r7, #4]
    64c6:	68db      	ldr	r3, [r3, #12]
    64c8:	4618      	mov	r0, r3
    64ca:	4b03      	ldr	r3, [pc, #12]	; (64d8 <_tc_timer_start+0x1c>)
    64cc:	4798      	blx	r3
}
    64ce:	bf00      	nop
    64d0:	3708      	adds	r7, #8
    64d2:	46bd      	mov	sp, r7
    64d4:	bd80      	pop	{r7, pc}
    64d6:	bf00      	nop
    64d8:	00005f01 	.word	0x00005f01

000064dc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    64dc:	b580      	push	{r7, lr}
    64de:	b082      	sub	sp, #8
    64e0:	af00      	add	r7, sp, #0
    64e2:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	68db      	ldr	r3, [r3, #12]
    64e8:	4618      	mov	r0, r3
    64ea:	4b03      	ldr	r3, [pc, #12]	; (64f8 <_tc_timer_stop+0x1c>)
    64ec:	4798      	blx	r3
}
    64ee:	bf00      	nop
    64f0:	3708      	adds	r7, #8
    64f2:	46bd      	mov	sp, r7
    64f4:	bd80      	pop	{r7, pc}
    64f6:	bf00      	nop
    64f8:	00005f61 	.word	0x00005f61

000064fc <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b084      	sub	sp, #16
    6500:	af00      	add	r7, sp, #0
    6502:	6078      	str	r0, [r7, #4]
    6504:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	68db      	ldr	r3, [r3, #12]
    650a:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    650c:	68f8      	ldr	r0, [r7, #12]
    650e:	4b14      	ldr	r3, [pc, #80]	; (6560 <_tc_timer_set_period+0x64>)
    6510:	4798      	blx	r3
    6512:	4603      	mov	r3, r0
    6514:	2b02      	cmp	r3, #2
    6516:	d105      	bne.n	6524 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    6518:	683a      	ldr	r2, [r7, #0]
    651a:	2100      	movs	r1, #0
    651c:	68f8      	ldr	r0, [r7, #12]
    651e:	4b11      	ldr	r3, [pc, #68]	; (6564 <_tc_timer_set_period+0x68>)
    6520:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    6522:	e019      	b.n	6558 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    6524:	68f8      	ldr	r0, [r7, #12]
    6526:	4b0e      	ldr	r3, [pc, #56]	; (6560 <_tc_timer_set_period+0x64>)
    6528:	4798      	blx	r3
    652a:	4603      	mov	r3, r0
    652c:	2b00      	cmp	r3, #0
    652e:	d107      	bne.n	6540 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    6530:	683b      	ldr	r3, [r7, #0]
    6532:	b29b      	uxth	r3, r3
    6534:	461a      	mov	r2, r3
    6536:	2100      	movs	r1, #0
    6538:	68f8      	ldr	r0, [r7, #12]
    653a:	4b0b      	ldr	r3, [pc, #44]	; (6568 <_tc_timer_set_period+0x6c>)
    653c:	4798      	blx	r3
}
    653e:	e00b      	b.n	6558 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    6540:	68f8      	ldr	r0, [r7, #12]
    6542:	4b07      	ldr	r3, [pc, #28]	; (6560 <_tc_timer_set_period+0x64>)
    6544:	4798      	blx	r3
    6546:	4603      	mov	r3, r0
    6548:	2b01      	cmp	r3, #1
    654a:	d105      	bne.n	6558 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    654c:	683b      	ldr	r3, [r7, #0]
    654e:	b2db      	uxtb	r3, r3
    6550:	4619      	mov	r1, r3
    6552:	68f8      	ldr	r0, [r7, #12]
    6554:	4b05      	ldr	r3, [pc, #20]	; (656c <_tc_timer_set_period+0x70>)
    6556:	4798      	blx	r3
}
    6558:	bf00      	nop
    655a:	3710      	adds	r7, #16
    655c:	46bd      	mov	sp, r7
    655e:	bd80      	pop	{r7, pc}
    6560:	00005f89 	.word	0x00005f89
    6564:	00006141 	.word	0x00006141
    6568:	000060dd 	.word	0x000060dd
    656c:	00006061 	.word	0x00006061

00006570 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    6570:	b580      	push	{r7, lr}
    6572:	b084      	sub	sp, #16
    6574:	af00      	add	r7, sp, #0
    6576:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    6578:	687b      	ldr	r3, [r7, #4]
    657a:	68db      	ldr	r3, [r3, #12]
    657c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    657e:	68f8      	ldr	r0, [r7, #12]
    6580:	4b13      	ldr	r3, [pc, #76]	; (65d0 <_tc_timer_get_period+0x60>)
    6582:	4798      	blx	r3
    6584:	4603      	mov	r3, r0
    6586:	2b02      	cmp	r3, #2
    6588:	d105      	bne.n	6596 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    658a:	2100      	movs	r1, #0
    658c:	68f8      	ldr	r0, [r7, #12]
    658e:	4b11      	ldr	r3, [pc, #68]	; (65d4 <_tc_timer_get_period+0x64>)
    6590:	4798      	blx	r3
    6592:	4603      	mov	r3, r0
    6594:	e017      	b.n	65c6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    6596:	68f8      	ldr	r0, [r7, #12]
    6598:	4b0d      	ldr	r3, [pc, #52]	; (65d0 <_tc_timer_get_period+0x60>)
    659a:	4798      	blx	r3
    659c:	4603      	mov	r3, r0
    659e:	2b00      	cmp	r3, #0
    65a0:	d105      	bne.n	65ae <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    65a2:	2100      	movs	r1, #0
    65a4:	68f8      	ldr	r0, [r7, #12]
    65a6:	4b0c      	ldr	r3, [pc, #48]	; (65d8 <_tc_timer_get_period+0x68>)
    65a8:	4798      	blx	r3
    65aa:	4603      	mov	r3, r0
    65ac:	e00b      	b.n	65c6 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    65ae:	68f8      	ldr	r0, [r7, #12]
    65b0:	4b07      	ldr	r3, [pc, #28]	; (65d0 <_tc_timer_get_period+0x60>)
    65b2:	4798      	blx	r3
    65b4:	4603      	mov	r3, r0
    65b6:	2b01      	cmp	r3, #1
    65b8:	d104      	bne.n	65c4 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    65ba:	68f8      	ldr	r0, [r7, #12]
    65bc:	4b07      	ldr	r3, [pc, #28]	; (65dc <_tc_timer_get_period+0x6c>)
    65be:	4798      	blx	r3
    65c0:	4603      	mov	r3, r0
    65c2:	e000      	b.n	65c6 <_tc_timer_get_period+0x56>
	}

	return 0;
    65c4:	2300      	movs	r3, #0
}
    65c6:	4618      	mov	r0, r3
    65c8:	3710      	adds	r7, #16
    65ca:	46bd      	mov	sp, r7
    65cc:	bd80      	pop	{r7, pc}
    65ce:	bf00      	nop
    65d0:	00005f89 	.word	0x00005f89
    65d4:	00006171 	.word	0x00006171
    65d8:	00006111 	.word	0x00006111
    65dc:	00006089 	.word	0x00006089

000065e0 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    65e0:	b580      	push	{r7, lr}
    65e2:	b082      	sub	sp, #8
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	68db      	ldr	r3, [r3, #12]
    65ec:	4618      	mov	r0, r3
    65ee:	4b03      	ldr	r3, [pc, #12]	; (65fc <_tc_timer_is_started+0x1c>)
    65f0:	4798      	blx	r3
    65f2:	4603      	mov	r3, r0
}
    65f4:	4618      	mov	r0, r3
    65f6:	3708      	adds	r7, #8
    65f8:	46bd      	mov	sp, r7
    65fa:	bd80      	pop	{r7, pc}
    65fc:	00005f29 	.word	0x00005f29

00006600 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    6600:	b480      	push	{r7}
    6602:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    6604:	4b02      	ldr	r3, [pc, #8]	; (6610 <_tc_get_timer+0x10>)
}
    6606:	4618      	mov	r0, r3
    6608:	46bd      	mov	sp, r7
    660a:	f85d 7b04 	ldr.w	r7, [sp], #4
    660e:	4770      	bx	lr
    6610:	20000188 	.word	0x20000188

00006614 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    6614:	b580      	push	{r7, lr}
    6616:	b084      	sub	sp, #16
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    661c:	687b      	ldr	r3, [r7, #4]
    661e:	68db      	ldr	r3, [r3, #12]
    6620:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    6622:	68f8      	ldr	r0, [r7, #12]
    6624:	4b0e      	ldr	r3, [pc, #56]	; (6660 <_tc_timer_set_irq+0x4c>)
    6626:	4798      	blx	r3
    6628:	4603      	mov	r3, r0
    662a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    662c:	f44f 7293 	mov.w	r2, #294	; 0x126
    6630:	490c      	ldr	r1, [pc, #48]	; (6664 <_tc_timer_set_irq+0x50>)
    6632:	2001      	movs	r0, #1
    6634:	4b0c      	ldr	r3, [pc, #48]	; (6668 <_tc_timer_set_irq+0x54>)
    6636:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    6638:	f997 200b 	ldrsb.w	r2, [r7, #11]
    663c:	490b      	ldr	r1, [pc, #44]	; (666c <_tc_timer_set_irq+0x58>)
    663e:	4613      	mov	r3, r2
    6640:	009b      	lsls	r3, r3, #2
    6642:	4413      	add	r3, r2
    6644:	009b      	lsls	r3, r3, #2
    6646:	440b      	add	r3, r1
    6648:	3302      	adds	r3, #2
    664a:	f9b3 3000 	ldrsh.w	r3, [r3]
    664e:	b2db      	uxtb	r3, r3
    6650:	4618      	mov	r0, r3
    6652:	4b07      	ldr	r3, [pc, #28]	; (6670 <_tc_timer_set_irq+0x5c>)
    6654:	4798      	blx	r3
}
    6656:	bf00      	nop
    6658:	3710      	adds	r7, #16
    665a:	46bd      	mov	sp, r7
    665c:	bd80      	pop	{r7, pc}
    665e:	bf00      	nop
    6660:	00006755 	.word	0x00006755
    6664:	00009098 	.word	0x00009098
    6668:	00002249 	.word	0x00002249
    666c:	20000110 	.word	0x20000110
    6670:	00002bd1 	.word	0x00002bd1

00006674 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    6674:	b580      	push	{r7, lr}
    6676:	b084      	sub	sp, #16
    6678:	af00      	add	r7, sp, #0
    667a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	68db      	ldr	r3, [r3, #12]
    6680:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    6682:	68f8      	ldr	r0, [r7, #12]
    6684:	4b07      	ldr	r3, [pc, #28]	; (66a4 <tc_interrupt_handler+0x30>)
    6686:	4798      	blx	r3
    6688:	4603      	mov	r3, r0
    668a:	2b00      	cmp	r3, #0
    668c:	d006      	beq.n	669c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    668e:	68f8      	ldr	r0, [r7, #12]
    6690:	4b05      	ldr	r3, [pc, #20]	; (66a8 <tc_interrupt_handler+0x34>)
    6692:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    6694:	687b      	ldr	r3, [r7, #4]
    6696:	681b      	ldr	r3, [r3, #0]
    6698:	6878      	ldr	r0, [r7, #4]
    669a:	4798      	blx	r3
	}
}
    669c:	bf00      	nop
    669e:	3710      	adds	r7, #16
    66a0:	46bd      	mov	sp, r7
    66a2:	bd80      	pop	{r7, pc}
    66a4:	00005e7d 	.word	0x00005e7d
    66a8:	00005ea5 	.word	0x00005ea5

000066ac <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    66ac:	b580      	push	{r7, lr}
    66ae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    66b0:	4b03      	ldr	r3, [pc, #12]	; (66c0 <TC0_Handler+0x14>)
    66b2:	681b      	ldr	r3, [r3, #0]
    66b4:	4618      	mov	r0, r3
    66b6:	4b03      	ldr	r3, [pc, #12]	; (66c4 <TC0_Handler+0x18>)
    66b8:	4798      	blx	r3
}
    66ba:	bf00      	nop
    66bc:	bd80      	pop	{r7, pc}
    66be:	bf00      	nop
    66c0:	2000042c 	.word	0x2000042c
    66c4:	00006675 	.word	0x00006675

000066c8 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    66c8:	b580      	push	{r7, lr}
    66ca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    66cc:	4b03      	ldr	r3, [pc, #12]	; (66dc <TC1_Handler+0x14>)
    66ce:	681b      	ldr	r3, [r3, #0]
    66d0:	4618      	mov	r0, r3
    66d2:	4b03      	ldr	r3, [pc, #12]	; (66e0 <TC1_Handler+0x18>)
    66d4:	4798      	blx	r3
}
    66d6:	bf00      	nop
    66d8:	bd80      	pop	{r7, pc}
    66da:	bf00      	nop
    66dc:	20000430 	.word	0x20000430
    66e0:	00006675 	.word	0x00006675

000066e4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    66e4:	b580      	push	{r7, lr}
    66e6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    66e8:	4b03      	ldr	r3, [pc, #12]	; (66f8 <TC2_Handler+0x14>)
    66ea:	681b      	ldr	r3, [r3, #0]
    66ec:	4618      	mov	r0, r3
    66ee:	4b03      	ldr	r3, [pc, #12]	; (66fc <TC2_Handler+0x18>)
    66f0:	4798      	blx	r3
}
    66f2:	bf00      	nop
    66f4:	bd80      	pop	{r7, pc}
    66f6:	bf00      	nop
    66f8:	20000434 	.word	0x20000434
    66fc:	00006675 	.word	0x00006675

00006700 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    6700:	b580      	push	{r7, lr}
    6702:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    6704:	4b03      	ldr	r3, [pc, #12]	; (6714 <TC3_Handler+0x14>)
    6706:	681b      	ldr	r3, [r3, #0]
    6708:	4618      	mov	r0, r3
    670a:	4b03      	ldr	r3, [pc, #12]	; (6718 <TC3_Handler+0x18>)
    670c:	4798      	blx	r3
}
    670e:	bf00      	nop
    6710:	bd80      	pop	{r7, pc}
    6712:	bf00      	nop
    6714:	20000438 	.word	0x20000438
    6718:	00006675 	.word	0x00006675

0000671c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    671c:	b580      	push	{r7, lr}
    671e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    6720:	4b03      	ldr	r3, [pc, #12]	; (6730 <TC4_Handler+0x14>)
    6722:	681b      	ldr	r3, [r3, #0]
    6724:	4618      	mov	r0, r3
    6726:	4b03      	ldr	r3, [pc, #12]	; (6734 <TC4_Handler+0x18>)
    6728:	4798      	blx	r3
}
    672a:	bf00      	nop
    672c:	bd80      	pop	{r7, pc}
    672e:	bf00      	nop
    6730:	2000043c 	.word	0x2000043c
    6734:	00006675 	.word	0x00006675

00006738 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    6738:	b580      	push	{r7, lr}
    673a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    673c:	4b03      	ldr	r3, [pc, #12]	; (674c <TC5_Handler+0x14>)
    673e:	681b      	ldr	r3, [r3, #0]
    6740:	4618      	mov	r0, r3
    6742:	4b03      	ldr	r3, [pc, #12]	; (6750 <TC5_Handler+0x18>)
    6744:	4798      	blx	r3
}
    6746:	bf00      	nop
    6748:	bd80      	pop	{r7, pc}
    674a:	bf00      	nop
    674c:	20000440 	.word	0x20000440
    6750:	00006675 	.word	0x00006675

00006754 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    6754:	b580      	push	{r7, lr}
    6756:	b084      	sub	sp, #16
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    675c:	6878      	ldr	r0, [r7, #4]
    675e:	4b13      	ldr	r3, [pc, #76]	; (67ac <get_tc_index+0x58>)
    6760:	4798      	blx	r3
    6762:	4603      	mov	r3, r0
    6764:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    6766:	2300      	movs	r3, #0
    6768:	73fb      	strb	r3, [r7, #15]
    676a:	e010      	b.n	678e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    676c:	7bfa      	ldrb	r2, [r7, #15]
    676e:	4910      	ldr	r1, [pc, #64]	; (67b0 <get_tc_index+0x5c>)
    6770:	4613      	mov	r3, r2
    6772:	009b      	lsls	r3, r3, #2
    6774:	4413      	add	r3, r2
    6776:	009b      	lsls	r3, r3, #2
    6778:	440b      	add	r3, r1
    677a:	781b      	ldrb	r3, [r3, #0]
    677c:	7bba      	ldrb	r2, [r7, #14]
    677e:	429a      	cmp	r2, r3
    6780:	d102      	bne.n	6788 <get_tc_index+0x34>
			return i;
    6782:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6786:	e00d      	b.n	67a4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    6788:	7bfb      	ldrb	r3, [r7, #15]
    678a:	3301      	adds	r3, #1
    678c:	73fb      	strb	r3, [r7, #15]
    678e:	7bfb      	ldrb	r3, [r7, #15]
    6790:	2b05      	cmp	r3, #5
    6792:	d9eb      	bls.n	676c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    6794:	f240 127b 	movw	r2, #379	; 0x17b
    6798:	4906      	ldr	r1, [pc, #24]	; (67b4 <get_tc_index+0x60>)
    679a:	2000      	movs	r0, #0
    679c:	4b06      	ldr	r3, [pc, #24]	; (67b8 <get_tc_index+0x64>)
    679e:	4798      	blx	r3
	return -1;
    67a0:	f04f 33ff 	mov.w	r3, #4294967295
}
    67a4:	4618      	mov	r0, r3
    67a6:	3710      	adds	r7, #16
    67a8:	46bd      	mov	sp, r7
    67aa:	bd80      	pop	{r7, pc}
    67ac:	00006859 	.word	0x00006859
    67b0:	20000110 	.word	0x20000110
    67b4:	00009098 	.word	0x00009098
    67b8:	00002249 	.word	0x00002249

000067bc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    67bc:	b480      	push	{r7}
    67be:	b083      	sub	sp, #12
    67c0:	af00      	add	r7, sp, #0
    67c2:	6078      	str	r0, [r7, #4]
    67c4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    67c6:	687b      	ldr	r3, [r7, #4]
    67c8:	4a17      	ldr	r2, [pc, #92]	; (6828 <_tc_init_irq_param+0x6c>)
    67ca:	4293      	cmp	r3, r2
    67cc:	d102      	bne.n	67d4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    67ce:	4a17      	ldr	r2, [pc, #92]	; (682c <_tc_init_irq_param+0x70>)
    67d0:	683b      	ldr	r3, [r7, #0]
    67d2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	4a16      	ldr	r2, [pc, #88]	; (6830 <_tc_init_irq_param+0x74>)
    67d8:	4293      	cmp	r3, r2
    67da:	d102      	bne.n	67e2 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    67dc:	4a15      	ldr	r2, [pc, #84]	; (6834 <_tc_init_irq_param+0x78>)
    67de:	683b      	ldr	r3, [r7, #0]
    67e0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	4a14      	ldr	r2, [pc, #80]	; (6838 <_tc_init_irq_param+0x7c>)
    67e6:	4293      	cmp	r3, r2
    67e8:	d102      	bne.n	67f0 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    67ea:	4a14      	ldr	r2, [pc, #80]	; (683c <_tc_init_irq_param+0x80>)
    67ec:	683b      	ldr	r3, [r7, #0]
    67ee:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    67f0:	687b      	ldr	r3, [r7, #4]
    67f2:	4a13      	ldr	r2, [pc, #76]	; (6840 <_tc_init_irq_param+0x84>)
    67f4:	4293      	cmp	r3, r2
    67f6:	d102      	bne.n	67fe <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    67f8:	4a12      	ldr	r2, [pc, #72]	; (6844 <_tc_init_irq_param+0x88>)
    67fa:	683b      	ldr	r3, [r7, #0]
    67fc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	4a11      	ldr	r2, [pc, #68]	; (6848 <_tc_init_irq_param+0x8c>)
    6802:	4293      	cmp	r3, r2
    6804:	d102      	bne.n	680c <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    6806:	4a11      	ldr	r2, [pc, #68]	; (684c <_tc_init_irq_param+0x90>)
    6808:	683b      	ldr	r3, [r7, #0]
    680a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    680c:	687b      	ldr	r3, [r7, #4]
    680e:	4a10      	ldr	r2, [pc, #64]	; (6850 <_tc_init_irq_param+0x94>)
    6810:	4293      	cmp	r3, r2
    6812:	d102      	bne.n	681a <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    6814:	4a0f      	ldr	r2, [pc, #60]	; (6854 <_tc_init_irq_param+0x98>)
    6816:	683b      	ldr	r3, [r7, #0]
    6818:	6013      	str	r3, [r2, #0]
	}
}
    681a:	bf00      	nop
    681c:	370c      	adds	r7, #12
    681e:	46bd      	mov	sp, r7
    6820:	f85d 7b04 	ldr.w	r7, [sp], #4
    6824:	4770      	bx	lr
    6826:	bf00      	nop
    6828:	40003800 	.word	0x40003800
    682c:	2000042c 	.word	0x2000042c
    6830:	40003c00 	.word	0x40003c00
    6834:	20000430 	.word	0x20000430
    6838:	4101a000 	.word	0x4101a000
    683c:	20000434 	.word	0x20000434
    6840:	4101c000 	.word	0x4101c000
    6844:	20000438 	.word	0x20000438
    6848:	42001400 	.word	0x42001400
    684c:	2000043c 	.word	0x2000043c
    6850:	42001800 	.word	0x42001800
    6854:	20000440 	.word	0x20000440

00006858 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    6858:	b4b0      	push	{r4, r5, r7}
    685a:	b08d      	sub	sp, #52	; 0x34
    685c:	af00      	add	r7, sp, #0
    685e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6860:	4b13      	ldr	r3, [pc, #76]	; (68b0 <_get_hardware_offset+0x58>)
    6862:	f107 040c 	add.w	r4, r7, #12
    6866:	461d      	mov	r5, r3
    6868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    686a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    686c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6874:	2300      	movs	r3, #0
    6876:	62fb      	str	r3, [r7, #44]	; 0x2c
    6878:	e010      	b.n	689c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    687c:	009b      	lsls	r3, r3, #2
    687e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6882:	4413      	add	r3, r2
    6884:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6888:	461a      	mov	r2, r3
    688a:	687b      	ldr	r3, [r7, #4]
    688c:	429a      	cmp	r2, r3
    688e:	d102      	bne.n	6896 <_get_hardware_offset+0x3e>
			return i;
    6890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6892:	b2db      	uxtb	r3, r3
    6894:	e006      	b.n	68a4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6898:	3301      	adds	r3, #1
    689a:	62fb      	str	r3, [r7, #44]	; 0x2c
    689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    689e:	2b07      	cmp	r3, #7
    68a0:	d9eb      	bls.n	687a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    68a2:	2300      	movs	r3, #0
}
    68a4:	4618      	mov	r0, r3
    68a6:	3734      	adds	r7, #52	; 0x34
    68a8:	46bd      	mov	sp, r7
    68aa:	bcb0      	pop	{r4, r5, r7}
    68ac:	4770      	bx	lr
    68ae:	bf00      	nop
    68b0:	000090ac 	.word	0x000090ac

000068b4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    68b4:	b480      	push	{r7}
    68b6:	b087      	sub	sp, #28
    68b8:	af00      	add	r7, sp, #0
    68ba:	60f8      	str	r0, [r7, #12]
    68bc:	460b      	mov	r3, r1
    68be:	607a      	str	r2, [r7, #4]
    68c0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    68c2:	7afa      	ldrb	r2, [r7, #11]
    68c4:	68f9      	ldr	r1, [r7, #12]
    68c6:	4613      	mov	r3, r2
    68c8:	009b      	lsls	r3, r3, #2
    68ca:	4413      	add	r3, r2
    68cc:	009b      	lsls	r3, r3, #2
    68ce:	440b      	add	r3, r1
    68d0:	3340      	adds	r3, #64	; 0x40
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    68d6:	697a      	ldr	r2, [r7, #20]
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	4013      	ands	r3, r2
    68dc:	617b      	str	r3, [r7, #20]
	return tmp;
    68de:	697b      	ldr	r3, [r7, #20]
}
    68e0:	4618      	mov	r0, r3
    68e2:	371c      	adds	r7, #28
    68e4:	46bd      	mov	sp, r7
    68e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ea:	4770      	bx	lr

000068ec <hri_oscctrl_get_STATUS_reg>:
{
    68ec:	b480      	push	{r7}
    68ee:	b085      	sub	sp, #20
    68f0:	af00      	add	r7, sp, #0
    68f2:	6078      	str	r0, [r7, #4]
    68f4:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    68f6:	687b      	ldr	r3, [r7, #4]
    68f8:	691b      	ldr	r3, [r3, #16]
    68fa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    68fc:	68fa      	ldr	r2, [r7, #12]
    68fe:	683b      	ldr	r3, [r7, #0]
    6900:	4013      	ands	r3, r2
    6902:	60fb      	str	r3, [r7, #12]
	return tmp;
    6904:	68fb      	ldr	r3, [r7, #12]
}
    6906:	4618      	mov	r0, r3
    6908:	3714      	adds	r7, #20
    690a:	46bd      	mov	sp, r7
    690c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6910:	4770      	bx	lr

00006912 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    6912:	b480      	push	{r7}
    6914:	b085      	sub	sp, #20
    6916:	af00      	add	r7, sp, #0
    6918:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	f893 3020 	ldrb.w	r3, [r3, #32]
    6920:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    6922:	7bfb      	ldrb	r3, [r7, #15]
    6924:	f003 0301 	and.w	r3, r3, #1
    6928:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    692a:	7bfb      	ldrb	r3, [r7, #15]
    692c:	2b00      	cmp	r3, #0
    692e:	bf14      	ite	ne
    6930:	2301      	movne	r3, #1
    6932:	2300      	moveq	r3, #0
    6934:	b2db      	uxtb	r3, r3
}
    6936:	4618      	mov	r0, r3
    6938:	3714      	adds	r7, #20
    693a:	46bd      	mov	sp, r7
    693c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6940:	4770      	bx	lr

00006942 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    6942:	b480      	push	{r7}
    6944:	b083      	sub	sp, #12
    6946:	af00      	add	r7, sp, #0
    6948:	6078      	str	r0, [r7, #4]
    694a:	460b      	mov	r3, r1
    694c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    694e:	bf00      	nop
    6950:	687b      	ldr	r3, [r7, #4]
    6952:	789b      	ldrb	r3, [r3, #2]
    6954:	b2da      	uxtb	r2, r3
    6956:	78fb      	ldrb	r3, [r7, #3]
    6958:	4013      	ands	r3, r2
    695a:	b2db      	uxtb	r3, r3
    695c:	2b00      	cmp	r3, #0
    695e:	d1f7      	bne.n	6950 <hri_usb_wait_for_sync+0xe>
	};
}
    6960:	bf00      	nop
    6962:	370c      	adds	r7, #12
    6964:	46bd      	mov	sp, r7
    6966:	f85d 7b04 	ldr.w	r7, [sp], #4
    696a:	4770      	bx	lr

0000696c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    696c:	b480      	push	{r7}
    696e:	b083      	sub	sp, #12
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
    6974:	460b      	mov	r3, r1
    6976:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	789b      	ldrb	r3, [r3, #2]
    697c:	b2da      	uxtb	r2, r3
    697e:	78fb      	ldrb	r3, [r7, #3]
    6980:	4013      	ands	r3, r2
    6982:	b2db      	uxtb	r3, r3
    6984:	2b00      	cmp	r3, #0
    6986:	bf14      	ite	ne
    6988:	2301      	movne	r3, #1
    698a:	2300      	moveq	r3, #0
    698c:	b2db      	uxtb	r3, r3
}
    698e:	4618      	mov	r0, r3
    6990:	370c      	adds	r7, #12
    6992:	46bd      	mov	sp, r7
    6994:	f85d 7b04 	ldr.w	r7, [sp], #4
    6998:	4770      	bx	lr

0000699a <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    699a:	b480      	push	{r7}
    699c:	b085      	sub	sp, #20
    699e:	af00      	add	r7, sp, #0
    69a0:	6078      	str	r0, [r7, #4]
    69a2:	460b      	mov	r3, r1
    69a4:	70fb      	strb	r3, [r7, #3]
    69a6:	4613      	mov	r3, r2
    69a8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    69aa:	78fb      	ldrb	r3, [r7, #3]
    69ac:	687a      	ldr	r2, [r7, #4]
    69ae:	3308      	adds	r3, #8
    69b0:	015b      	lsls	r3, r3, #5
    69b2:	4413      	add	r3, r2
    69b4:	3307      	adds	r3, #7
    69b6:	781b      	ldrb	r3, [r3, #0]
    69b8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    69ba:	7bfa      	ldrb	r2, [r7, #15]
    69bc:	78bb      	ldrb	r3, [r7, #2]
    69be:	4013      	ands	r3, r2
    69c0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    69c2:	7bfb      	ldrb	r3, [r7, #15]
}
    69c4:	4618      	mov	r0, r3
    69c6:	3714      	adds	r7, #20
    69c8:	46bd      	mov	sp, r7
    69ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ce:	4770      	bx	lr

000069d0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    69d0:	b480      	push	{r7}
    69d2:	b083      	sub	sp, #12
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
    69d8:	460b      	mov	r3, r1
    69da:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    69dc:	78fb      	ldrb	r3, [r7, #3]
    69de:	687a      	ldr	r2, [r7, #4]
    69e0:	3308      	adds	r3, #8
    69e2:	015b      	lsls	r3, r3, #5
    69e4:	4413      	add	r3, r2
    69e6:	3307      	adds	r3, #7
    69e8:	781b      	ldrb	r3, [r3, #0]
    69ea:	b2db      	uxtb	r3, r3
}
    69ec:	4618      	mov	r0, r3
    69ee:	370c      	adds	r7, #12
    69f0:	46bd      	mov	sp, r7
    69f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    69f6:	4770      	bx	lr

000069f8 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    69f8:	b480      	push	{r7}
    69fa:	b083      	sub	sp, #12
    69fc:	af00      	add	r7, sp, #0
    69fe:	6078      	str	r0, [r7, #4]
    6a00:	460b      	mov	r3, r1
    6a02:	70fb      	strb	r3, [r7, #3]
    6a04:	4613      	mov	r3, r2
    6a06:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    6a08:	78fb      	ldrb	r3, [r7, #3]
    6a0a:	687a      	ldr	r2, [r7, #4]
    6a0c:	3308      	adds	r3, #8
    6a0e:	015b      	lsls	r3, r3, #5
    6a10:	4413      	add	r3, r2
    6a12:	3307      	adds	r3, #7
    6a14:	78ba      	ldrb	r2, [r7, #2]
    6a16:	701a      	strb	r2, [r3, #0]
}
    6a18:	bf00      	nop
    6a1a:	370c      	adds	r7, #12
    6a1c:	46bd      	mov	sp, r7
    6a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a22:	4770      	bx	lr

00006a24 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    6a24:	b480      	push	{r7}
    6a26:	b083      	sub	sp, #12
    6a28:	af00      	add	r7, sp, #0
    6a2a:	6078      	str	r0, [r7, #4]
    6a2c:	460b      	mov	r3, r1
    6a2e:	70fb      	strb	r3, [r7, #3]
    6a30:	4613      	mov	r3, r2
    6a32:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    6a34:	78fb      	ldrb	r3, [r7, #3]
    6a36:	687a      	ldr	r2, [r7, #4]
    6a38:	3308      	adds	r3, #8
    6a3a:	015b      	lsls	r3, r3, #5
    6a3c:	4413      	add	r3, r2
    6a3e:	3305      	adds	r3, #5
    6a40:	78ba      	ldrb	r2, [r7, #2]
    6a42:	701a      	strb	r2, [r3, #0]
}
    6a44:	bf00      	nop
    6a46:	370c      	adds	r7, #12
    6a48:	46bd      	mov	sp, r7
    6a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a4e:	4770      	bx	lr

00006a50 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    6a50:	b480      	push	{r7}
    6a52:	b083      	sub	sp, #12
    6a54:	af00      	add	r7, sp, #0
    6a56:	6078      	str	r0, [r7, #4]
    6a58:	460b      	mov	r3, r1
    6a5a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    6a5c:	78fb      	ldrb	r3, [r7, #3]
    6a5e:	687a      	ldr	r2, [r7, #4]
    6a60:	3308      	adds	r3, #8
    6a62:	015b      	lsls	r3, r3, #5
    6a64:	4413      	add	r3, r2
    6a66:	3306      	adds	r3, #6
    6a68:	781b      	ldrb	r3, [r3, #0]
    6a6a:	b2db      	uxtb	r3, r3
}
    6a6c:	4618      	mov	r0, r3
    6a6e:	370c      	adds	r7, #12
    6a70:	46bd      	mov	sp, r7
    6a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a76:	4770      	bx	lr

00006a78 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    6a78:	b480      	push	{r7}
    6a7a:	b083      	sub	sp, #12
    6a7c:	af00      	add	r7, sp, #0
    6a7e:	6078      	str	r0, [r7, #4]
    6a80:	460b      	mov	r3, r1
    6a82:	70fb      	strb	r3, [r7, #3]
    6a84:	4613      	mov	r3, r2
    6a86:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    6a88:	78fb      	ldrb	r3, [r7, #3]
    6a8a:	687a      	ldr	r2, [r7, #4]
    6a8c:	3308      	adds	r3, #8
    6a8e:	015b      	lsls	r3, r3, #5
    6a90:	4413      	add	r3, r2
    6a92:	3304      	adds	r3, #4
    6a94:	78ba      	ldrb	r2, [r7, #2]
    6a96:	701a      	strb	r2, [r3, #0]
}
    6a98:	bf00      	nop
    6a9a:	370c      	adds	r7, #12
    6a9c:	46bd      	mov	sp, r7
    6a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aa2:	4770      	bx	lr

00006aa4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    6aa4:	b480      	push	{r7}
    6aa6:	b083      	sub	sp, #12
    6aa8:	af00      	add	r7, sp, #0
    6aaa:	6078      	str	r0, [r7, #4]
    6aac:	460b      	mov	r3, r1
    6aae:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    6ab0:	78fb      	ldrb	r3, [r7, #3]
    6ab2:	687a      	ldr	r2, [r7, #4]
    6ab4:	015b      	lsls	r3, r3, #5
    6ab6:	4413      	add	r3, r2
    6ab8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    6abc:	2210      	movs	r2, #16
    6abe:	701a      	strb	r2, [r3, #0]
}
    6ac0:	bf00      	nop
    6ac2:	370c      	adds	r7, #12
    6ac4:	46bd      	mov	sp, r7
    6ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aca:	4770      	bx	lr

00006acc <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    6acc:	b480      	push	{r7}
    6ace:	b083      	sub	sp, #12
    6ad0:	af00      	add	r7, sp, #0
    6ad2:	6078      	str	r0, [r7, #4]
    6ad4:	460b      	mov	r3, r1
    6ad6:	70fb      	strb	r3, [r7, #3]
    6ad8:	4613      	mov	r3, r2
    6ada:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    6adc:	78fb      	ldrb	r3, [r7, #3]
    6ade:	687a      	ldr	r2, [r7, #4]
    6ae0:	015b      	lsls	r3, r3, #5
    6ae2:	4413      	add	r3, r2
    6ae4:	f203 1309 	addw	r3, r3, #265	; 0x109
    6ae8:	78ba      	ldrb	r2, [r7, #2]
    6aea:	701a      	strb	r2, [r3, #0]
}
    6aec:	bf00      	nop
    6aee:	370c      	adds	r7, #12
    6af0:	46bd      	mov	sp, r7
    6af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6af6:	4770      	bx	lr

00006af8 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    6af8:	b480      	push	{r7}
    6afa:	b083      	sub	sp, #12
    6afc:	af00      	add	r7, sp, #0
    6afe:	6078      	str	r0, [r7, #4]
    6b00:	460b      	mov	r3, r1
    6b02:	70fb      	strb	r3, [r7, #3]
    6b04:	4613      	mov	r3, r2
    6b06:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    6b08:	78fb      	ldrb	r3, [r7, #3]
    6b0a:	687a      	ldr	r2, [r7, #4]
    6b0c:	015b      	lsls	r3, r3, #5
    6b0e:	4413      	add	r3, r2
    6b10:	f503 7384 	add.w	r3, r3, #264	; 0x108
    6b14:	78ba      	ldrb	r2, [r7, #2]
    6b16:	701a      	strb	r2, [r3, #0]
}
    6b18:	bf00      	nop
    6b1a:	370c      	adds	r7, #12
    6b1c:	46bd      	mov	sp, r7
    6b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b22:	4770      	bx	lr

00006b24 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    6b24:	b480      	push	{r7}
    6b26:	b085      	sub	sp, #20
    6b28:	af00      	add	r7, sp, #0
    6b2a:	6078      	str	r0, [r7, #4]
    6b2c:	460b      	mov	r3, r1
    6b2e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    6b30:	78fb      	ldrb	r3, [r7, #3]
    6b32:	687a      	ldr	r2, [r7, #4]
    6b34:	3308      	adds	r3, #8
    6b36:	015b      	lsls	r3, r3, #5
    6b38:	4413      	add	r3, r2
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    6b3e:	7bfb      	ldrb	r3, [r7, #15]
    6b40:	f003 0307 	and.w	r3, r3, #7
    6b44:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6b46:	7bfb      	ldrb	r3, [r7, #15]
}
    6b48:	4618      	mov	r0, r3
    6b4a:	3714      	adds	r7, #20
    6b4c:	46bd      	mov	sp, r7
    6b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b52:	4770      	bx	lr

00006b54 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    6b54:	b480      	push	{r7}
    6b56:	b085      	sub	sp, #20
    6b58:	af00      	add	r7, sp, #0
    6b5a:	6078      	str	r0, [r7, #4]
    6b5c:	460b      	mov	r3, r1
    6b5e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    6b60:	78fb      	ldrb	r3, [r7, #3]
    6b62:	687a      	ldr	r2, [r7, #4]
    6b64:	3308      	adds	r3, #8
    6b66:	015b      	lsls	r3, r3, #5
    6b68:	4413      	add	r3, r2
    6b6a:	781b      	ldrb	r3, [r3, #0]
    6b6c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    6b6e:	7bfb      	ldrb	r3, [r7, #15]
    6b70:	091b      	lsrs	r3, r3, #4
    6b72:	b2db      	uxtb	r3, r3
    6b74:	f003 0307 	and.w	r3, r3, #7
    6b78:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6b7a:	7bfb      	ldrb	r3, [r7, #15]
}
    6b7c:	4618      	mov	r0, r3
    6b7e:	3714      	adds	r7, #20
    6b80:	46bd      	mov	sp, r7
    6b82:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b86:	4770      	bx	lr

00006b88 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    6b88:	b480      	push	{r7}
    6b8a:	b083      	sub	sp, #12
    6b8c:	af00      	add	r7, sp, #0
    6b8e:	6078      	str	r0, [r7, #4]
    6b90:	460b      	mov	r3, r1
    6b92:	70fb      	strb	r3, [r7, #3]
    6b94:	4613      	mov	r3, r2
    6b96:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    6b98:	78fb      	ldrb	r3, [r7, #3]
    6b9a:	687a      	ldr	r2, [r7, #4]
    6b9c:	3308      	adds	r3, #8
    6b9e:	015b      	lsls	r3, r3, #5
    6ba0:	4413      	add	r3, r2
    6ba2:	78ba      	ldrb	r2, [r7, #2]
    6ba4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    6ba6:	bf00      	nop
    6ba8:	370c      	adds	r7, #12
    6baa:	46bd      	mov	sp, r7
    6bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bb0:	4770      	bx	lr

00006bb2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    6bb2:	b480      	push	{r7}
    6bb4:	b083      	sub	sp, #12
    6bb6:	af00      	add	r7, sp, #0
    6bb8:	6078      	str	r0, [r7, #4]
    6bba:	460b      	mov	r3, r1
    6bbc:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    6bbe:	78fb      	ldrb	r3, [r7, #3]
    6bc0:	687a      	ldr	r2, [r7, #4]
    6bc2:	3308      	adds	r3, #8
    6bc4:	015b      	lsls	r3, r3, #5
    6bc6:	4413      	add	r3, r2
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	b2db      	uxtb	r3, r3
}
    6bcc:	4618      	mov	r0, r3
    6bce:	370c      	adds	r7, #12
    6bd0:	46bd      	mov	sp, r7
    6bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bd6:	4770      	bx	lr

00006bd8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    6bd8:	b480      	push	{r7}
    6bda:	b083      	sub	sp, #12
    6bdc:	af00      	add	r7, sp, #0
    6bde:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	8b9b      	ldrh	r3, [r3, #28]
    6be4:	b29b      	uxth	r3, r3
}
    6be6:	4618      	mov	r0, r3
    6be8:	370c      	adds	r7, #12
    6bea:	46bd      	mov	sp, r7
    6bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bf0:	4770      	bx	lr

00006bf2 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    6bf2:	b480      	push	{r7}
    6bf4:	b083      	sub	sp, #12
    6bf6:	af00      	add	r7, sp, #0
    6bf8:	6078      	str	r0, [r7, #4]
    6bfa:	460b      	mov	r3, r1
    6bfc:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	887a      	ldrh	r2, [r7, #2]
    6c02:	839a      	strh	r2, [r3, #28]
}
    6c04:	bf00      	nop
    6c06:	370c      	adds	r7, #12
    6c08:	46bd      	mov	sp, r7
    6c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c0e:	4770      	bx	lr

00006c10 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    6c10:	b480      	push	{r7}
    6c12:	b083      	sub	sp, #12
    6c14:	af00      	add	r7, sp, #0
    6c16:	6078      	str	r0, [r7, #4]
    6c18:	460b      	mov	r3, r1
    6c1a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	887a      	ldrh	r2, [r7, #2]
    6c20:	831a      	strh	r2, [r3, #24]
}
    6c22:	bf00      	nop
    6c24:	370c      	adds	r7, #12
    6c26:	46bd      	mov	sp, r7
    6c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c2c:	4770      	bx	lr

00006c2e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    6c2e:	b480      	push	{r7}
    6c30:	b083      	sub	sp, #12
    6c32:	af00      	add	r7, sp, #0
    6c34:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    6c36:	687b      	ldr	r3, [r7, #4]
    6c38:	8b1b      	ldrh	r3, [r3, #24]
    6c3a:	b29b      	uxth	r3, r3
}
    6c3c:	4618      	mov	r0, r3
    6c3e:	370c      	adds	r7, #12
    6c40:	46bd      	mov	sp, r7
    6c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c46:	4770      	bx	lr

00006c48 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    6c48:	b480      	push	{r7}
    6c4a:	b083      	sub	sp, #12
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	6078      	str	r0, [r7, #4]
    6c50:	460b      	mov	r3, r1
    6c52:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    6c54:	687b      	ldr	r3, [r7, #4]
    6c56:	887a      	ldrh	r2, [r7, #2]
    6c58:	829a      	strh	r2, [r3, #20]
}
    6c5a:	bf00      	nop
    6c5c:	370c      	adds	r7, #12
    6c5e:	46bd      	mov	sp, r7
    6c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c64:	4770      	bx	lr
	...

00006c68 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b082      	sub	sp, #8
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	b2db      	uxtb	r3, r3
    6c76:	f023 0302 	bic.w	r3, r3, #2
    6c7a:	b2da      	uxtb	r2, r3
    6c7c:	687b      	ldr	r3, [r7, #4]
    6c7e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    6c80:	2103      	movs	r1, #3
    6c82:	6878      	ldr	r0, [r7, #4]
    6c84:	4b02      	ldr	r3, [pc, #8]	; (6c90 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    6c86:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    6c88:	bf00      	nop
    6c8a:	3708      	adds	r7, #8
    6c8c:	46bd      	mov	sp, r7
    6c8e:	bd80      	pop	{r7, pc}
    6c90:	00006943 	.word	0x00006943

00006c94 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    6c94:	b580      	push	{r7, lr}
    6c96:	b084      	sub	sp, #16
    6c98:	af00      	add	r7, sp, #0
    6c9a:	6078      	str	r0, [r7, #4]
    6c9c:	460b      	mov	r3, r1
    6c9e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    6ca0:	2103      	movs	r1, #3
    6ca2:	6878      	ldr	r0, [r7, #4]
    6ca4:	4b06      	ldr	r3, [pc, #24]	; (6cc0 <hri_usb_get_CTRLA_reg+0x2c>)
    6ca6:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	781b      	ldrb	r3, [r3, #0]
    6cac:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6cae:	7bfa      	ldrb	r2, [r7, #15]
    6cb0:	78fb      	ldrb	r3, [r7, #3]
    6cb2:	4013      	ands	r3, r2
    6cb4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6cb6:	7bfb      	ldrb	r3, [r7, #15]
}
    6cb8:	4618      	mov	r0, r3
    6cba:	3710      	adds	r7, #16
    6cbc:	46bd      	mov	sp, r7
    6cbe:	bd80      	pop	{r7, pc}
    6cc0:	00006943 	.word	0x00006943

00006cc4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    6cc4:	b580      	push	{r7, lr}
    6cc6:	b082      	sub	sp, #8
    6cc8:	af00      	add	r7, sp, #0
    6cca:	6078      	str	r0, [r7, #4]
    6ccc:	460b      	mov	r3, r1
    6cce:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	78fa      	ldrb	r2, [r7, #3]
    6cd4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    6cd6:	2103      	movs	r1, #3
    6cd8:	6878      	ldr	r0, [r7, #4]
    6cda:	4b03      	ldr	r3, [pc, #12]	; (6ce8 <hri_usb_write_CTRLA_reg+0x24>)
    6cdc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    6cde:	bf00      	nop
    6ce0:	3708      	adds	r7, #8
    6ce2:	46bd      	mov	sp, r7
    6ce4:	bd80      	pop	{r7, pc}
    6ce6:	bf00      	nop
    6ce8:	00006943 	.word	0x00006943

00006cec <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    6cec:	b480      	push	{r7}
    6cee:	b083      	sub	sp, #12
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	6078      	str	r0, [r7, #4]
    6cf4:	460b      	mov	r3, r1
    6cf6:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	887a      	ldrh	r2, [r7, #2]
    6cfc:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    6cfe:	bf00      	nop
    6d00:	370c      	adds	r7, #12
    6d02:	46bd      	mov	sp, r7
    6d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d08:	4770      	bx	lr

00006d0a <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    6d0a:	b480      	push	{r7}
    6d0c:	b083      	sub	sp, #12
    6d0e:	af00      	add	r7, sp, #0
    6d10:	6078      	str	r0, [r7, #4]
    6d12:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	683a      	ldr	r2, [r7, #0]
    6d18:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    6d1a:	bf00      	nop
    6d1c:	370c      	adds	r7, #12
    6d1e:	46bd      	mov	sp, r7
    6d20:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d24:	4770      	bx	lr

00006d26 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    6d26:	b480      	push	{r7}
    6d28:	b083      	sub	sp, #12
    6d2a:	af00      	add	r7, sp, #0
    6d2c:	6078      	str	r0, [r7, #4]
    6d2e:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    6d30:	2300      	movs	r3, #0
}
    6d32:	4618      	mov	r0, r3
    6d34:	370c      	adds	r7, #12
    6d36:	46bd      	mov	sp, r7
    6d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d3c:	4770      	bx	lr
	...

00006d40 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    6d40:	b480      	push	{r7}
    6d42:	b085      	sub	sp, #20
    6d44:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    6d46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6d4a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    6d4c:	4b28      	ldr	r3, [pc, #160]	; (6df0 <_usb_load_calib+0xb0>)
    6d4e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    6d50:	f003 031f 	and.w	r3, r3, #31
    6d54:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    6d56:	4b26      	ldr	r3, [pc, #152]	; (6df0 <_usb_load_calib+0xb0>)
    6d58:	681b      	ldr	r3, [r3, #0]
    6d5a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    6d5c:	f003 031f 	and.w	r3, r3, #31
    6d60:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    6d62:	4b23      	ldr	r3, [pc, #140]	; (6df0 <_usb_load_calib+0xb0>)
    6d64:	681b      	ldr	r3, [r3, #0]
    6d66:	0a9b      	lsrs	r3, r3, #10
    6d68:	f003 0307 	and.w	r3, r3, #7
    6d6c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    6d6e:	68fb      	ldr	r3, [r7, #12]
    6d70:	2b00      	cmp	r3, #0
    6d72:	d002      	beq.n	6d7a <_usb_load_calib+0x3a>
    6d74:	68fb      	ldr	r3, [r7, #12]
    6d76:	2b1f      	cmp	r3, #31
    6d78:	d101      	bne.n	6d7e <_usb_load_calib+0x3e>
		pad_transn = 9;
    6d7a:	2309      	movs	r3, #9
    6d7c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    6d7e:	68bb      	ldr	r3, [r7, #8]
    6d80:	2b00      	cmp	r3, #0
    6d82:	d002      	beq.n	6d8a <_usb_load_calib+0x4a>
    6d84:	68bb      	ldr	r3, [r7, #8]
    6d86:	2b1f      	cmp	r3, #31
    6d88:	d101      	bne.n	6d8e <_usb_load_calib+0x4e>
		pad_transp = 25;
    6d8a:	2319      	movs	r3, #25
    6d8c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	2b00      	cmp	r3, #0
    6d92:	d002      	beq.n	6d9a <_usb_load_calib+0x5a>
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	2b07      	cmp	r3, #7
    6d98:	d101      	bne.n	6d9e <_usb_load_calib+0x5e>
		pad_trim = 6;
    6d9a:	2306      	movs	r3, #6
    6d9c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    6d9e:	68fb      	ldr	r3, [r7, #12]
    6da0:	b29b      	uxth	r3, r3
    6da2:	019b      	lsls	r3, r3, #6
    6da4:	b29b      	uxth	r3, r3
    6da6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    6daa:	b29a      	uxth	r2, r3
    6dac:	68bb      	ldr	r3, [r7, #8]
    6dae:	b29b      	uxth	r3, r3
    6db0:	f003 031f 	and.w	r3, r3, #31
    6db4:	b29b      	uxth	r3, r3
    6db6:	4313      	orrs	r3, r2
    6db8:	b29a      	uxth	r2, r3
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	b29b      	uxth	r3, r3
    6dbe:	031b      	lsls	r3, r3, #12
    6dc0:	b29b      	uxth	r3, r3
    6dc2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    6dc6:	b29b      	uxth	r3, r3
    6dc8:	4313      	orrs	r3, r2
    6dca:	b29a      	uxth	r2, r3
    6dcc:	683b      	ldr	r3, [r7, #0]
    6dce:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    6dd0:	683a      	ldr	r2, [r7, #0]
    6dd2:	78d3      	ldrb	r3, [r2, #3]
    6dd4:	f043 0303 	orr.w	r3, r3, #3
    6dd8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    6dda:	683a      	ldr	r2, [r7, #0]
    6ddc:	78d3      	ldrb	r3, [r2, #3]
    6dde:	f043 030c 	orr.w	r3, r3, #12
    6de2:	70d3      	strb	r3, [r2, #3]
}
    6de4:	bf00      	nop
    6de6:	3714      	adds	r7, #20
    6de8:	46bd      	mov	sp, r7
    6dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dee:	4770      	bx	lr
    6df0:	00800084 	.word	0x00800084

00006df4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    6df4:	b580      	push	{r7, lr}
    6df6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    6df8:	bf00      	nop
    6dfa:	2203      	movs	r2, #3
    6dfc:	2100      	movs	r1, #0
    6dfe:	4804      	ldr	r0, [pc, #16]	; (6e10 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    6e00:	4b04      	ldr	r3, [pc, #16]	; (6e14 <_usb_d_dev_wait_dpll_rdy+0x20>)
    6e02:	4798      	blx	r3
    6e04:	4603      	mov	r3, r0
    6e06:	2b03      	cmp	r3, #3
    6e08:	d1f7      	bne.n	6dfa <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    6e0a:	bf00      	nop
    6e0c:	bd80      	pop	{r7, pc}
    6e0e:	bf00      	nop
    6e10:	40001000 	.word	0x40001000
    6e14:	000068b5 	.word	0x000068b5

00006e18 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    6e18:	b580      	push	{r7, lr}
    6e1a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    6e1c:	480e      	ldr	r0, [pc, #56]	; (6e58 <_usb_d_dev_wait_dfll_rdy+0x40>)
    6e1e:	4b0f      	ldr	r3, [pc, #60]	; (6e5c <_usb_d_dev_wait_dfll_rdy+0x44>)
    6e20:	4798      	blx	r3
    6e22:	4603      	mov	r3, r0
    6e24:	2b00      	cmp	r3, #0
    6e26:	d00a      	beq.n	6e3e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    6e28:	bf00      	nop
    6e2a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    6e2e:	480a      	ldr	r0, [pc, #40]	; (6e58 <_usb_d_dev_wait_dfll_rdy+0x40>)
    6e30:	4b0b      	ldr	r3, [pc, #44]	; (6e60 <_usb_d_dev_wait_dfll_rdy+0x48>)
    6e32:	4798      	blx	r3
    6e34:	4603      	mov	r3, r0
    6e36:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6e3a:	d1f6      	bne.n	6e2a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    6e3c:	e009      	b.n	6e52 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    6e3e:	bf00      	nop
    6e40:	f44f 7180 	mov.w	r1, #256	; 0x100
    6e44:	4804      	ldr	r0, [pc, #16]	; (6e58 <_usb_d_dev_wait_dfll_rdy+0x40>)
    6e46:	4b06      	ldr	r3, [pc, #24]	; (6e60 <_usb_d_dev_wait_dfll_rdy+0x48>)
    6e48:	4798      	blx	r3
    6e4a:	4603      	mov	r3, r0
    6e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6e50:	d1f6      	bne.n	6e40 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    6e52:	bf00      	nop
    6e54:	bd80      	pop	{r7, pc}
    6e56:	bf00      	nop
    6e58:	40001000 	.word	0x40001000
    6e5c:	00006913 	.word	0x00006913
    6e60:	000068ed 	.word	0x000068ed

00006e64 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    6e64:	b580      	push	{r7, lr}
    6e66:	b082      	sub	sp, #8
    6e68:	af00      	add	r7, sp, #0
    6e6a:	4603      	mov	r3, r0
    6e6c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    6e6e:	79fb      	ldrb	r3, [r7, #7]
    6e70:	2b00      	cmp	r3, #0
    6e72:	d102      	bne.n	6e7a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    6e74:	4b05      	ldr	r3, [pc, #20]	; (6e8c <_usb_d_dev_wait_clk_rdy+0x28>)
    6e76:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    6e78:	e004      	b.n	6e84 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    6e7a:	79fb      	ldrb	r3, [r7, #7]
    6e7c:	2b01      	cmp	r3, #1
    6e7e:	d101      	bne.n	6e84 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    6e80:	4b03      	ldr	r3, [pc, #12]	; (6e90 <_usb_d_dev_wait_clk_rdy+0x2c>)
    6e82:	4798      	blx	r3
}
    6e84:	bf00      	nop
    6e86:	3708      	adds	r7, #8
    6e88:	46bd      	mov	sp, r7
    6e8a:	bd80      	pop	{r7, pc}
    6e8c:	00006e19 	.word	0x00006e19
    6e90:	00006df5 	.word	0x00006df5

00006e94 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    6e94:	b580      	push	{r7, lr}
    6e96:	b082      	sub	sp, #8
    6e98:	af00      	add	r7, sp, #0
    6e9a:	4603      	mov	r3, r0
    6e9c:	6039      	str	r1, [r7, #0]
    6e9e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    6ea0:	683b      	ldr	r3, [r7, #0]
    6ea2:	b2da      	uxtb	r2, r3
    6ea4:	79fb      	ldrb	r3, [r7, #7]
    6ea6:	4619      	mov	r1, r3
    6ea8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    6eac:	4b02      	ldr	r3, [pc, #8]	; (6eb8 <_usbd_ep_int_ack+0x24>)
    6eae:	4798      	blx	r3
}
    6eb0:	bf00      	nop
    6eb2:	3708      	adds	r7, #8
    6eb4:	46bd      	mov	sp, r7
    6eb6:	bd80      	pop	{r7, pc}
    6eb8:	000069f9 	.word	0x000069f9

00006ebc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    6ebc:	b580      	push	{r7, lr}
    6ebe:	b082      	sub	sp, #8
    6ec0:	af00      	add	r7, sp, #0
    6ec2:	4603      	mov	r3, r0
    6ec4:	6039      	str	r1, [r7, #0]
    6ec6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    6ec8:	683b      	ldr	r3, [r7, #0]
    6eca:	b2da      	uxtb	r2, r3
    6ecc:	79fb      	ldrb	r3, [r7, #7]
    6ece:	4619      	mov	r1, r3
    6ed0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    6ed4:	4b02      	ldr	r3, [pc, #8]	; (6ee0 <_usbd_ep_int_en+0x24>)
    6ed6:	4798      	blx	r3
}
    6ed8:	bf00      	nop
    6eda:	3708      	adds	r7, #8
    6edc:	46bd      	mov	sp, r7
    6ede:	bd80      	pop	{r7, pc}
    6ee0:	00006acd 	.word	0x00006acd

00006ee4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b082      	sub	sp, #8
    6ee8:	af00      	add	r7, sp, #0
    6eea:	4603      	mov	r3, r0
    6eec:	6039      	str	r1, [r7, #0]
    6eee:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    6ef0:	683b      	ldr	r3, [r7, #0]
    6ef2:	b2da      	uxtb	r2, r3
    6ef4:	79fb      	ldrb	r3, [r7, #7]
    6ef6:	4619      	mov	r1, r3
    6ef8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    6efc:	4b02      	ldr	r3, [pc, #8]	; (6f08 <_usbd_ep_int_dis+0x24>)
    6efe:	4798      	blx	r3
}
    6f00:	bf00      	nop
    6f02:	3708      	adds	r7, #8
    6f04:	46bd      	mov	sp, r7
    6f06:	bd80      	pop	{r7, pc}
    6f08:	00006af9 	.word	0x00006af9

00006f0c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    6f0c:	b580      	push	{r7, lr}
    6f0e:	b082      	sub	sp, #8
    6f10:	af00      	add	r7, sp, #0
    6f12:	4603      	mov	r3, r0
    6f14:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    6f16:	79fb      	ldrb	r3, [r7, #7]
    6f18:	4619      	mov	r1, r3
    6f1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    6f1e:	4b06      	ldr	r3, [pc, #24]	; (6f38 <_usbd_ep_is_ctrl+0x2c>)
    6f20:	4798      	blx	r3
    6f22:	4603      	mov	r3, r0
    6f24:	2b11      	cmp	r3, #17
    6f26:	bf0c      	ite	eq
    6f28:	2301      	moveq	r3, #1
    6f2a:	2300      	movne	r3, #0
    6f2c:	b2db      	uxtb	r3, r3
}
    6f2e:	4618      	mov	r0, r3
    6f30:	3708      	adds	r7, #8
    6f32:	46bd      	mov	sp, r7
    6f34:	bd80      	pop	{r7, pc}
    6f36:	bf00      	nop
    6f38:	00006bb3 	.word	0x00006bb3

00006f3c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    6f3c:	b580      	push	{r7, lr}
    6f3e:	b082      	sub	sp, #8
    6f40:	af00      	add	r7, sp, #0
    6f42:	4603      	mov	r3, r0
    6f44:	71fb      	strb	r3, [r7, #7]
    6f46:	460b      	mov	r3, r1
    6f48:	71bb      	strb	r3, [r7, #6]
    6f4a:	4613      	mov	r3, r2
    6f4c:	717b      	strb	r3, [r7, #5]
	if (st) {
    6f4e:	797b      	ldrb	r3, [r7, #5]
    6f50:	2b00      	cmp	r3, #0
    6f52:	d00b      	beq.n	6f6c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    6f54:	79bb      	ldrb	r3, [r7, #6]
    6f56:	2210      	movs	r2, #16
    6f58:	fa02 f303 	lsl.w	r3, r2, r3
    6f5c:	b2da      	uxtb	r2, r3
    6f5e:	79fb      	ldrb	r3, [r7, #7]
    6f60:	4619      	mov	r1, r3
    6f62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    6f66:	4b09      	ldr	r3, [pc, #36]	; (6f8c <_usbd_ep_set_stall+0x50>)
    6f68:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    6f6a:	e00a      	b.n	6f82 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    6f6c:	79bb      	ldrb	r3, [r7, #6]
    6f6e:	2210      	movs	r2, #16
    6f70:	fa02 f303 	lsl.w	r3, r2, r3
    6f74:	b2da      	uxtb	r2, r3
    6f76:	79fb      	ldrb	r3, [r7, #7]
    6f78:	4619      	mov	r1, r3
    6f7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    6f7e:	4b04      	ldr	r3, [pc, #16]	; (6f90 <_usbd_ep_set_stall+0x54>)
    6f80:	4798      	blx	r3
}
    6f82:	bf00      	nop
    6f84:	3708      	adds	r7, #8
    6f86:	46bd      	mov	sp, r7
    6f88:	bd80      	pop	{r7, pc}
    6f8a:	bf00      	nop
    6f8c:	00006a25 	.word	0x00006a25
    6f90:	00006a79 	.word	0x00006a79

00006f94 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    6f94:	b580      	push	{r7, lr}
    6f96:	b084      	sub	sp, #16
    6f98:	af00      	add	r7, sp, #0
    6f9a:	4603      	mov	r3, r0
    6f9c:	460a      	mov	r2, r1
    6f9e:	71fb      	strb	r3, [r7, #7]
    6fa0:	4613      	mov	r3, r2
    6fa2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    6fa4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6fa8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    6faa:	79fb      	ldrb	r3, [r7, #7]
    6fac:	4619      	mov	r1, r3
    6fae:	68f8      	ldr	r0, [r7, #12]
    6fb0:	4b08      	ldr	r3, [pc, #32]	; (6fd4 <_usbd_ep_is_stalled+0x40>)
    6fb2:	4798      	blx	r3
    6fb4:	4603      	mov	r3, r0
    6fb6:	4619      	mov	r1, r3
    6fb8:	79bb      	ldrb	r3, [r7, #6]
    6fba:	2210      	movs	r2, #16
    6fbc:	fa02 f303 	lsl.w	r3, r2, r3
    6fc0:	400b      	ands	r3, r1
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	bf14      	ite	ne
    6fc6:	2301      	movne	r3, #1
    6fc8:	2300      	moveq	r3, #0
    6fca:	b2db      	uxtb	r3, r3
}
    6fcc:	4618      	mov	r0, r3
    6fce:	3710      	adds	r7, #16
    6fd0:	46bd      	mov	sp, r7
    6fd2:	bd80      	pop	{r7, pc}
    6fd4:	00006a51 	.word	0x00006a51

00006fd8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b084      	sub	sp, #16
    6fdc:	af00      	add	r7, sp, #0
    6fde:	4603      	mov	r3, r0
    6fe0:	460a      	mov	r2, r1
    6fe2:	71fb      	strb	r3, [r7, #7]
    6fe4:	4613      	mov	r3, r2
    6fe6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    6fe8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6fec:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    6fee:	79fb      	ldrb	r3, [r7, #7]
    6ff0:	4619      	mov	r1, r3
    6ff2:	68f8      	ldr	r0, [r7, #12]
    6ff4:	4b08      	ldr	r3, [pc, #32]	; (7018 <_usbd_ep_is_stall_sent+0x40>)
    6ff6:	4798      	blx	r3
    6ff8:	4603      	mov	r3, r0
    6ffa:	4619      	mov	r1, r3
    6ffc:	79bb      	ldrb	r3, [r7, #6]
    6ffe:	2220      	movs	r2, #32
    7000:	fa02 f303 	lsl.w	r3, r2, r3
    7004:	400b      	ands	r3, r1
    7006:	2b00      	cmp	r3, #0
    7008:	bf14      	ite	ne
    700a:	2301      	movne	r3, #1
    700c:	2300      	moveq	r3, #0
    700e:	b2db      	uxtb	r3, r3
}
    7010:	4618      	mov	r0, r3
    7012:	3710      	adds	r7, #16
    7014:	46bd      	mov	sp, r7
    7016:	bd80      	pop	{r7, pc}
    7018:	000069d1 	.word	0x000069d1

0000701c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    701c:	b580      	push	{r7, lr}
    701e:	b082      	sub	sp, #8
    7020:	af00      	add	r7, sp, #0
    7022:	4603      	mov	r3, r0
    7024:	460a      	mov	r2, r1
    7026:	71fb      	strb	r3, [r7, #7]
    7028:	4613      	mov	r3, r2
    702a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    702c:	79bb      	ldrb	r3, [r7, #6]
    702e:	2220      	movs	r2, #32
    7030:	409a      	lsls	r2, r3
    7032:	79fb      	ldrb	r3, [r7, #7]
    7034:	4611      	mov	r1, r2
    7036:	4618      	mov	r0, r3
    7038:	4b02      	ldr	r3, [pc, #8]	; (7044 <_usbd_ep_ack_stall+0x28>)
    703a:	4798      	blx	r3
}
    703c:	bf00      	nop
    703e:	3708      	adds	r7, #8
    7040:	46bd      	mov	sp, r7
    7042:	bd80      	pop	{r7, pc}
    7044:	00006e95 	.word	0x00006e95

00007048 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    7048:	b580      	push	{r7, lr}
    704a:	b082      	sub	sp, #8
    704c:	af00      	add	r7, sp, #0
    704e:	4603      	mov	r3, r0
    7050:	71fb      	strb	r3, [r7, #7]
    7052:	460b      	mov	r3, r1
    7054:	71bb      	strb	r3, [r7, #6]
    7056:	4613      	mov	r3, r2
    7058:	717b      	strb	r3, [r7, #5]
	if (en) {
    705a:	797b      	ldrb	r3, [r7, #5]
    705c:	2b00      	cmp	r3, #0
    705e:	d008      	beq.n	7072 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    7060:	79bb      	ldrb	r3, [r7, #6]
    7062:	2220      	movs	r2, #32
    7064:	409a      	lsls	r2, r3
    7066:	79fb      	ldrb	r3, [r7, #7]
    7068:	4611      	mov	r1, r2
    706a:	4618      	mov	r0, r3
    706c:	4b07      	ldr	r3, [pc, #28]	; (708c <_usbd_ep_int_stall_en+0x44>)
    706e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    7070:	e007      	b.n	7082 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    7072:	79bb      	ldrb	r3, [r7, #6]
    7074:	2220      	movs	r2, #32
    7076:	409a      	lsls	r2, r3
    7078:	79fb      	ldrb	r3, [r7, #7]
    707a:	4611      	mov	r1, r2
    707c:	4618      	mov	r0, r3
    707e:	4b04      	ldr	r3, [pc, #16]	; (7090 <_usbd_ep_int_stall_en+0x48>)
    7080:	4798      	blx	r3
}
    7082:	bf00      	nop
    7084:	3708      	adds	r7, #8
    7086:	46bd      	mov	sp, r7
    7088:	bd80      	pop	{r7, pc}
    708a:	bf00      	nop
    708c:	00006ebd 	.word	0x00006ebd
    7090:	00006ee5 	.word	0x00006ee5

00007094 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    7094:	b580      	push	{r7, lr}
    7096:	b082      	sub	sp, #8
    7098:	af00      	add	r7, sp, #0
    709a:	4603      	mov	r3, r0
    709c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    709e:	79fb      	ldrb	r3, [r7, #7]
    70a0:	4619      	mov	r1, r3
    70a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    70a6:	4b03      	ldr	r3, [pc, #12]	; (70b4 <_usbd_ep_stop_setup+0x20>)
    70a8:	4798      	blx	r3
}
    70aa:	bf00      	nop
    70ac:	3708      	adds	r7, #8
    70ae:	46bd      	mov	sp, r7
    70b0:	bd80      	pop	{r7, pc}
    70b2:	bf00      	nop
    70b4:	00006aa5 	.word	0x00006aa5

000070b8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    70b8:	b580      	push	{r7, lr}
    70ba:	b082      	sub	sp, #8
    70bc:	af00      	add	r7, sp, #0
    70be:	4603      	mov	r3, r0
    70c0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    70c2:	79fb      	ldrb	r3, [r7, #7]
    70c4:	2210      	movs	r2, #16
    70c6:	4619      	mov	r1, r3
    70c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    70cc:	4b05      	ldr	r3, [pc, #20]	; (70e4 <_usbd_ep_is_setup+0x2c>)
    70ce:	4798      	blx	r3
    70d0:	4603      	mov	r3, r0
    70d2:	2b00      	cmp	r3, #0
    70d4:	bf14      	ite	ne
    70d6:	2301      	movne	r3, #1
    70d8:	2300      	moveq	r3, #0
    70da:	b2db      	uxtb	r3, r3
}
    70dc:	4618      	mov	r0, r3
    70de:	3708      	adds	r7, #8
    70e0:	46bd      	mov	sp, r7
    70e2:	bd80      	pop	{r7, pc}
    70e4:	0000699b 	.word	0x0000699b

000070e8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b082      	sub	sp, #8
    70ec:	af00      	add	r7, sp, #0
    70ee:	4603      	mov	r3, r0
    70f0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    70f2:	79fb      	ldrb	r3, [r7, #7]
    70f4:	2110      	movs	r1, #16
    70f6:	4618      	mov	r0, r3
    70f8:	4b02      	ldr	r3, [pc, #8]	; (7104 <_usbd_ep_ack_setup+0x1c>)
    70fa:	4798      	blx	r3
}
    70fc:	bf00      	nop
    70fe:	3708      	adds	r7, #8
    7100:	46bd      	mov	sp, r7
    7102:	bd80      	pop	{r7, pc}
    7104:	00006e95 	.word	0x00006e95

00007108 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    7108:	b580      	push	{r7, lr}
    710a:	b082      	sub	sp, #8
    710c:	af00      	add	r7, sp, #0
    710e:	4603      	mov	r3, r0
    7110:	71fb      	strb	r3, [r7, #7]
    7112:	460b      	mov	r3, r1
    7114:	71bb      	strb	r3, [r7, #6]
    7116:	4613      	mov	r3, r2
    7118:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    711a:	797b      	ldrb	r3, [r7, #5]
    711c:	2b00      	cmp	r3, #0
    711e:	d00b      	beq.n	7138 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    7120:	79bb      	ldrb	r3, [r7, #6]
    7122:	2201      	movs	r2, #1
    7124:	fa02 f303 	lsl.w	r3, r2, r3
    7128:	b2da      	uxtb	r2, r3
    712a:	79fb      	ldrb	r3, [r7, #7]
    712c:	4619      	mov	r1, r3
    712e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7132:	4b09      	ldr	r3, [pc, #36]	; (7158 <_usbd_ep_set_toggle+0x50>)
    7134:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    7136:	e00a      	b.n	714e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    7138:	79bb      	ldrb	r3, [r7, #6]
    713a:	2201      	movs	r2, #1
    713c:	fa02 f303 	lsl.w	r3, r2, r3
    7140:	b2da      	uxtb	r2, r3
    7142:	79fb      	ldrb	r3, [r7, #7]
    7144:	4619      	mov	r1, r3
    7146:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    714a:	4b04      	ldr	r3, [pc, #16]	; (715c <_usbd_ep_set_toggle+0x54>)
    714c:	4798      	blx	r3
}
    714e:	bf00      	nop
    7150:	3708      	adds	r7, #8
    7152:	46bd      	mov	sp, r7
    7154:	bd80      	pop	{r7, pc}
    7156:	bf00      	nop
    7158:	00006a25 	.word	0x00006a25
    715c:	00006a79 	.word	0x00006a79

00007160 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    7160:	b580      	push	{r7, lr}
    7162:	b082      	sub	sp, #8
    7164:	af00      	add	r7, sp, #0
    7166:	4603      	mov	r3, r0
    7168:	460a      	mov	r2, r1
    716a:	71fb      	strb	r3, [r7, #7]
    716c:	4613      	mov	r3, r2
    716e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    7170:	79bb      	ldrb	r3, [r7, #6]
    7172:	2201      	movs	r2, #1
    7174:	409a      	lsls	r2, r3
    7176:	79fb      	ldrb	r3, [r7, #7]
    7178:	4611      	mov	r1, r2
    717a:	4618      	mov	r0, r3
    717c:	4b02      	ldr	r3, [pc, #8]	; (7188 <_usbd_ep_ack_io_cpt+0x28>)
    717e:	4798      	blx	r3
}
    7180:	bf00      	nop
    7182:	3708      	adds	r7, #8
    7184:	46bd      	mov	sp, r7
    7186:	bd80      	pop	{r7, pc}
    7188:	00006e95 	.word	0x00006e95

0000718c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    718c:	b480      	push	{r7}
    718e:	b085      	sub	sp, #20
    7190:	af00      	add	r7, sp, #0
    7192:	4603      	mov	r3, r0
    7194:	603a      	str	r2, [r7, #0]
    7196:	71fb      	strb	r3, [r7, #7]
    7198:	460b      	mov	r3, r1
    719a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    719c:	79fa      	ldrb	r2, [r7, #7]
    719e:	79bb      	ldrb	r3, [r7, #6]
    71a0:	0052      	lsls	r2, r2, #1
    71a2:	4413      	add	r3, r2
    71a4:	011b      	lsls	r3, r3, #4
    71a6:	4a06      	ldr	r2, [pc, #24]	; (71c0 <_usbd_ep_set_buf+0x34>)
    71a8:	4413      	add	r3, r2
    71aa:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    71ac:	68fb      	ldr	r3, [r7, #12]
    71ae:	683a      	ldr	r2, [r7, #0]
    71b0:	601a      	str	r2, [r3, #0]
}
    71b2:	bf00      	nop
    71b4:	3714      	adds	r7, #20
    71b6:	46bd      	mov	sp, r7
    71b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    71bc:	4770      	bx	lr
    71be:	bf00      	nop
    71c0:	200005cc 	.word	0x200005cc

000071c4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    71c4:	b480      	push	{r7}
    71c6:	b085      	sub	sp, #20
    71c8:	af00      	add	r7, sp, #0
    71ca:	4603      	mov	r3, r0
    71cc:	71fb      	strb	r3, [r7, #7]
    71ce:	460b      	mov	r3, r1
    71d0:	71bb      	strb	r3, [r7, #6]
    71d2:	4613      	mov	r3, r2
    71d4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    71d6:	79fa      	ldrb	r2, [r7, #7]
    71d8:	79bb      	ldrb	r3, [r7, #6]
    71da:	0052      	lsls	r2, r2, #1
    71dc:	4413      	add	r3, r2
    71de:	011b      	lsls	r3, r3, #4
    71e0:	4a08      	ldr	r2, [pc, #32]	; (7204 <_usbd_ep_set_in_count+0x40>)
    71e2:	4413      	add	r3, r2
    71e4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    71e6:	88bb      	ldrh	r3, [r7, #4]
    71e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    71ec:	b299      	uxth	r1, r3
    71ee:	68fa      	ldr	r2, [r7, #12]
    71f0:	6853      	ldr	r3, [r2, #4]
    71f2:	f361 339b 	bfi	r3, r1, #14, #14
    71f6:	6053      	str	r3, [r2, #4]
}
    71f8:	bf00      	nop
    71fa:	3714      	adds	r7, #20
    71fc:	46bd      	mov	sp, r7
    71fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7202:	4770      	bx	lr
    7204:	200005cc 	.word	0x200005cc

00007208 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    7208:	b480      	push	{r7}
    720a:	b085      	sub	sp, #20
    720c:	af00      	add	r7, sp, #0
    720e:	4603      	mov	r3, r0
    7210:	71fb      	strb	r3, [r7, #7]
    7212:	460b      	mov	r3, r1
    7214:	71bb      	strb	r3, [r7, #6]
    7216:	4613      	mov	r3, r2
    7218:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    721a:	79fa      	ldrb	r2, [r7, #7]
    721c:	79bb      	ldrb	r3, [r7, #6]
    721e:	0052      	lsls	r2, r2, #1
    7220:	4413      	add	r3, r2
    7222:	011b      	lsls	r3, r3, #4
    7224:	4a08      	ldr	r2, [pc, #32]	; (7248 <_usbd_ep_set_in_size+0x40>)
    7226:	4413      	add	r3, r2
    7228:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    722a:	88bb      	ldrh	r3, [r7, #4]
    722c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    7230:	b299      	uxth	r1, r3
    7232:	68fa      	ldr	r2, [r7, #12]
    7234:	6853      	ldr	r3, [r2, #4]
    7236:	f361 030d 	bfi	r3, r1, #0, #14
    723a:	6053      	str	r3, [r2, #4]
}
    723c:	bf00      	nop
    723e:	3714      	adds	r7, #20
    7240:	46bd      	mov	sp, r7
    7242:	f85d 7b04 	ldr.w	r7, [sp], #4
    7246:	4770      	bx	lr
    7248:	200005cc 	.word	0x200005cc

0000724c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    724c:	b480      	push	{r7}
    724e:	b085      	sub	sp, #20
    7250:	af00      	add	r7, sp, #0
    7252:	4603      	mov	r3, r0
    7254:	71fb      	strb	r3, [r7, #7]
    7256:	460b      	mov	r3, r1
    7258:	71bb      	strb	r3, [r7, #6]
    725a:	4613      	mov	r3, r2
    725c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    725e:	79fa      	ldrb	r2, [r7, #7]
    7260:	79bb      	ldrb	r3, [r7, #6]
    7262:	0052      	lsls	r2, r2, #1
    7264:	4413      	add	r3, r2
    7266:	011b      	lsls	r3, r3, #4
    7268:	4a08      	ldr	r2, [pc, #32]	; (728c <_usbd_ep_set_out_count+0x40>)
    726a:	4413      	add	r3, r2
    726c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    726e:	88bb      	ldrh	r3, [r7, #4]
    7270:	f3c3 030d 	ubfx	r3, r3, #0, #14
    7274:	b299      	uxth	r1, r3
    7276:	68fa      	ldr	r2, [r7, #12]
    7278:	6853      	ldr	r3, [r2, #4]
    727a:	f361 030d 	bfi	r3, r1, #0, #14
    727e:	6053      	str	r3, [r2, #4]
}
    7280:	bf00      	nop
    7282:	3714      	adds	r7, #20
    7284:	46bd      	mov	sp, r7
    7286:	f85d 7b04 	ldr.w	r7, [sp], #4
    728a:	4770      	bx	lr
    728c:	200005cc 	.word	0x200005cc

00007290 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    7290:	b480      	push	{r7}
    7292:	b085      	sub	sp, #20
    7294:	af00      	add	r7, sp, #0
    7296:	4603      	mov	r3, r0
    7298:	71fb      	strb	r3, [r7, #7]
    729a:	460b      	mov	r3, r1
    729c:	71bb      	strb	r3, [r7, #6]
    729e:	4613      	mov	r3, r2
    72a0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    72a2:	79fa      	ldrb	r2, [r7, #7]
    72a4:	79bb      	ldrb	r3, [r7, #6]
    72a6:	0052      	lsls	r2, r2, #1
    72a8:	4413      	add	r3, r2
    72aa:	011b      	lsls	r3, r3, #4
    72ac:	4a08      	ldr	r2, [pc, #32]	; (72d0 <_usbd_ep_set_out_size+0x40>)
    72ae:	4413      	add	r3, r2
    72b0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    72b2:	88bb      	ldrh	r3, [r7, #4]
    72b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    72b8:	b299      	uxth	r1, r3
    72ba:	68fa      	ldr	r2, [r7, #12]
    72bc:	6853      	ldr	r3, [r2, #4]
    72be:	f361 339b 	bfi	r3, r1, #14, #14
    72c2:	6053      	str	r3, [r2, #4]
}
    72c4:	bf00      	nop
    72c6:	3714      	adds	r7, #20
    72c8:	46bd      	mov	sp, r7
    72ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ce:	4770      	bx	lr
    72d0:	200005cc 	.word	0x200005cc

000072d4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    72d4:	b580      	push	{r7, lr}
    72d6:	b084      	sub	sp, #16
    72d8:	af00      	add	r7, sp, #0
    72da:	60ba      	str	r2, [r7, #8]
    72dc:	607b      	str	r3, [r7, #4]
    72de:	4603      	mov	r3, r0
    72e0:	73fb      	strb	r3, [r7, #15]
    72e2:	460b      	mov	r3, r1
    72e4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    72e6:	68bb      	ldr	r3, [r7, #8]
    72e8:	b29a      	uxth	r2, r3
    72ea:	7bb9      	ldrb	r1, [r7, #14]
    72ec:	7bfb      	ldrb	r3, [r7, #15]
    72ee:	4618      	mov	r0, r3
    72f0:	4b06      	ldr	r3, [pc, #24]	; (730c <_usbd_ep_set_in_trans+0x38>)
    72f2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	b29a      	uxth	r2, r3
    72f8:	7bb9      	ldrb	r1, [r7, #14]
    72fa:	7bfb      	ldrb	r3, [r7, #15]
    72fc:	4618      	mov	r0, r3
    72fe:	4b04      	ldr	r3, [pc, #16]	; (7310 <_usbd_ep_set_in_trans+0x3c>)
    7300:	4798      	blx	r3
}
    7302:	bf00      	nop
    7304:	3710      	adds	r7, #16
    7306:	46bd      	mov	sp, r7
    7308:	bd80      	pop	{r7, pc}
    730a:	bf00      	nop
    730c:	00007209 	.word	0x00007209
    7310:	000071c5 	.word	0x000071c5

00007314 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    7314:	b580      	push	{r7, lr}
    7316:	b084      	sub	sp, #16
    7318:	af00      	add	r7, sp, #0
    731a:	60ba      	str	r2, [r7, #8]
    731c:	607b      	str	r3, [r7, #4]
    731e:	4603      	mov	r3, r0
    7320:	73fb      	strb	r3, [r7, #15]
    7322:	460b      	mov	r3, r1
    7324:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    7326:	68bb      	ldr	r3, [r7, #8]
    7328:	b29a      	uxth	r2, r3
    732a:	7bb9      	ldrb	r1, [r7, #14]
    732c:	7bfb      	ldrb	r3, [r7, #15]
    732e:	4618      	mov	r0, r3
    7330:	4b06      	ldr	r3, [pc, #24]	; (734c <_usbd_ep_set_out_trans+0x38>)
    7332:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	b29a      	uxth	r2, r3
    7338:	7bb9      	ldrb	r1, [r7, #14]
    733a:	7bfb      	ldrb	r3, [r7, #15]
    733c:	4618      	mov	r0, r3
    733e:	4b04      	ldr	r3, [pc, #16]	; (7350 <_usbd_ep_set_out_trans+0x3c>)
    7340:	4798      	blx	r3
}
    7342:	bf00      	nop
    7344:	3710      	adds	r7, #16
    7346:	46bd      	mov	sp, r7
    7348:	bd80      	pop	{r7, pc}
    734a:	bf00      	nop
    734c:	00007291 	.word	0x00007291
    7350:	0000724d 	.word	0x0000724d

00007354 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    7354:	b480      	push	{r7}
    7356:	b085      	sub	sp, #20
    7358:	af00      	add	r7, sp, #0
    735a:	4603      	mov	r3, r0
    735c:	460a      	mov	r2, r1
    735e:	71fb      	strb	r3, [r7, #7]
    7360:	4613      	mov	r3, r2
    7362:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    7364:	79fa      	ldrb	r2, [r7, #7]
    7366:	79bb      	ldrb	r3, [r7, #6]
    7368:	0052      	lsls	r2, r2, #1
    736a:	4413      	add	r3, r2
    736c:	011b      	lsls	r3, r3, #4
    736e:	4a06      	ldr	r2, [pc, #24]	; (7388 <_usbd_ep_clear_bank_status+0x34>)
    7370:	4413      	add	r3, r2
    7372:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    7374:	68fb      	ldr	r3, [r7, #12]
    7376:	2200      	movs	r2, #0
    7378:	729a      	strb	r2, [r3, #10]
}
    737a:	bf00      	nop
    737c:	3714      	adds	r7, #20
    737e:	46bd      	mov	sp, r7
    7380:	f85d 7b04 	ldr.w	r7, [sp], #4
    7384:	4770      	bx	lr
    7386:	bf00      	nop
    7388:	200005cc 	.word	0x200005cc

0000738c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    738c:	b580      	push	{r7, lr}
    738e:	b082      	sub	sp, #8
    7390:	af00      	add	r7, sp, #0
    7392:	4603      	mov	r3, r0
    7394:	71fb      	strb	r3, [r7, #7]
    7396:	460b      	mov	r3, r1
    7398:	71bb      	strb	r3, [r7, #6]
    739a:	4613      	mov	r3, r2
    739c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    739e:	797b      	ldrb	r3, [r7, #5]
    73a0:	2b00      	cmp	r3, #0
    73a2:	d00b      	beq.n	73bc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    73a4:	79bb      	ldrb	r3, [r7, #6]
    73a6:	2240      	movs	r2, #64	; 0x40
    73a8:	fa02 f303 	lsl.w	r3, r2, r3
    73ac:	b2da      	uxtb	r2, r3
    73ae:	79fb      	ldrb	r3, [r7, #7]
    73b0:	4619      	mov	r1, r3
    73b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    73b6:	4b09      	ldr	r3, [pc, #36]	; (73dc <_usbd_ep_set_in_rdy+0x50>)
    73b8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    73ba:	e00a      	b.n	73d2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    73bc:	79bb      	ldrb	r3, [r7, #6]
    73be:	2240      	movs	r2, #64	; 0x40
    73c0:	fa02 f303 	lsl.w	r3, r2, r3
    73c4:	b2da      	uxtb	r2, r3
    73c6:	79fb      	ldrb	r3, [r7, #7]
    73c8:	4619      	mov	r1, r3
    73ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    73ce:	4b04      	ldr	r3, [pc, #16]	; (73e0 <_usbd_ep_set_in_rdy+0x54>)
    73d0:	4798      	blx	r3
}
    73d2:	bf00      	nop
    73d4:	3708      	adds	r7, #8
    73d6:	46bd      	mov	sp, r7
    73d8:	bd80      	pop	{r7, pc}
    73da:	bf00      	nop
    73dc:	00006a25 	.word	0x00006a25
    73e0:	00006a79 	.word	0x00006a79

000073e4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    73e4:	b580      	push	{r7, lr}
    73e6:	b082      	sub	sp, #8
    73e8:	af00      	add	r7, sp, #0
    73ea:	4603      	mov	r3, r0
    73ec:	71fb      	strb	r3, [r7, #7]
    73ee:	460b      	mov	r3, r1
    73f0:	71bb      	strb	r3, [r7, #6]
    73f2:	4613      	mov	r3, r2
    73f4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    73f6:	797b      	ldrb	r3, [r7, #5]
    73f8:	2b00      	cmp	r3, #0
    73fa:	d00b      	beq.n	7414 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    73fc:	79bb      	ldrb	r3, [r7, #6]
    73fe:	2240      	movs	r2, #64	; 0x40
    7400:	fa02 f303 	lsl.w	r3, r2, r3
    7404:	b2da      	uxtb	r2, r3
    7406:	79fb      	ldrb	r3, [r7, #7]
    7408:	4619      	mov	r1, r3
    740a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    740e:	4b09      	ldr	r3, [pc, #36]	; (7434 <_usbd_ep_set_out_rdy+0x50>)
    7410:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    7412:	e00a      	b.n	742a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    7414:	79bb      	ldrb	r3, [r7, #6]
    7416:	2240      	movs	r2, #64	; 0x40
    7418:	fa02 f303 	lsl.w	r3, r2, r3
    741c:	b2da      	uxtb	r2, r3
    741e:	79fb      	ldrb	r3, [r7, #7]
    7420:	4619      	mov	r1, r3
    7422:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7426:	4b04      	ldr	r3, [pc, #16]	; (7438 <_usbd_ep_set_out_rdy+0x54>)
    7428:	4798      	blx	r3
}
    742a:	bf00      	nop
    742c:	3708      	adds	r7, #8
    742e:	46bd      	mov	sp, r7
    7430:	bd80      	pop	{r7, pc}
    7432:	bf00      	nop
    7434:	00006a79 	.word	0x00006a79
    7438:	00006a25 	.word	0x00006a25

0000743c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    743c:	b480      	push	{r7}
    743e:	b085      	sub	sp, #20
    7440:	af00      	add	r7, sp, #0
    7442:	4603      	mov	r3, r0
    7444:	460a      	mov	r2, r1
    7446:	71fb      	strb	r3, [r7, #7]
    7448:	4613      	mov	r3, r2
    744a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    744c:	79fb      	ldrb	r3, [r7, #7]
    744e:	2b00      	cmp	r3, #0
    7450:	d008      	beq.n	7464 <_usb_d_dev_ept+0x28>
    7452:	79bb      	ldrb	r3, [r7, #6]
    7454:	2b00      	cmp	r3, #0
    7456:	d003      	beq.n	7460 <_usb_d_dev_ept+0x24>
    7458:	79fb      	ldrb	r3, [r7, #7]
    745a:	3302      	adds	r3, #2
    745c:	b2db      	uxtb	r3, r3
    745e:	e002      	b.n	7466 <_usb_d_dev_ept+0x2a>
    7460:	79fb      	ldrb	r3, [r7, #7]
    7462:	e000      	b.n	7466 <_usb_d_dev_ept+0x2a>
    7464:	2300      	movs	r3, #0
    7466:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    7468:	7bfa      	ldrb	r2, [r7, #15]
    746a:	4613      	mov	r3, r2
    746c:	009b      	lsls	r3, r3, #2
    746e:	4413      	add	r3, r2
    7470:	009b      	lsls	r3, r3, #2
    7472:	3310      	adds	r3, #16
    7474:	4a04      	ldr	r2, [pc, #16]	; (7488 <_usb_d_dev_ept+0x4c>)
    7476:	4413      	add	r3, r2
    7478:	3304      	adds	r3, #4
}
    747a:	4618      	mov	r0, r3
    747c:	3714      	adds	r7, #20
    747e:	46bd      	mov	sp, r7
    7480:	f85d 7b04 	ldr.w	r7, [sp], #4
    7484:	4770      	bx	lr
    7486:	bf00      	nop
    7488:	20000504 	.word	0x20000504

0000748c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    748c:	b580      	push	{r7, lr}
    748e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    7490:	2104      	movs	r1, #4
    7492:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7496:	4b03      	ldr	r3, [pc, #12]	; (74a4 <_usb_d_dev_sof+0x18>)
    7498:	4798      	blx	r3
	dev_inst.callbacks.sof();
    749a:	4b03      	ldr	r3, [pc, #12]	; (74a8 <_usb_d_dev_sof+0x1c>)
    749c:	681b      	ldr	r3, [r3, #0]
    749e:	4798      	blx	r3
}
    74a0:	bf00      	nop
    74a2:	bd80      	pop	{r7, pc}
    74a4:	00006bf3 	.word	0x00006bf3
    74a8:	20000504 	.word	0x20000504

000074ac <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    74ac:	b580      	push	{r7, lr}
    74ae:	b084      	sub	sp, #16
    74b0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    74b2:	2300      	movs	r3, #0
    74b4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    74b6:	f240 2101 	movw	r1, #513	; 0x201
    74ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    74be:	4b1a      	ldr	r3, [pc, #104]	; (7528 <_usb_d_dev_lpmsusp+0x7c>)
    74c0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    74c2:	f240 2101 	movw	r1, #513	; 0x201
    74c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    74ca:	4b18      	ldr	r3, [pc, #96]	; (752c <_usb_d_dev_lpmsusp+0x80>)
    74cc:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    74ce:	2170      	movs	r1, #112	; 0x70
    74d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    74d4:	4b16      	ldr	r3, [pc, #88]	; (7530 <_usb_d_dev_lpmsusp+0x84>)
    74d6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    74d8:	2300      	movs	r3, #0
    74da:	73fb      	strb	r3, [r7, #15]
    74dc:	e018      	b.n	7510 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    74de:	7bfb      	ldrb	r3, [r7, #15]
    74e0:	015b      	lsls	r3, r3, #5
    74e2:	4a14      	ldr	r2, [pc, #80]	; (7534 <_usb_d_dev_lpmsusp+0x88>)
    74e4:	4413      	add	r3, r2
    74e6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    74e8:	687b      	ldr	r3, [r7, #4]
    74ea:	891b      	ldrh	r3, [r3, #8]
    74ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
    74f0:	b2db      	uxtb	r3, r3
    74f2:	2b03      	cmp	r3, #3
    74f4:	d109      	bne.n	750a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    74f6:	687b      	ldr	r3, [r7, #4]
    74f8:	891b      	ldrh	r3, [r3, #8]
    74fa:	f3c3 130a 	ubfx	r3, r3, #4, #11
    74fe:	b29b      	uxth	r3, r3
    7500:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    7502:	687b      	ldr	r3, [r7, #4]
    7504:	2200      	movs	r2, #0
    7506:	811a      	strh	r2, [r3, #8]
			break;
    7508:	e005      	b.n	7516 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    750a:	7bfb      	ldrb	r3, [r7, #15]
    750c:	3301      	adds	r3, #1
    750e:	73fb      	strb	r3, [r7, #15]
    7510:	7bfb      	ldrb	r3, [r7, #15]
    7512:	2b01      	cmp	r3, #1
    7514:	d9e3      	bls.n	74de <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    7516:	4b08      	ldr	r3, [pc, #32]	; (7538 <_usb_d_dev_lpmsusp+0x8c>)
    7518:	685b      	ldr	r3, [r3, #4]
    751a:	68b9      	ldr	r1, [r7, #8]
    751c:	2003      	movs	r0, #3
    751e:	4798      	blx	r3
}
    7520:	bf00      	nop
    7522:	3710      	adds	r7, #16
    7524:	46bd      	mov	sp, r7
    7526:	bd80      	pop	{r7, pc}
    7528:	00006bf3 	.word	0x00006bf3
    752c:	00006c49 	.word	0x00006c49
    7530:	00006c11 	.word	0x00006c11
    7534:	200005cc 	.word	0x200005cc
    7538:	20000504 	.word	0x20000504

0000753c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    753c:	b580      	push	{r7, lr}
    753e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    7540:	2180      	movs	r1, #128	; 0x80
    7542:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7546:	4b04      	ldr	r3, [pc, #16]	; (7558 <_usb_d_dev_ramerr+0x1c>)
    7548:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    754a:	4b04      	ldr	r3, [pc, #16]	; (755c <_usb_d_dev_ramerr+0x20>)
    754c:	685b      	ldr	r3, [r3, #4]
    754e:	2100      	movs	r1, #0
    7550:	2005      	movs	r0, #5
    7552:	4798      	blx	r3
}
    7554:	bf00      	nop
    7556:	bd80      	pop	{r7, pc}
    7558:	00006bf3 	.word	0x00006bf3
    755c:	20000504 	.word	0x20000504

00007560 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    7560:	b580      	push	{r7, lr}
    7562:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    7564:	2170      	movs	r1, #112	; 0x70
    7566:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    756a:	4b0b      	ldr	r3, [pc, #44]	; (7598 <_usb_d_dev_wakeup+0x38>)
    756c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    756e:	2170      	movs	r1, #112	; 0x70
    7570:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7574:	4b09      	ldr	r3, [pc, #36]	; (759c <_usb_d_dev_wakeup+0x3c>)
    7576:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    7578:	f240 2101 	movw	r1, #513	; 0x201
    757c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7580:	4b07      	ldr	r3, [pc, #28]	; (75a0 <_usb_d_dev_wakeup+0x40>)
    7582:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    7584:	2000      	movs	r0, #0
    7586:	4b07      	ldr	r3, [pc, #28]	; (75a4 <_usb_d_dev_wakeup+0x44>)
    7588:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    758a:	4b07      	ldr	r3, [pc, #28]	; (75a8 <_usb_d_dev_wakeup+0x48>)
    758c:	685b      	ldr	r3, [r3, #4]
    758e:	2100      	movs	r1, #0
    7590:	2002      	movs	r0, #2
    7592:	4798      	blx	r3
}
    7594:	bf00      	nop
    7596:	bd80      	pop	{r7, pc}
    7598:	00006bf3 	.word	0x00006bf3
    759c:	00006c49 	.word	0x00006c49
    75a0:	00006c11 	.word	0x00006c11
    75a4:	00006e65 	.word	0x00006e65
    75a8:	20000504 	.word	0x20000504

000075ac <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    75ac:	b580      	push	{r7, lr}
    75ae:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    75b0:	2200      	movs	r2, #0
    75b2:	2100      	movs	r1, #0
    75b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    75b8:	4b0d      	ldr	r3, [pc, #52]	; (75f0 <_usb_d_dev_reset+0x44>)
    75ba:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    75bc:	2108      	movs	r1, #8
    75be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    75c2:	4b0c      	ldr	r3, [pc, #48]	; (75f4 <_usb_d_dev_reset+0x48>)
    75c4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    75c6:	2170      	movs	r1, #112	; 0x70
    75c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    75cc:	4b0a      	ldr	r3, [pc, #40]	; (75f8 <_usb_d_dev_reset+0x4c>)
    75ce:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    75d0:	f240 2101 	movw	r1, #513	; 0x201
    75d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    75d8:	4b08      	ldr	r3, [pc, #32]	; (75fc <_usb_d_dev_reset+0x50>)
    75da:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    75dc:	4b08      	ldr	r3, [pc, #32]	; (7600 <_usb_d_dev_reset+0x54>)
    75de:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    75e0:	4b08      	ldr	r3, [pc, #32]	; (7604 <_usb_d_dev_reset+0x58>)
    75e2:	685b      	ldr	r3, [r3, #4]
    75e4:	2100      	movs	r1, #0
    75e6:	2001      	movs	r0, #1
    75e8:	4798      	blx	r3
}
    75ea:	bf00      	nop
    75ec:	bd80      	pop	{r7, pc}
    75ee:	bf00      	nop
    75f0:	00006b89 	.word	0x00006b89
    75f4:	00006bf3 	.word	0x00006bf3
    75f8:	00006c49 	.word	0x00006c49
    75fc:	00006c11 	.word	0x00006c11
    7600:	00008169 	.word	0x00008169
    7604:	20000504 	.word	0x20000504

00007608 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    7608:	b580      	push	{r7, lr}
    760a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    760c:	f240 2101 	movw	r1, #513	; 0x201
    7610:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7614:	4b09      	ldr	r3, [pc, #36]	; (763c <_usb_d_dev_suspend+0x34>)
    7616:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    7618:	f240 2101 	movw	r1, #513	; 0x201
    761c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7620:	4b07      	ldr	r3, [pc, #28]	; (7640 <_usb_d_dev_suspend+0x38>)
    7622:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    7624:	2170      	movs	r1, #112	; 0x70
    7626:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    762a:	4b06      	ldr	r3, [pc, #24]	; (7644 <_usb_d_dev_suspend+0x3c>)
    762c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    762e:	4b06      	ldr	r3, [pc, #24]	; (7648 <_usb_d_dev_suspend+0x40>)
    7630:	685b      	ldr	r3, [r3, #4]
    7632:	2100      	movs	r1, #0
    7634:	2004      	movs	r0, #4
    7636:	4798      	blx	r3
}
    7638:	bf00      	nop
    763a:	bd80      	pop	{r7, pc}
    763c:	00006bf3 	.word	0x00006bf3
    7640:	00006c49 	.word	0x00006c49
    7644:	00006c11 	.word	0x00006c11
    7648:	20000504 	.word	0x20000504

0000764c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    764c:	b580      	push	{r7, lr}
    764e:	b082      	sub	sp, #8
    7650:	af00      	add	r7, sp, #0
	bool     rc    = true;
    7652:	2301      	movs	r3, #1
    7654:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    7656:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    765a:	4b22      	ldr	r3, [pc, #136]	; (76e4 <_usb_d_dev_handle_nep+0x98>)
    765c:	4798      	blx	r3
    765e:	4603      	mov	r3, r0
    7660:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    7662:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7666:	4b20      	ldr	r3, [pc, #128]	; (76e8 <_usb_d_dev_handle_nep+0x9c>)
    7668:	4798      	blx	r3
    766a:	4603      	mov	r3, r0
    766c:	461a      	mov	r2, r3
    766e:	88bb      	ldrh	r3, [r7, #4]
    7670:	4013      	ands	r3, r2
    7672:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    7674:	88bb      	ldrh	r3, [r7, #4]
    7676:	f003 0304 	and.w	r3, r3, #4
    767a:	2b00      	cmp	r3, #0
    767c:	d003      	beq.n	7686 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    767e:	4b1b      	ldr	r3, [pc, #108]	; (76ec <_usb_d_dev_handle_nep+0xa0>)
    7680:	4798      	blx	r3
		return true;
    7682:	2301      	movs	r3, #1
    7684:	e02a      	b.n	76dc <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    7686:	88bb      	ldrh	r3, [r7, #4]
    7688:	f403 7300 	and.w	r3, r3, #512	; 0x200
    768c:	2b00      	cmp	r3, #0
    768e:	d002      	beq.n	7696 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    7690:	4b17      	ldr	r3, [pc, #92]	; (76f0 <_usb_d_dev_handle_nep+0xa4>)
    7692:	4798      	blx	r3
    7694:	e021      	b.n	76da <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    7696:	88bb      	ldrh	r3, [r7, #4]
    7698:	f003 0380 	and.w	r3, r3, #128	; 0x80
    769c:	2b00      	cmp	r3, #0
    769e:	d002      	beq.n	76a6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    76a0:	4b14      	ldr	r3, [pc, #80]	; (76f4 <_usb_d_dev_handle_nep+0xa8>)
    76a2:	4798      	blx	r3
    76a4:	e019      	b.n	76da <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    76a6:	88bb      	ldrh	r3, [r7, #4]
    76a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    76ac:	2b00      	cmp	r3, #0
    76ae:	d002      	beq.n	76b6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    76b0:	4b11      	ldr	r3, [pc, #68]	; (76f8 <_usb_d_dev_handle_nep+0xac>)
    76b2:	4798      	blx	r3
    76b4:	e011      	b.n	76da <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    76b6:	88bb      	ldrh	r3, [r7, #4]
    76b8:	f003 0308 	and.w	r3, r3, #8
    76bc:	2b00      	cmp	r3, #0
    76be:	d002      	beq.n	76c6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    76c0:	4b0e      	ldr	r3, [pc, #56]	; (76fc <_usb_d_dev_handle_nep+0xb0>)
    76c2:	4798      	blx	r3
    76c4:	e009      	b.n	76da <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    76c6:	88bb      	ldrh	r3, [r7, #4]
    76c8:	f003 0301 	and.w	r3, r3, #1
    76cc:	2b00      	cmp	r3, #0
    76ce:	d002      	beq.n	76d6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    76d0:	4b0b      	ldr	r3, [pc, #44]	; (7700 <_usb_d_dev_handle_nep+0xb4>)
    76d2:	4798      	blx	r3
    76d4:	e001      	b.n	76da <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    76d6:	2300      	movs	r3, #0
    76d8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    76da:	79fb      	ldrb	r3, [r7, #7]
}
    76dc:	4618      	mov	r0, r3
    76de:	3708      	adds	r7, #8
    76e0:	46bd      	mov	sp, r7
    76e2:	bd80      	pop	{r7, pc}
    76e4:	00006bd9 	.word	0x00006bd9
    76e8:	00006c2f 	.word	0x00006c2f
    76ec:	0000748d 	.word	0x0000748d
    76f0:	000074ad 	.word	0x000074ad
    76f4:	0000753d 	.word	0x0000753d
    76f8:	00007561 	.word	0x00007561
    76fc:	000075ad 	.word	0x000075ad
    7700:	00007609 	.word	0x00007609

00007704 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    7704:	b590      	push	{r4, r7, lr}
    7706:	b089      	sub	sp, #36	; 0x24
    7708:	af00      	add	r7, sp, #0
    770a:	6078      	str	r0, [r7, #4]
    770c:	460b      	mov	r3, r1
    770e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    7710:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7714:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    7716:	687b      	ldr	r3, [r7, #4]
    7718:	7c9b      	ldrb	r3, [r3, #18]
    771a:	f003 030f 	and.w	r3, r3, #15
    771e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7720:	7dfb      	ldrb	r3, [r7, #23]
    7722:	015b      	lsls	r3, r3, #5
    7724:	4a73      	ldr	r2, [pc, #460]	; (78f4 <_usb_d_dev_in_next+0x1f0>)
    7726:	4413      	add	r3, r2
    7728:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    772a:	78fb      	ldrb	r3, [r7, #3]
    772c:	2b00      	cmp	r3, #0
    772e:	d006      	beq.n	773e <_usb_d_dev_in_next+0x3a>
    7730:	693b      	ldr	r3, [r7, #16]
    7732:	3310      	adds	r3, #16
    7734:	685b      	ldr	r3, [r3, #4]
    7736:	f3c3 030d 	ubfx	r3, r3, #0, #14
    773a:	b29b      	uxth	r3, r3
    773c:	e000      	b.n	7740 <_usb_d_dev_in_next+0x3c>
    773e:	2300      	movs	r3, #0
    7740:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    7742:	687b      	ldr	r3, [r7, #4]
    7744:	8a1b      	ldrh	r3, [r3, #16]
    7746:	f240 32ff 	movw	r2, #1023	; 0x3ff
    774a:	4293      	cmp	r3, r2
    774c:	d103      	bne.n	7756 <_usb_d_dev_in_next+0x52>
    774e:	687b      	ldr	r3, [r7, #4]
    7750:	8a1b      	ldrh	r3, [r3, #16]
    7752:	b21b      	sxth	r3, r3
    7754:	e004      	b.n	7760 <_usb_d_dev_in_next+0x5c>
    7756:	687b      	ldr	r3, [r7, #4]
    7758:	8a1b      	ldrh	r3, [r3, #16]
    775a:	3b01      	subs	r3, #1
    775c:	b29b      	uxth	r3, r3
    775e:	b21b      	sxth	r3, r3
    7760:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    7764:	4013      	ands	r3, r2
    7766:	b21b      	sxth	r3, r3
    7768:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    776a:	2300      	movs	r3, #0
    776c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	7cdb      	ldrb	r3, [r3, #19]
    7772:	f003 0307 	and.w	r3, r3, #7
    7776:	b2db      	uxtb	r3, r3
    7778:	2b01      	cmp	r3, #1
    777a:	bf0c      	ite	eq
    777c:	2301      	moveq	r3, #1
    777e:	2300      	movne	r3, #0
    7780:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    7782:	78fb      	ldrb	r3, [r7, #3]
    7784:	2b00      	cmp	r3, #0
    7786:	d004      	beq.n	7792 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    7788:	7dfb      	ldrb	r3, [r7, #23]
    778a:	2101      	movs	r1, #1
    778c:	4618      	mov	r0, r3
    778e:	4b5a      	ldr	r3, [pc, #360]	; (78f8 <_usb_d_dev_in_next+0x1f4>)
    7790:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    7792:	687b      	ldr	r3, [r7, #4]
    7794:	689a      	ldr	r2, [r3, #8]
    7796:	89fb      	ldrh	r3, [r7, #14]
    7798:	441a      	add	r2, r3
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    779e:	687b      	ldr	r3, [r7, #4]
    77a0:	689a      	ldr	r2, [r3, #8]
    77a2:	687b      	ldr	r3, [r7, #4]
    77a4:	685b      	ldr	r3, [r3, #4]
    77a6:	429a      	cmp	r2, r3
    77a8:	d243      	bcs.n	7832 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	685b      	ldr	r3, [r3, #4]
    77ae:	b29a      	uxth	r2, r3
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	689b      	ldr	r3, [r3, #8]
    77b4:	b29b      	uxth	r3, r3
    77b6:	1ad3      	subs	r3, r2, r3
    77b8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    77ba:	687b      	ldr	r3, [r7, #4]
    77bc:	7cdb      	ldrb	r3, [r3, #19]
    77be:	f003 0320 	and.w	r3, r3, #32
    77c2:	b2db      	uxtb	r3, r3
    77c4:	2b00      	cmp	r3, #0
    77c6:	d01b      	beq.n	7800 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    77c8:	687b      	ldr	r3, [r7, #4]
    77ca:	8a1b      	ldrh	r3, [r3, #16]
    77cc:	8bfa      	ldrh	r2, [r7, #30]
    77ce:	429a      	cmp	r2, r3
    77d0:	d902      	bls.n	77d8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    77d2:	687b      	ldr	r3, [r7, #4]
    77d4:	8a1b      	ldrh	r3, [r3, #16]
    77d6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	68d8      	ldr	r0, [r3, #12]
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	681a      	ldr	r2, [r3, #0]
    77e0:	687b      	ldr	r3, [r7, #4]
    77e2:	689b      	ldr	r3, [r3, #8]
    77e4:	4413      	add	r3, r2
    77e6:	8bfa      	ldrh	r2, [r7, #30]
    77e8:	4619      	mov	r1, r3
    77ea:	4b44      	ldr	r3, [pc, #272]	; (78fc <_usb_d_dev_in_next+0x1f8>)
    77ec:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    77ee:	687b      	ldr	r3, [r7, #4]
    77f0:	68db      	ldr	r3, [r3, #12]
    77f2:	461a      	mov	r2, r3
    77f4:	7dfb      	ldrb	r3, [r7, #23]
    77f6:	2101      	movs	r1, #1
    77f8:	4618      	mov	r0, r3
    77fa:	4b41      	ldr	r3, [pc, #260]	; (7900 <_usb_d_dev_in_next+0x1fc>)
    77fc:	4798      	blx	r3
    77fe:	e011      	b.n	7824 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    7800:	8bfb      	ldrh	r3, [r7, #30]
    7802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    7806:	d902      	bls.n	780e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    7808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    780c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    780e:	687b      	ldr	r3, [r7, #4]
    7810:	681a      	ldr	r2, [r3, #0]
    7812:	687b      	ldr	r3, [r7, #4]
    7814:	689b      	ldr	r3, [r3, #8]
    7816:	4413      	add	r3, r2
    7818:	461a      	mov	r2, r3
    781a:	7dfb      	ldrb	r3, [r7, #23]
    781c:	2101      	movs	r1, #1
    781e:	4618      	mov	r0, r3
    7820:	4b37      	ldr	r3, [pc, #220]	; (7900 <_usb_d_dev_in_next+0x1fc>)
    7822:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    7824:	8bfa      	ldrh	r2, [r7, #30]
    7826:	7df8      	ldrb	r0, [r7, #23]
    7828:	2300      	movs	r3, #0
    782a:	2101      	movs	r1, #1
    782c:	4c35      	ldr	r4, [pc, #212]	; (7904 <_usb_d_dev_in_next+0x200>)
    782e:	47a0      	blx	r4
		goto _in_tx_exec;
    7830:	e041      	b.n	78b6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    7832:	687b      	ldr	r3, [r7, #4]
    7834:	7cdb      	ldrb	r3, [r3, #19]
    7836:	f003 0310 	and.w	r3, r3, #16
    783a:	b2db      	uxtb	r3, r3
    783c:	2b00      	cmp	r3, #0
    783e:	d00b      	beq.n	7858 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    7840:	687a      	ldr	r2, [r7, #4]
    7842:	7cd3      	ldrb	r3, [r2, #19]
    7844:	f36f 1304 	bfc	r3, #4, #1
    7848:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    784a:	7df8      	ldrb	r0, [r7, #23]
    784c:	2300      	movs	r3, #0
    784e:	2200      	movs	r2, #0
    7850:	2101      	movs	r1, #1
    7852:	4c2c      	ldr	r4, [pc, #176]	; (7904 <_usb_d_dev_in_next+0x200>)
    7854:	47a0      	blx	r4
		goto _in_tx_exec;
    7856:	e02e      	b.n	78b6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    7858:	7afb      	ldrb	r3, [r7, #11]
    785a:	2b00      	cmp	r3, #0
    785c:	d006      	beq.n	786c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    785e:	7dfb      	ldrb	r3, [r7, #23]
    7860:	224b      	movs	r2, #75	; 0x4b
    7862:	4619      	mov	r1, r3
    7864:	69b8      	ldr	r0, [r7, #24]
    7866:	4b28      	ldr	r3, [pc, #160]	; (7908 <_usb_d_dev_in_next+0x204>)
    7868:	4798      	blx	r3
    786a:	e005      	b.n	7878 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    786c:	7dfb      	ldrb	r3, [r7, #23]
    786e:	224a      	movs	r2, #74	; 0x4a
    7870:	4619      	mov	r1, r3
    7872:	69b8      	ldr	r0, [r7, #24]
    7874:	4b24      	ldr	r3, [pc, #144]	; (7908 <_usb_d_dev_in_next+0x204>)
    7876:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	8a1b      	ldrh	r3, [r3, #16]
    787c:	89ba      	ldrh	r2, [r7, #12]
    787e:	429a      	cmp	r2, r3
    7880:	d114      	bne.n	78ac <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    7882:	687a      	ldr	r2, [r7, #4]
    7884:	7cd3      	ldrb	r3, [r2, #19]
    7886:	f36f 1386 	bfc	r3, #6, #1
    788a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    788c:	4b1f      	ldr	r3, [pc, #124]	; (790c <_usb_d_dev_in_next+0x208>)
    788e:	68db      	ldr	r3, [r3, #12]
    7890:	687a      	ldr	r2, [r7, #4]
    7892:	7c90      	ldrb	r0, [r2, #18]
    7894:	687a      	ldr	r2, [r7, #4]
    7896:	6892      	ldr	r2, [r2, #8]
    7898:	4611      	mov	r1, r2
    789a:	4798      	blx	r3
    789c:	4603      	mov	r3, r0
    789e:	2b00      	cmp	r3, #0
    78a0:	d124      	bne.n	78ec <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    78a2:	687a      	ldr	r2, [r7, #4]
    78a4:	7cd3      	ldrb	r3, [r2, #19]
    78a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    78aa:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    78ac:	2100      	movs	r1, #0
    78ae:	6878      	ldr	r0, [r7, #4]
    78b0:	4b17      	ldr	r3, [pc, #92]	; (7910 <_usb_d_dev_in_next+0x20c>)
    78b2:	4798      	blx	r3
	return;
    78b4:	e01b      	b.n	78ee <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    78b6:	78fb      	ldrb	r3, [r7, #3]
    78b8:	f083 0301 	eor.w	r3, r3, #1
    78bc:	b2db      	uxtb	r3, r3
    78be:	2b00      	cmp	r3, #0
    78c0:	d00d      	beq.n	78de <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    78c2:	7afb      	ldrb	r3, [r7, #11]
    78c4:	2b00      	cmp	r3, #0
    78c6:	d002      	beq.n	78ce <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    78c8:	234e      	movs	r3, #78	; 0x4e
    78ca:	777b      	strb	r3, [r7, #29]
    78cc:	e001      	b.n	78d2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    78ce:	234a      	movs	r3, #74	; 0x4a
    78d0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    78d2:	7f7a      	ldrb	r2, [r7, #29]
    78d4:	7dfb      	ldrb	r3, [r7, #23]
    78d6:	4619      	mov	r1, r3
    78d8:	69b8      	ldr	r0, [r7, #24]
    78da:	4b0e      	ldr	r3, [pc, #56]	; (7914 <_usb_d_dev_in_next+0x210>)
    78dc:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    78de:	7dfb      	ldrb	r3, [r7, #23]
    78e0:	2201      	movs	r2, #1
    78e2:	2101      	movs	r1, #1
    78e4:	4618      	mov	r0, r3
    78e6:	4b0c      	ldr	r3, [pc, #48]	; (7918 <_usb_d_dev_in_next+0x214>)
    78e8:	4798      	blx	r3
    78ea:	e000      	b.n	78ee <_usb_d_dev_in_next+0x1ea>
			return;
    78ec:	bf00      	nop
}
    78ee:	3724      	adds	r7, #36	; 0x24
    78f0:	46bd      	mov	sp, r7
    78f2:	bd90      	pop	{r4, r7, pc}
    78f4:	200005cc 	.word	0x200005cc
    78f8:	00007161 	.word	0x00007161
    78fc:	00008d9d 	.word	0x00008d9d
    7900:	0000718d 	.word	0x0000718d
    7904:	000072d5 	.word	0x000072d5
    7908:	00006af9 	.word	0x00006af9
    790c:	20000504 	.word	0x20000504
    7910:	000084c1 	.word	0x000084c1
    7914:	00006acd 	.word	0x00006acd
    7918:	0000738d 	.word	0x0000738d

0000791c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    791c:	b590      	push	{r4, r7, lr}
    791e:	b08b      	sub	sp, #44	; 0x2c
    7920:	af00      	add	r7, sp, #0
    7922:	6078      	str	r0, [r7, #4]
    7924:	460b      	mov	r3, r1
    7926:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    7928:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    792c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	7c9b      	ldrb	r3, [r3, #18]
    7932:	f003 030f 	and.w	r3, r3, #15
    7936:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    7938:	7ffb      	ldrb	r3, [r7, #31]
    793a:	015b      	lsls	r3, r3, #5
    793c:	4a94      	ldr	r2, [pc, #592]	; (7b90 <_usb_d_dev_out_next+0x274>)
    793e:	4413      	add	r3, r2
    7940:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    7942:	78fb      	ldrb	r3, [r7, #3]
    7944:	2b00      	cmp	r3, #0
    7946:	d005      	beq.n	7954 <_usb_d_dev_out_next+0x38>
    7948:	69bb      	ldr	r3, [r7, #24]
    794a:	685b      	ldr	r3, [r3, #4]
    794c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    7950:	b29b      	uxth	r3, r3
    7952:	e000      	b.n	7956 <_usb_d_dev_out_next+0x3a>
    7954:	2300      	movs	r3, #0
    7956:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    7958:	78fb      	ldrb	r3, [r7, #3]
    795a:	2b00      	cmp	r3, #0
    795c:	d005      	beq.n	796a <_usb_d_dev_out_next+0x4e>
    795e:	69bb      	ldr	r3, [r7, #24]
    7960:	685b      	ldr	r3, [r3, #4]
    7962:	f3c3 030d 	ubfx	r3, r3, #0, #14
    7966:	b29b      	uxth	r3, r3
    7968:	e000      	b.n	796c <_usb_d_dev_out_next+0x50>
    796a:	2300      	movs	r3, #0
    796c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    796e:	687b      	ldr	r3, [r7, #4]
    7970:	8a1b      	ldrh	r3, [r3, #16]
    7972:	f240 32ff 	movw	r2, #1023	; 0x3ff
    7976:	4293      	cmp	r3, r2
    7978:	d004      	beq.n	7984 <_usb_d_dev_out_next+0x68>
    797a:	687b      	ldr	r3, [r7, #4]
    797c:	8a1b      	ldrh	r3, [r3, #16]
    797e:	3b01      	subs	r3, #1
    7980:	b29b      	uxth	r3, r3
    7982:	e001      	b.n	7988 <_usb_d_dev_out_next+0x6c>
    7984:	f240 33ff 	movw	r3, #1023	; 0x3ff
    7988:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    798a:	8aba      	ldrh	r2, [r7, #20]
    798c:	8a7b      	ldrh	r3, [r7, #18]
    798e:	4013      	ands	r3, r2
    7990:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	7cdb      	ldrb	r3, [r3, #19]
    7996:	f003 0307 	and.w	r3, r3, #7
    799a:	b2db      	uxtb	r3, r3
    799c:	2b01      	cmp	r3, #1
    799e:	bf0c      	ite	eq
    79a0:	2301      	moveq	r3, #1
    79a2:	2300      	movne	r3, #0
    79a4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    79a6:	78fb      	ldrb	r3, [r7, #3]
    79a8:	2b00      	cmp	r3, #0
    79aa:	d004      	beq.n	79b6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    79ac:	7ffb      	ldrb	r3, [r7, #31]
    79ae:	2100      	movs	r1, #0
    79b0:	4618      	mov	r0, r3
    79b2:	4b78      	ldr	r3, [pc, #480]	; (7b94 <_usb_d_dev_out_next+0x278>)
    79b4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	7cdb      	ldrb	r3, [r3, #19]
    79ba:	f003 0320 	and.w	r3, r3, #32
    79be:	b2db      	uxtb	r3, r3
    79c0:	2b00      	cmp	r3, #0
    79c2:	d01c      	beq.n	79fe <_usb_d_dev_out_next+0xe2>
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	685b      	ldr	r3, [r3, #4]
    79c8:	2b00      	cmp	r3, #0
    79ca:	d018      	beq.n	79fe <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	685b      	ldr	r3, [r3, #4]
    79d0:	b29a      	uxth	r2, r3
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	689b      	ldr	r3, [r3, #8]
    79d6:	b29b      	uxth	r3, r3
    79d8:	1ad3      	subs	r3, r2, r3
    79da:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	681a      	ldr	r2, [r3, #0]
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	689b      	ldr	r3, [r3, #8]
    79e4:	18d0      	adds	r0, r2, r3
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	68d9      	ldr	r1, [r3, #12]
    79ea:	89ba      	ldrh	r2, [r7, #12]
    79ec:	8a3b      	ldrh	r3, [r7, #16]
    79ee:	429a      	cmp	r2, r3
    79f0:	d901      	bls.n	79f6 <_usb_d_dev_out_next+0xda>
    79f2:	8a3b      	ldrh	r3, [r7, #16]
    79f4:	e000      	b.n	79f8 <_usb_d_dev_out_next+0xdc>
    79f6:	89bb      	ldrh	r3, [r7, #12]
    79f8:	461a      	mov	r2, r3
    79fa:	4b67      	ldr	r3, [pc, #412]	; (7b98 <_usb_d_dev_out_next+0x27c>)
    79fc:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    79fe:	687b      	ldr	r3, [r7, #4]
    7a00:	685b      	ldr	r3, [r3, #4]
    7a02:	2b00      	cmp	r3, #0
    7a04:	d121      	bne.n	7a4a <_usb_d_dev_out_next+0x12e>
    7a06:	687b      	ldr	r3, [r7, #4]
    7a08:	7cdb      	ldrb	r3, [r3, #19]
    7a0a:	f003 0310 	and.w	r3, r3, #16
    7a0e:	b2db      	uxtb	r3, r3
    7a10:	2b00      	cmp	r3, #0
    7a12:	d01a      	beq.n	7a4a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    7a14:	687a      	ldr	r2, [r7, #4]
    7a16:	7cd3      	ldrb	r3, [r2, #19]
    7a18:	f36f 1304 	bfc	r3, #4, #1
    7a1c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    7a1e:	687a      	ldr	r2, [r7, #4]
    7a20:	7cd3      	ldrb	r3, [r2, #19]
    7a22:	f043 0320 	orr.w	r3, r3, #32
    7a26:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7a28:	687b      	ldr	r3, [r7, #4]
    7a2a:	68db      	ldr	r3, [r3, #12]
    7a2c:	461a      	mov	r2, r3
    7a2e:	7ffb      	ldrb	r3, [r7, #31]
    7a30:	2100      	movs	r1, #0
    7a32:	4618      	mov	r0, r3
    7a34:	4b59      	ldr	r3, [pc, #356]	; (7b9c <_usb_d_dev_out_next+0x280>)
    7a36:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	8a1b      	ldrh	r3, [r3, #16]
    7a3c:	461a      	mov	r2, r3
    7a3e:	7ff8      	ldrb	r0, [r7, #31]
    7a40:	2300      	movs	r3, #0
    7a42:	2100      	movs	r1, #0
    7a44:	4c56      	ldr	r4, [pc, #344]	; (7ba0 <_usb_d_dev_out_next+0x284>)
    7a46:	47a0      	blx	r4
		goto _out_rx_exec;
    7a48:	e090      	b.n	7b6c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    7a4a:	78fb      	ldrb	r3, [r7, #3]
    7a4c:	2b00      	cmp	r3, #0
    7a4e:	d010      	beq.n	7a72 <_usb_d_dev_out_next+0x156>
    7a50:	687b      	ldr	r3, [r7, #4]
    7a52:	8a1b      	ldrh	r3, [r3, #16]
    7a54:	8a3a      	ldrh	r2, [r7, #16]
    7a56:	429a      	cmp	r2, r3
    7a58:	d20b      	bcs.n	7a72 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    7a5a:	687a      	ldr	r2, [r7, #4]
    7a5c:	7cd3      	ldrb	r3, [r2, #19]
    7a5e:	f36f 1304 	bfc	r3, #4, #1
    7a62:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	689a      	ldr	r2, [r3, #8]
    7a68:	8abb      	ldrh	r3, [r7, #20]
    7a6a:	441a      	add	r2, r3
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	609a      	str	r2, [r3, #8]
    7a70:	e05c      	b.n	7b2c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	689a      	ldr	r2, [r3, #8]
    7a76:	8afb      	ldrh	r3, [r7, #22]
    7a78:	441a      	add	r2, r3
    7a7a:	687b      	ldr	r3, [r7, #4]
    7a7c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	689a      	ldr	r2, [r3, #8]
    7a82:	687b      	ldr	r3, [r7, #4]
    7a84:	685b      	ldr	r3, [r3, #4]
    7a86:	429a      	cmp	r2, r3
    7a88:	d250      	bcs.n	7b2c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    7a8a:	687b      	ldr	r3, [r7, #4]
    7a8c:	685b      	ldr	r3, [r3, #4]
    7a8e:	b29a      	uxth	r2, r3
    7a90:	687b      	ldr	r3, [r7, #4]
    7a92:	689b      	ldr	r3, [r3, #8]
    7a94:	b29b      	uxth	r3, r3
    7a96:	1ad3      	subs	r3, r2, r3
    7a98:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	7cdb      	ldrb	r3, [r3, #19]
    7a9e:	f003 0320 	and.w	r3, r3, #32
    7aa2:	b2db      	uxtb	r3, r3
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	d010      	beq.n	7aca <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	8a1b      	ldrh	r3, [r3, #16]
    7aac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7aae:	429a      	cmp	r2, r3
    7ab0:	d902      	bls.n	7ab8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	8a1b      	ldrh	r3, [r3, #16]
    7ab6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	68db      	ldr	r3, [r3, #12]
    7abc:	461a      	mov	r2, r3
    7abe:	7ffb      	ldrb	r3, [r7, #31]
    7ac0:	2100      	movs	r1, #0
    7ac2:	4618      	mov	r0, r3
    7ac4:	4b35      	ldr	r3, [pc, #212]	; (7b9c <_usb_d_dev_out_next+0x280>)
    7ac6:	4798      	blx	r3
    7ac8:	e029      	b.n	7b1e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    7aca:	687b      	ldr	r3, [r7, #4]
    7acc:	8a1b      	ldrh	r3, [r3, #16]
    7ace:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7ad0:	429a      	cmp	r2, r3
    7ad2:	d90f      	bls.n	7af4 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    7ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    7ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    7ada:	d903      	bls.n	7ae4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    7adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    7ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
    7ae2:	e011      	b.n	7b08 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    7ae4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7ae6:	8a7b      	ldrh	r3, [r7, #18]
    7ae8:	4013      	ands	r3, r2
    7aea:	b29b      	uxth	r3, r3
    7aec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7aee:	1ad3      	subs	r3, r2, r3
    7af0:	84fb      	strh	r3, [r7, #38]	; 0x26
    7af2:	e009      	b.n	7b08 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	8a1b      	ldrh	r3, [r3, #16]
    7af8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7afa:	429a      	cmp	r2, r3
    7afc:	d204      	bcs.n	7b08 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    7afe:	687a      	ldr	r2, [r7, #4]
    7b00:	7cd3      	ldrb	r3, [r2, #19]
    7b02:	f043 0320 	orr.w	r3, r3, #32
    7b06:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	681a      	ldr	r2, [r3, #0]
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	689b      	ldr	r3, [r3, #8]
    7b10:	4413      	add	r3, r2
    7b12:	461a      	mov	r2, r3
    7b14:	7ffb      	ldrb	r3, [r7, #31]
    7b16:	2100      	movs	r1, #0
    7b18:	4618      	mov	r0, r3
    7b1a:	4b20      	ldr	r3, [pc, #128]	; (7b9c <_usb_d_dev_out_next+0x280>)
    7b1c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    7b1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7b20:	7ff8      	ldrb	r0, [r7, #31]
    7b22:	2300      	movs	r3, #0
    7b24:	2100      	movs	r1, #0
    7b26:	4c1e      	ldr	r4, [pc, #120]	; (7ba0 <_usb_d_dev_out_next+0x284>)
    7b28:	47a0      	blx	r4
			goto _out_rx_exec;
    7b2a:	e01f      	b.n	7b6c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    7b2c:	7bfb      	ldrb	r3, [r7, #15]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d006      	beq.n	7b40 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    7b32:	7ffb      	ldrb	r3, [r7, #31]
    7b34:	222d      	movs	r2, #45	; 0x2d
    7b36:	4619      	mov	r1, r3
    7b38:	6a38      	ldr	r0, [r7, #32]
    7b3a:	4b1a      	ldr	r3, [pc, #104]	; (7ba4 <_usb_d_dev_out_next+0x288>)
    7b3c:	4798      	blx	r3
    7b3e:	e005      	b.n	7b4c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    7b40:	7ffb      	ldrb	r3, [r7, #31]
    7b42:	2225      	movs	r2, #37	; 0x25
    7b44:	4619      	mov	r1, r3
    7b46:	6a38      	ldr	r0, [r7, #32]
    7b48:	4b16      	ldr	r3, [pc, #88]	; (7ba4 <_usb_d_dev_out_next+0x288>)
    7b4a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    7b4c:	7ffb      	ldrb	r3, [r7, #31]
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d107      	bne.n	7b62 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	68db      	ldr	r3, [r3, #12]
    7b56:	461a      	mov	r2, r3
    7b58:	7ffb      	ldrb	r3, [r7, #31]
    7b5a:	2100      	movs	r1, #0
    7b5c:	4618      	mov	r0, r3
    7b5e:	4b0f      	ldr	r3, [pc, #60]	; (7b9c <_usb_d_dev_out_next+0x280>)
    7b60:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    7b62:	2100      	movs	r1, #0
    7b64:	6878      	ldr	r0, [r7, #4]
    7b66:	4b10      	ldr	r3, [pc, #64]	; (7ba8 <_usb_d_dev_out_next+0x28c>)
    7b68:	4798      	blx	r3
	return;
    7b6a:	e031      	b.n	7bd0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    7b6c:	78fb      	ldrb	r3, [r7, #3]
    7b6e:	f083 0301 	eor.w	r3, r3, #1
    7b72:	b2db      	uxtb	r3, r3
    7b74:	2b00      	cmp	r3, #0
    7b76:	d025      	beq.n	7bc4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    7b78:	7bfb      	ldrb	r3, [r7, #15]
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	d018      	beq.n	7bb0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    7b7e:	7ffb      	ldrb	r3, [r7, #31]
    7b80:	2101      	movs	r1, #1
    7b82:	4618      	mov	r0, r3
    7b84:	4b09      	ldr	r3, [pc, #36]	; (7bac <_usb_d_dev_out_next+0x290>)
    7b86:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    7b88:	232d      	movs	r3, #45	; 0x2d
    7b8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    7b8e:	e012      	b.n	7bb6 <_usb_d_dev_out_next+0x29a>
    7b90:	200005cc 	.word	0x200005cc
    7b94:	00007161 	.word	0x00007161
    7b98:	00008d9d 	.word	0x00008d9d
    7b9c:	0000718d 	.word	0x0000718d
    7ba0:	00007315 	.word	0x00007315
    7ba4:	00006af9 	.word	0x00006af9
    7ba8:	000084c1 	.word	0x000084c1
    7bac:	00007355 	.word	0x00007355
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    7bb0:	2325      	movs	r3, #37	; 0x25
    7bb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    7bb6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    7bba:	7ffb      	ldrb	r3, [r7, #31]
    7bbc:	4619      	mov	r1, r3
    7bbe:	6a38      	ldr	r0, [r7, #32]
    7bc0:	4b05      	ldr	r3, [pc, #20]	; (7bd8 <_usb_d_dev_out_next+0x2bc>)
    7bc2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    7bc4:	7ffb      	ldrb	r3, [r7, #31]
    7bc6:	2201      	movs	r2, #1
    7bc8:	2100      	movs	r1, #0
    7bca:	4618      	mov	r0, r3
    7bcc:	4b03      	ldr	r3, [pc, #12]	; (7bdc <_usb_d_dev_out_next+0x2c0>)
    7bce:	4798      	blx	r3
}
    7bd0:	372c      	adds	r7, #44	; 0x2c
    7bd2:	46bd      	mov	sp, r7
    7bd4:	bd90      	pop	{r4, r7, pc}
    7bd6:	bf00      	nop
    7bd8:	00006acd 	.word	0x00006acd
    7bdc:	000073e5 	.word	0x000073e5

00007be0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    7be0:	b580      	push	{r7, lr}
    7be2:	b084      	sub	sp, #16
    7be4:	af00      	add	r7, sp, #0
    7be6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	7c9b      	ldrb	r3, [r3, #18]
    7bec:	f003 030f 	and.w	r3, r3, #15
    7bf0:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7bf2:	687b      	ldr	r3, [r7, #4]
    7bf4:	7cdb      	ldrb	r3, [r3, #19]
    7bf6:	f003 0307 	and.w	r3, r3, #7
    7bfa:	b2db      	uxtb	r3, r3
    7bfc:	2b01      	cmp	r3, #1
    7bfe:	bf0c      	ite	eq
    7c00:	2301      	moveq	r3, #1
    7c02:	2300      	movne	r3, #0
    7c04:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    7c06:	7bbb      	ldrb	r3, [r7, #14]
    7c08:	f083 0301 	eor.w	r3, r3, #1
    7c0c:	b2db      	uxtb	r3, r3
    7c0e:	2b00      	cmp	r3, #0
    7c10:	d008      	beq.n	7c24 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    7c12:	7bfb      	ldrb	r3, [r7, #15]
    7c14:	4618      	mov	r0, r3
    7c16:	4b20      	ldr	r3, [pc, #128]	; (7c98 <_usb_d_dev_handle_setup+0xb8>)
    7c18:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    7c1a:	7bfb      	ldrb	r3, [r7, #15]
    7c1c:	4618      	mov	r0, r3
    7c1e:	4b1f      	ldr	r3, [pc, #124]	; (7c9c <_usb_d_dev_handle_setup+0xbc>)
    7c20:	4798      	blx	r3
		return;
    7c22:	e036      	b.n	7c92 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	7cdb      	ldrb	r3, [r3, #19]
    7c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7c2c:	b2db      	uxtb	r3, r3
    7c2e:	2b00      	cmp	r3, #0
    7c30:	d010      	beq.n	7c54 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    7c32:	687a      	ldr	r2, [r7, #4]
    7c34:	7cd3      	ldrb	r3, [r2, #19]
    7c36:	f36f 1386 	bfc	r3, #6, #1
    7c3a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    7c3c:	7bfb      	ldrb	r3, [r7, #15]
    7c3e:	2200      	movs	r2, #0
    7c40:	2101      	movs	r1, #1
    7c42:	4618      	mov	r0, r3
    7c44:	4b16      	ldr	r3, [pc, #88]	; (7ca0 <_usb_d_dev_handle_setup+0xc0>)
    7c46:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    7c48:	7bfb      	ldrb	r3, [r7, #15]
    7c4a:	2200      	movs	r2, #0
    7c4c:	2100      	movs	r1, #0
    7c4e:	4618      	mov	r0, r3
    7c50:	4b14      	ldr	r3, [pc, #80]	; (7ca4 <_usb_d_dev_handle_setup+0xc4>)
    7c52:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    7c54:	687a      	ldr	r2, [r7, #4]
    7c56:	7cd3      	ldrb	r3, [r2, #19]
    7c58:	f36f 03c3 	bfc	r3, #3, #1
    7c5c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    7c5e:	7bfb      	ldrb	r3, [r7, #15]
    7c60:	2100      	movs	r1, #0
    7c62:	4618      	mov	r0, r3
    7c64:	4b10      	ldr	r3, [pc, #64]	; (7ca8 <_usb_d_dev_handle_setup+0xc8>)
    7c66:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    7c68:	7bfb      	ldrb	r3, [r7, #15]
    7c6a:	2101      	movs	r1, #1
    7c6c:	4618      	mov	r0, r3
    7c6e:	4b0e      	ldr	r3, [pc, #56]	; (7ca8 <_usb_d_dev_handle_setup+0xc8>)
    7c70:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    7c72:	7bfb      	ldrb	r3, [r7, #15]
    7c74:	216f      	movs	r1, #111	; 0x6f
    7c76:	4618      	mov	r0, r3
    7c78:	4b0c      	ldr	r3, [pc, #48]	; (7cac <_usb_d_dev_handle_setup+0xcc>)
    7c7a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    7c7c:	7bfb      	ldrb	r3, [r7, #15]
    7c7e:	216f      	movs	r1, #111	; 0x6f
    7c80:	4618      	mov	r0, r3
    7c82:	4b0b      	ldr	r3, [pc, #44]	; (7cb0 <_usb_d_dev_handle_setup+0xd0>)
    7c84:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    7c86:	4b0b      	ldr	r3, [pc, #44]	; (7cb4 <_usb_d_dev_handle_setup+0xd4>)
    7c88:	689b      	ldr	r3, [r3, #8]
    7c8a:	687a      	ldr	r2, [r7, #4]
    7c8c:	7c92      	ldrb	r2, [r2, #18]
    7c8e:	4610      	mov	r0, r2
    7c90:	4798      	blx	r3
}
    7c92:	3710      	adds	r7, #16
    7c94:	46bd      	mov	sp, r7
    7c96:	bd80      	pop	{r7, pc}
    7c98:	000070e9 	.word	0x000070e9
    7c9c:	00007095 	.word	0x00007095
    7ca0:	0000738d 	.word	0x0000738d
    7ca4:	000073e5 	.word	0x000073e5
    7ca8:	00007355 	.word	0x00007355
    7cac:	00006e95 	.word	0x00006e95
    7cb0:	00006ee5 	.word	0x00006ee5
    7cb4:	20000504 	.word	0x20000504

00007cb8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    7cb8:	b580      	push	{r7, lr}
    7cba:	b084      	sub	sp, #16
    7cbc:	af00      	add	r7, sp, #0
    7cbe:	6078      	str	r0, [r7, #4]
    7cc0:	460b      	mov	r3, r1
    7cc2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    7cc4:	687b      	ldr	r3, [r7, #4]
    7cc6:	7c9b      	ldrb	r3, [r3, #18]
    7cc8:	f003 030f 	and.w	r3, r3, #15
    7ccc:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    7cce:	78f9      	ldrb	r1, [r7, #3]
    7cd0:	7bfb      	ldrb	r3, [r7, #15]
    7cd2:	2200      	movs	r2, #0
    7cd4:	4618      	mov	r0, r3
    7cd6:	4b07      	ldr	r3, [pc, #28]	; (7cf4 <_usb_d_dev_handle_stall+0x3c>)
    7cd8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    7cda:	4b07      	ldr	r3, [pc, #28]	; (7cf8 <_usb_d_dev_handle_stall+0x40>)
    7cdc:	691b      	ldr	r3, [r3, #16]
    7cde:	687a      	ldr	r2, [r7, #4]
    7ce0:	7c90      	ldrb	r0, [r2, #18]
    7ce2:	687a      	ldr	r2, [r7, #4]
    7ce4:	6892      	ldr	r2, [r2, #8]
    7ce6:	2101      	movs	r1, #1
    7ce8:	4798      	blx	r3
}
    7cea:	bf00      	nop
    7cec:	3710      	adds	r7, #16
    7cee:	46bd      	mov	sp, r7
    7cf0:	bd80      	pop	{r7, pc}
    7cf2:	bf00      	nop
    7cf4:	00007049 	.word	0x00007049
    7cf8:	20000504 	.word	0x20000504

00007cfc <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    7cfc:	b580      	push	{r7, lr}
    7cfe:	b088      	sub	sp, #32
    7d00:	af00      	add	r7, sp, #0
    7d02:	6078      	str	r0, [r7, #4]
    7d04:	460b      	mov	r3, r1
    7d06:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    7d08:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7d0c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	7c9b      	ldrb	r3, [r3, #18]
    7d12:	f003 030f 	and.w	r3, r3, #15
    7d16:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    7d18:	4b61      	ldr	r3, [pc, #388]	; (7ea0 <_usb_d_dev_handle_trfail+0x1a4>)
    7d1a:	881b      	ldrh	r3, [r3, #0]
    7d1c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    7d1e:	7efb      	ldrb	r3, [r7, #27]
    7d20:	015b      	lsls	r3, r3, #5
    7d22:	4a60      	ldr	r2, [pc, #384]	; (7ea4 <_usb_d_dev_handle_trfail+0x1a8>)
    7d24:	4413      	add	r3, r2
    7d26:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    7d28:	78fb      	ldrb	r3, [r7, #3]
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	d006      	beq.n	7d3c <_usb_d_dev_handle_trfail+0x40>
    7d2e:	7efb      	ldrb	r3, [r7, #27]
    7d30:	4619      	mov	r1, r3
    7d32:	69f8      	ldr	r0, [r7, #28]
    7d34:	4b5c      	ldr	r3, [pc, #368]	; (7ea8 <_usb_d_dev_handle_trfail+0x1ac>)
    7d36:	4798      	blx	r3
    7d38:	4603      	mov	r3, r0
    7d3a:	e005      	b.n	7d48 <_usb_d_dev_handle_trfail+0x4c>
    7d3c:	7efb      	ldrb	r3, [r7, #27]
    7d3e:	4619      	mov	r1, r3
    7d40:	69f8      	ldr	r0, [r7, #28]
    7d42:	4b5a      	ldr	r3, [pc, #360]	; (7eac <_usb_d_dev_handle_trfail+0x1b0>)
    7d44:	4798      	blx	r3
    7d46:	4603      	mov	r3, r0
    7d48:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	7cdb      	ldrb	r3, [r3, #19]
    7d4e:	f003 0307 	and.w	r3, r3, #7
    7d52:	b2db      	uxtb	r3, r3
    7d54:	2b01      	cmp	r3, #1
    7d56:	bf0c      	ite	eq
    7d58:	2301      	moveq	r3, #1
    7d5a:	2300      	movne	r3, #0
    7d5c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    7d5e:	78fb      	ldrb	r3, [r7, #3]
    7d60:	011b      	lsls	r3, r3, #4
    7d62:	697a      	ldr	r2, [r7, #20]
    7d64:	4413      	add	r3, r2
    7d66:	7a9b      	ldrb	r3, [r3, #10]
    7d68:	b2db      	uxtb	r3, r3
    7d6a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    7d6c:	7cfb      	ldrb	r3, [r7, #19]
    7d6e:	2b02      	cmp	r3, #2
    7d70:	d12f      	bne.n	7dd2 <_usb_d_dev_handle_trfail+0xd6>
    7d72:	7b3b      	ldrb	r3, [r7, #12]
    7d74:	f003 0301 	and.w	r3, r3, #1
    7d78:	b2db      	uxtb	r3, r3
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d029      	beq.n	7dd2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    7d7e:	78fb      	ldrb	r3, [r7, #3]
    7d80:	011b      	lsls	r3, r3, #4
    7d82:	697a      	ldr	r2, [r7, #20]
    7d84:	441a      	add	r2, r3
    7d86:	7a93      	ldrb	r3, [r2, #10]
    7d88:	f36f 0300 	bfc	r3, #0, #1
    7d8c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7d8e:	78fb      	ldrb	r3, [r7, #3]
    7d90:	f107 0220 	add.w	r2, r7, #32
    7d94:	4413      	add	r3, r2
    7d96:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    7d9a:	7efb      	ldrb	r3, [r7, #27]
    7d9c:	4619      	mov	r1, r3
    7d9e:	69f8      	ldr	r0, [r7, #28]
    7da0:	4b43      	ldr	r3, [pc, #268]	; (7eb0 <_usb_d_dev_handle_trfail+0x1b4>)
    7da2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    7da4:	78fb      	ldrb	r3, [r7, #3]
    7da6:	f107 0220 	add.w	r2, r7, #32
    7daa:	4413      	add	r3, r2
    7dac:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    7db0:	7efb      	ldrb	r3, [r7, #27]
    7db2:	4619      	mov	r1, r3
    7db4:	69f8      	ldr	r0, [r7, #28]
    7db6:	4b3f      	ldr	r3, [pc, #252]	; (7eb4 <_usb_d_dev_handle_trfail+0x1b8>)
    7db8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    7dba:	78fb      	ldrb	r3, [r7, #3]
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	bf14      	ite	ne
    7dc0:	2301      	movne	r3, #1
    7dc2:	2300      	moveq	r3, #0
    7dc4:	b2db      	uxtb	r3, r3
    7dc6:	2204      	movs	r2, #4
    7dc8:	4619      	mov	r1, r3
    7dca:	6878      	ldr	r0, [r7, #4]
    7dcc:	4b3a      	ldr	r3, [pc, #232]	; (7eb8 <_usb_d_dev_handle_trfail+0x1bc>)
    7dce:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    7dd0:	e062      	b.n	7e98 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    7dd2:	7b3b      	ldrb	r3, [r7, #12]
    7dd4:	f003 0302 	and.w	r3, r3, #2
    7dd8:	b2db      	uxtb	r3, r3
    7dda:	2b00      	cmp	r3, #0
    7ddc:	d040      	beq.n	7e60 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    7dde:	78fb      	ldrb	r3, [r7, #3]
    7de0:	011b      	lsls	r3, r3, #4
    7de2:	697a      	ldr	r2, [r7, #20]
    7de4:	441a      	add	r2, r3
    7de6:	7a93      	ldrb	r3, [r2, #10]
    7de8:	f36f 0341 	bfc	r3, #1, #1
    7dec:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7dee:	78fb      	ldrb	r3, [r7, #3]
    7df0:	f107 0220 	add.w	r2, r7, #32
    7df4:	4413      	add	r3, r2
    7df6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    7dfa:	7efb      	ldrb	r3, [r7, #27]
    7dfc:	4619      	mov	r1, r3
    7dfe:	69f8      	ldr	r0, [r7, #28]
    7e00:	4b2b      	ldr	r3, [pc, #172]	; (7eb0 <_usb_d_dev_handle_trfail+0x1b4>)
    7e02:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    7e04:	78fb      	ldrb	r3, [r7, #3]
    7e06:	f107 0220 	add.w	r2, r7, #32
    7e0a:	4413      	add	r3, r2
    7e0c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    7e10:	7efb      	ldrb	r3, [r7, #27]
    7e12:	4619      	mov	r1, r3
    7e14:	69f8      	ldr	r0, [r7, #28]
    7e16:	4b27      	ldr	r3, [pc, #156]	; (7eb4 <_usb_d_dev_handle_trfail+0x1b8>)
    7e18:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    7e1a:	7cbb      	ldrb	r3, [r7, #18]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d03b      	beq.n	7e98 <_usb_d_dev_handle_trfail+0x19c>
    7e20:	687b      	ldr	r3, [r7, #4]
    7e22:	7cdb      	ldrb	r3, [r3, #19]
    7e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7e28:	b2db      	uxtb	r3, r3
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d034      	beq.n	7e98 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	7cdb      	ldrb	r3, [r3, #19]
    7e32:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    7e36:	b2db      	uxtb	r3, r3
    7e38:	461a      	mov	r2, r3
    7e3a:	78fb      	ldrb	r3, [r7, #3]
    7e3c:	4293      	cmp	r3, r2
    7e3e:	d02b      	beq.n	7e98 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	7cdb      	ldrb	r3, [r3, #19]
    7e44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	bf14      	ite	ne
    7e4e:	2301      	movne	r3, #1
    7e50:	2300      	moveq	r3, #0
    7e52:	b2db      	uxtb	r3, r3
    7e54:	2200      	movs	r2, #0
    7e56:	4619      	mov	r1, r3
    7e58:	6878      	ldr	r0, [r7, #4]
    7e5a:	4b17      	ldr	r3, [pc, #92]	; (7eb8 <_usb_d_dev_handle_trfail+0x1bc>)
    7e5c:	4798      	blx	r3
}
    7e5e:	e01b      	b.n	7e98 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    7e60:	78fa      	ldrb	r2, [r7, #3]
    7e62:	7efb      	ldrb	r3, [r7, #27]
    7e64:	4611      	mov	r1, r2
    7e66:	4618      	mov	r0, r3
    7e68:	4b14      	ldr	r3, [pc, #80]	; (7ebc <_usb_d_dev_handle_trfail+0x1c0>)
    7e6a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    7e6c:	78fb      	ldrb	r3, [r7, #3]
    7e6e:	f107 0220 	add.w	r2, r7, #32
    7e72:	4413      	add	r3, r2
    7e74:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    7e78:	7efb      	ldrb	r3, [r7, #27]
    7e7a:	4619      	mov	r1, r3
    7e7c:	69f8      	ldr	r0, [r7, #28]
    7e7e:	4b0c      	ldr	r3, [pc, #48]	; (7eb0 <_usb_d_dev_handle_trfail+0x1b4>)
    7e80:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    7e82:	78fb      	ldrb	r3, [r7, #3]
    7e84:	f107 0220 	add.w	r2, r7, #32
    7e88:	4413      	add	r3, r2
    7e8a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    7e8e:	7efb      	ldrb	r3, [r7, #27]
    7e90:	4619      	mov	r1, r3
    7e92:	69f8      	ldr	r0, [r7, #28]
    7e94:	4b07      	ldr	r3, [pc, #28]	; (7eb4 <_usb_d_dev_handle_trfail+0x1b8>)
    7e96:	4798      	blx	r3
}
    7e98:	bf00      	nop
    7e9a:	3720      	adds	r7, #32
    7e9c:	46bd      	mov	sp, r7
    7e9e:	bd80      	pop	{r7, pc}
    7ea0:	000090f0 	.word	0x000090f0
    7ea4:	200005cc 	.word	0x200005cc
    7ea8:	00006b55 	.word	0x00006b55
    7eac:	00006b25 	.word	0x00006b25
    7eb0:	000069f9 	.word	0x000069f9
    7eb4:	00006af9 	.word	0x00006af9
    7eb8:	00008509 	.word	0x00008509
    7ebc:	00007355 	.word	0x00007355

00007ec0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    7ec0:	b580      	push	{r7, lr}
    7ec2:	b082      	sub	sp, #8
    7ec4:	af00      	add	r7, sp, #0
    7ec6:	6078      	str	r0, [r7, #4]
    7ec8:	460b      	mov	r3, r1
    7eca:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7ecc:	78fb      	ldrb	r3, [r7, #3]
    7ece:	f003 0310 	and.w	r3, r3, #16
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d003      	beq.n	7ede <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    7ed6:	6878      	ldr	r0, [r7, #4]
    7ed8:	4b0c      	ldr	r3, [pc, #48]	; (7f0c <_usb_d_dev_trans_setup_isr+0x4c>)
    7eda:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    7edc:	e012      	b.n	7f04 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7ede:	78fb      	ldrb	r3, [r7, #3]
    7ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7ee4:	2b00      	cmp	r3, #0
    7ee6:	d004      	beq.n	7ef2 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    7ee8:	2101      	movs	r1, #1
    7eea:	6878      	ldr	r0, [r7, #4]
    7eec:	4b08      	ldr	r3, [pc, #32]	; (7f10 <_usb_d_dev_trans_setup_isr+0x50>)
    7eee:	4798      	blx	r3
}
    7ef0:	e008      	b.n	7f04 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    7ef2:	78fb      	ldrb	r3, [r7, #3]
    7ef4:	f003 0320 	and.w	r3, r3, #32
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d003      	beq.n	7f04 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    7efc:	2100      	movs	r1, #0
    7efe:	6878      	ldr	r0, [r7, #4]
    7f00:	4b03      	ldr	r3, [pc, #12]	; (7f10 <_usb_d_dev_trans_setup_isr+0x50>)
    7f02:	4798      	blx	r3
}
    7f04:	bf00      	nop
    7f06:	3708      	adds	r7, #8
    7f08:	46bd      	mov	sp, r7
    7f0a:	bd80      	pop	{r7, pc}
    7f0c:	00007be1 	.word	0x00007be1
    7f10:	00007cb9 	.word	0x00007cb9

00007f14 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b082      	sub	sp, #8
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
    7f1c:	460b      	mov	r3, r1
    7f1e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    7f20:	78fb      	ldrb	r3, [r7, #3]
    7f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7f26:	2b00      	cmp	r3, #0
    7f28:	d004      	beq.n	7f34 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    7f2a:	2101      	movs	r1, #1
    7f2c:	6878      	ldr	r0, [r7, #4]
    7f2e:	4b1a      	ldr	r3, [pc, #104]	; (7f98 <_usb_d_dev_trans_in_isr+0x84>)
    7f30:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    7f32:	e02c      	b.n	7f8e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7f34:	78fb      	ldrb	r3, [r7, #3]
    7f36:	f003 0308 	and.w	r3, r3, #8
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d004      	beq.n	7f48 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    7f3e:	2101      	movs	r1, #1
    7f40:	6878      	ldr	r0, [r7, #4]
    7f42:	4b16      	ldr	r3, [pc, #88]	; (7f9c <_usb_d_dev_trans_in_isr+0x88>)
    7f44:	4798      	blx	r3
}
    7f46:	e022      	b.n	7f8e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    7f48:	78fb      	ldrb	r3, [r7, #3]
    7f4a:	f003 0302 	and.w	r3, r3, #2
    7f4e:	2b00      	cmp	r3, #0
    7f50:	d004      	beq.n	7f5c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    7f52:	2101      	movs	r1, #1
    7f54:	6878      	ldr	r0, [r7, #4]
    7f56:	4b12      	ldr	r3, [pc, #72]	; (7fa0 <_usb_d_dev_trans_in_isr+0x8c>)
    7f58:	4798      	blx	r3
}
    7f5a:	e018      	b.n	7f8e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	7cdb      	ldrb	r3, [r3, #19]
    7f60:	f003 0307 	and.w	r3, r3, #7
    7f64:	b2db      	uxtb	r3, r3
    7f66:	2b01      	cmp	r3, #1
    7f68:	d111      	bne.n	7f8e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    7f6a:	78fb      	ldrb	r3, [r7, #3]
    7f6c:	f003 0304 	and.w	r3, r3, #4
    7f70:	2b00      	cmp	r3, #0
    7f72:	d004      	beq.n	7f7e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    7f74:	2100      	movs	r1, #0
    7f76:	6878      	ldr	r0, [r7, #4]
    7f78:	4b08      	ldr	r3, [pc, #32]	; (7f9c <_usb_d_dev_trans_in_isr+0x88>)
    7f7a:	4798      	blx	r3
}
    7f7c:	e007      	b.n	7f8e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7f7e:	78fb      	ldrb	r3, [r7, #3]
    7f80:	f003 0310 	and.w	r3, r3, #16
    7f84:	2b00      	cmp	r3, #0
    7f86:	d002      	beq.n	7f8e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    7f88:	6878      	ldr	r0, [r7, #4]
    7f8a:	4b06      	ldr	r3, [pc, #24]	; (7fa4 <_usb_d_dev_trans_in_isr+0x90>)
    7f8c:	4798      	blx	r3
}
    7f8e:	bf00      	nop
    7f90:	3708      	adds	r7, #8
    7f92:	46bd      	mov	sp, r7
    7f94:	bd80      	pop	{r7, pc}
    7f96:	bf00      	nop
    7f98:	00007cb9 	.word	0x00007cb9
    7f9c:	00007cfd 	.word	0x00007cfd
    7fa0:	00007705 	.word	0x00007705
    7fa4:	00007be1 	.word	0x00007be1

00007fa8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    7fa8:	b580      	push	{r7, lr}
    7faa:	b082      	sub	sp, #8
    7fac:	af00      	add	r7, sp, #0
    7fae:	6078      	str	r0, [r7, #4]
    7fb0:	460b      	mov	r3, r1
    7fb2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    7fb4:	78fb      	ldrb	r3, [r7, #3]
    7fb6:	f003 0320 	and.w	r3, r3, #32
    7fba:	2b00      	cmp	r3, #0
    7fbc:	d004      	beq.n	7fc8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    7fbe:	2100      	movs	r1, #0
    7fc0:	6878      	ldr	r0, [r7, #4]
    7fc2:	4b1a      	ldr	r3, [pc, #104]	; (802c <_usb_d_dev_trans_out_isr+0x84>)
    7fc4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    7fc6:	e02c      	b.n	8022 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    7fc8:	78fb      	ldrb	r3, [r7, #3]
    7fca:	f003 0304 	and.w	r3, r3, #4
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d004      	beq.n	7fdc <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    7fd2:	2100      	movs	r1, #0
    7fd4:	6878      	ldr	r0, [r7, #4]
    7fd6:	4b16      	ldr	r3, [pc, #88]	; (8030 <_usb_d_dev_trans_out_isr+0x88>)
    7fd8:	4798      	blx	r3
}
    7fda:	e022      	b.n	8022 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    7fdc:	78fb      	ldrb	r3, [r7, #3]
    7fde:	f003 0301 	and.w	r3, r3, #1
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d004      	beq.n	7ff0 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    7fe6:	2101      	movs	r1, #1
    7fe8:	6878      	ldr	r0, [r7, #4]
    7fea:	4b12      	ldr	r3, [pc, #72]	; (8034 <_usb_d_dev_trans_out_isr+0x8c>)
    7fec:	4798      	blx	r3
}
    7fee:	e018      	b.n	8022 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	7cdb      	ldrb	r3, [r3, #19]
    7ff4:	f003 0307 	and.w	r3, r3, #7
    7ff8:	b2db      	uxtb	r3, r3
    7ffa:	2b01      	cmp	r3, #1
    7ffc:	d111      	bne.n	8022 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7ffe:	78fb      	ldrb	r3, [r7, #3]
    8000:	f003 0308 	and.w	r3, r3, #8
    8004:	2b00      	cmp	r3, #0
    8006:	d004      	beq.n	8012 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    8008:	2101      	movs	r1, #1
    800a:	6878      	ldr	r0, [r7, #4]
    800c:	4b08      	ldr	r3, [pc, #32]	; (8030 <_usb_d_dev_trans_out_isr+0x88>)
    800e:	4798      	blx	r3
}
    8010:	e007      	b.n	8022 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8012:	78fb      	ldrb	r3, [r7, #3]
    8014:	f003 0310 	and.w	r3, r3, #16
    8018:	2b00      	cmp	r3, #0
    801a:	d002      	beq.n	8022 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    801c:	6878      	ldr	r0, [r7, #4]
    801e:	4b06      	ldr	r3, [pc, #24]	; (8038 <_usb_d_dev_trans_out_isr+0x90>)
    8020:	4798      	blx	r3
}
    8022:	bf00      	nop
    8024:	3708      	adds	r7, #8
    8026:	46bd      	mov	sp, r7
    8028:	bd80      	pop	{r7, pc}
    802a:	bf00      	nop
    802c:	00007cb9 	.word	0x00007cb9
    8030:	00007cfd 	.word	0x00007cfd
    8034:	0000791d 	.word	0x0000791d
    8038:	00007be1 	.word	0x00007be1

0000803c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    803c:	b580      	push	{r7, lr}
    803e:	b084      	sub	sp, #16
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
    8044:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    8046:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    804a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    804c:	683b      	ldr	r3, [r7, #0]
    804e:	7c9b      	ldrb	r3, [r3, #18]
    8050:	f003 030f 	and.w	r3, r3, #15
    8054:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    8056:	7afb      	ldrb	r3, [r7, #11]
    8058:	2201      	movs	r2, #1
    805a:	409a      	lsls	r2, r3
    805c:	687b      	ldr	r3, [r7, #4]
    805e:	4013      	ands	r3, r2
    8060:	2b00      	cmp	r3, #0
    8062:	d03d      	beq.n	80e0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8064:	7afb      	ldrb	r3, [r7, #11]
    8066:	68fa      	ldr	r2, [r7, #12]
    8068:	3308      	adds	r3, #8
    806a:	015b      	lsls	r3, r3, #5
    806c:	4413      	add	r3, r2
    806e:	3307      	adds	r3, #7
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8074:	7afb      	ldrb	r3, [r7, #11]
    8076:	68fa      	ldr	r2, [r7, #12]
    8078:	015b      	lsls	r3, r3, #5
    807a:	4413      	add	r3, r2
    807c:	f203 1309 	addw	r3, r3, #265	; 0x109
    8080:	781b      	ldrb	r3, [r3, #0]
    8082:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    8084:	7aba      	ldrb	r2, [r7, #10]
    8086:	7a7b      	ldrb	r3, [r7, #9]
    8088:	4013      	ands	r3, r2
    808a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    808c:	7abb      	ldrb	r3, [r7, #10]
    808e:	2b00      	cmp	r3, #0
    8090:	d027      	beq.n	80e2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8092:	683b      	ldr	r3, [r7, #0]
    8094:	7cdb      	ldrb	r3, [r3, #19]
    8096:	f003 0307 	and.w	r3, r3, #7
    809a:	b2db      	uxtb	r3, r3
    809c:	2b01      	cmp	r3, #1
    809e:	d10c      	bne.n	80ba <_usb_d_dev_handle_eps+0x7e>
    80a0:	683b      	ldr	r3, [r7, #0]
    80a2:	7cdb      	ldrb	r3, [r3, #19]
    80a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    80a8:	b2db      	uxtb	r3, r3
    80aa:	2b00      	cmp	r3, #0
    80ac:	d105      	bne.n	80ba <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    80ae:	7abb      	ldrb	r3, [r7, #10]
    80b0:	4619      	mov	r1, r3
    80b2:	6838      	ldr	r0, [r7, #0]
    80b4:	4b0c      	ldr	r3, [pc, #48]	; (80e8 <_usb_d_dev_handle_eps+0xac>)
    80b6:	4798      	blx	r3
    80b8:	e013      	b.n	80e2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    80ba:	683b      	ldr	r3, [r7, #0]
    80bc:	7cdb      	ldrb	r3, [r3, #19]
    80be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    80c2:	b2db      	uxtb	r3, r3
    80c4:	2b00      	cmp	r3, #0
    80c6:	d005      	beq.n	80d4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    80c8:	7abb      	ldrb	r3, [r7, #10]
    80ca:	4619      	mov	r1, r3
    80cc:	6838      	ldr	r0, [r7, #0]
    80ce:	4b07      	ldr	r3, [pc, #28]	; (80ec <_usb_d_dev_handle_eps+0xb0>)
    80d0:	4798      	blx	r3
    80d2:	e006      	b.n	80e2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    80d4:	7abb      	ldrb	r3, [r7, #10]
    80d6:	4619      	mov	r1, r3
    80d8:	6838      	ldr	r0, [r7, #0]
    80da:	4b05      	ldr	r3, [pc, #20]	; (80f0 <_usb_d_dev_handle_eps+0xb4>)
    80dc:	4798      	blx	r3
    80de:	e000      	b.n	80e2 <_usb_d_dev_handle_eps+0xa6>
		return;
    80e0:	bf00      	nop
		}
	}
}
    80e2:	3710      	adds	r7, #16
    80e4:	46bd      	mov	sp, r7
    80e6:	bd80      	pop	{r7, pc}
    80e8:	00007ec1 	.word	0x00007ec1
    80ec:	00007f15 	.word	0x00007f15
    80f0:	00007fa9 	.word	0x00007fa9

000080f4 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    80f4:	b580      	push	{r7, lr}
    80f6:	b084      	sub	sp, #16
    80f8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    80fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    80fe:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8100:	68bb      	ldr	r3, [r7, #8]
    8102:	8c1b      	ldrh	r3, [r3, #32]
    8104:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    8106:	88fb      	ldrh	r3, [r7, #6]
    8108:	2b00      	cmp	r3, #0
    810a:	d104      	bne.n	8116 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    810c:	4b13      	ldr	r3, [pc, #76]	; (815c <_usb_d_dev_handler+0x68>)
    810e:	4798      	blx	r3
    8110:	4603      	mov	r3, r0
    8112:	2b00      	cmp	r3, #0
    8114:	d11e      	bne.n	8154 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    8116:	2300      	movs	r3, #0
    8118:	73fb      	strb	r3, [r7, #15]
    811a:	e017      	b.n	814c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    811c:	7bfa      	ldrb	r2, [r7, #15]
    811e:	4613      	mov	r3, r2
    8120:	009b      	lsls	r3, r3, #2
    8122:	4413      	add	r3, r2
    8124:	009b      	lsls	r3, r3, #2
    8126:	3310      	adds	r3, #16
    8128:	4a0d      	ldr	r2, [pc, #52]	; (8160 <_usb_d_dev_handler+0x6c>)
    812a:	4413      	add	r3, r2
    812c:	3304      	adds	r3, #4
    812e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    8130:	683b      	ldr	r3, [r7, #0]
    8132:	7c9b      	ldrb	r3, [r3, #18]
    8134:	2bff      	cmp	r3, #255	; 0xff
    8136:	d005      	beq.n	8144 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    8138:	88fb      	ldrh	r3, [r7, #6]
    813a:	6839      	ldr	r1, [r7, #0]
    813c:	4618      	mov	r0, r3
    813e:	4b09      	ldr	r3, [pc, #36]	; (8164 <_usb_d_dev_handler+0x70>)
    8140:	4798      	blx	r3
    8142:	e000      	b.n	8146 <_usb_d_dev_handler+0x52>
			continue;
    8144:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    8146:	7bfb      	ldrb	r3, [r7, #15]
    8148:	3301      	adds	r3, #1
    814a:	73fb      	strb	r3, [r7, #15]
    814c:	7bfb      	ldrb	r3, [r7, #15]
    814e:	2b08      	cmp	r3, #8
    8150:	d9e4      	bls.n	811c <_usb_d_dev_handler+0x28>
    8152:	e000      	b.n	8156 <_usb_d_dev_handler+0x62>
			return;
    8154:	bf00      	nop
	}
}
    8156:	3710      	adds	r7, #16
    8158:	46bd      	mov	sp, r7
    815a:	bd80      	pop	{r7, pc}
    815c:	0000764d 	.word	0x0000764d
    8160:	20000504 	.word	0x20000504
    8164:	0000803d 	.word	0x0000803d

00008168 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    8168:	b580      	push	{r7, lr}
    816a:	b082      	sub	sp, #8
    816c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    816e:	2300      	movs	r3, #0
    8170:	71fb      	strb	r3, [r7, #7]
    8172:	e023      	b.n	81bc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8174:	79fa      	ldrb	r2, [r7, #7]
    8176:	4613      	mov	r3, r2
    8178:	009b      	lsls	r3, r3, #2
    817a:	4413      	add	r3, r2
    817c:	009b      	lsls	r3, r3, #2
    817e:	3310      	adds	r3, #16
    8180:	4a14      	ldr	r2, [pc, #80]	; (81d4 <_usb_d_dev_reset_epts+0x6c>)
    8182:	4413      	add	r3, r2
    8184:	3304      	adds	r3, #4
    8186:	2103      	movs	r1, #3
    8188:	4618      	mov	r0, r3
    818a:	4b13      	ldr	r3, [pc, #76]	; (81d8 <_usb_d_dev_reset_epts+0x70>)
    818c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    818e:	79fa      	ldrb	r2, [r7, #7]
    8190:	4910      	ldr	r1, [pc, #64]	; (81d4 <_usb_d_dev_reset_epts+0x6c>)
    8192:	4613      	mov	r3, r2
    8194:	009b      	lsls	r3, r3, #2
    8196:	4413      	add	r3, r2
    8198:	009b      	lsls	r3, r3, #2
    819a:	440b      	add	r3, r1
    819c:	3326      	adds	r3, #38	; 0x26
    819e:	22ff      	movs	r2, #255	; 0xff
    81a0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    81a2:	79fa      	ldrb	r2, [r7, #7]
    81a4:	490b      	ldr	r1, [pc, #44]	; (81d4 <_usb_d_dev_reset_epts+0x6c>)
    81a6:	4613      	mov	r3, r2
    81a8:	009b      	lsls	r3, r3, #2
    81aa:	4413      	add	r3, r2
    81ac:	009b      	lsls	r3, r3, #2
    81ae:	440b      	add	r3, r1
    81b0:	3327      	adds	r3, #39	; 0x27
    81b2:	2200      	movs	r2, #0
    81b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    81b6:	79fb      	ldrb	r3, [r7, #7]
    81b8:	3301      	adds	r3, #1
    81ba:	71fb      	strb	r3, [r7, #7]
    81bc:	79fb      	ldrb	r3, [r7, #7]
    81be:	2b08      	cmp	r3, #8
    81c0:	d9d8      	bls.n	8174 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    81c2:	2260      	movs	r2, #96	; 0x60
    81c4:	2100      	movs	r1, #0
    81c6:	4805      	ldr	r0, [pc, #20]	; (81dc <_usb_d_dev_reset_epts+0x74>)
    81c8:	4b05      	ldr	r3, [pc, #20]	; (81e0 <_usb_d_dev_reset_epts+0x78>)
    81ca:	4798      	blx	r3
}
    81cc:	bf00      	nop
    81ce:	3708      	adds	r7, #8
    81d0:	46bd      	mov	sp, r7
    81d2:	bd80      	pop	{r7, pc}
    81d4:	20000504 	.word	0x20000504
    81d8:	000084c1 	.word	0x000084c1
    81dc:	200005cc 	.word	0x200005cc
    81e0:	00008db3 	.word	0x00008db3

000081e4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    81e4:	b580      	push	{r7, lr}
    81e6:	b084      	sub	sp, #16
    81e8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    81ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    81ee:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    81f0:	2301      	movs	r3, #1
    81f2:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    81f4:	2304      	movs	r3, #4
    81f6:	713b      	strb	r3, [r7, #4]
    81f8:	2300      	movs	r3, #0
    81fa:	717b      	strb	r3, [r7, #5]
    81fc:	2300      	movs	r3, #0
    81fe:	71bb      	strb	r3, [r7, #6]
    8200:	2300      	movs	r3, #0
    8202:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8204:	2101      	movs	r1, #1
    8206:	68f8      	ldr	r0, [r7, #12]
    8208:	4b26      	ldr	r3, [pc, #152]	; (82a4 <_usb_d_dev_init+0xc0>)
    820a:	4798      	blx	r3
    820c:	4603      	mov	r3, r0
    820e:	f083 0301 	eor.w	r3, r3, #1
    8212:	b2db      	uxtb	r3, r3
    8214:	2b00      	cmp	r3, #0
    8216:	d011      	beq.n	823c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    8218:	2102      	movs	r1, #2
    821a:	68f8      	ldr	r0, [r7, #12]
    821c:	4b22      	ldr	r3, [pc, #136]	; (82a8 <_usb_d_dev_init+0xc4>)
    821e:	4798      	blx	r3
    8220:	4603      	mov	r3, r0
    8222:	2b00      	cmp	r3, #0
    8224:	d006      	beq.n	8234 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    8226:	68f8      	ldr	r0, [r7, #12]
    8228:	4b20      	ldr	r3, [pc, #128]	; (82ac <_usb_d_dev_init+0xc8>)
    822a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    822c:	2102      	movs	r1, #2
    822e:	68f8      	ldr	r0, [r7, #12]
    8230:	4b1f      	ldr	r3, [pc, #124]	; (82b0 <_usb_d_dev_init+0xcc>)
    8232:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    8234:	2101      	movs	r1, #1
    8236:	68f8      	ldr	r0, [r7, #12]
    8238:	4b1e      	ldr	r3, [pc, #120]	; (82b4 <_usb_d_dev_init+0xd0>)
    823a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    823c:	2101      	movs	r1, #1
    823e:	68f8      	ldr	r0, [r7, #12]
    8240:	4b1b      	ldr	r3, [pc, #108]	; (82b0 <_usb_d_dev_init+0xcc>)
    8242:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8244:	4b1c      	ldr	r3, [pc, #112]	; (82b8 <_usb_d_dev_init+0xd4>)
    8246:	4a1d      	ldr	r2, [pc, #116]	; (82bc <_usb_d_dev_init+0xd8>)
    8248:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    824a:	4b1b      	ldr	r3, [pc, #108]	; (82b8 <_usb_d_dev_init+0xd4>)
    824c:	4a1b      	ldr	r2, [pc, #108]	; (82bc <_usb_d_dev_init+0xd8>)
    824e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8250:	4b19      	ldr	r3, [pc, #100]	; (82b8 <_usb_d_dev_init+0xd4>)
    8252:	4a1a      	ldr	r2, [pc, #104]	; (82bc <_usb_d_dev_init+0xd8>)
    8254:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8256:	4b18      	ldr	r3, [pc, #96]	; (82b8 <_usb_d_dev_init+0xd4>)
    8258:	4a18      	ldr	r2, [pc, #96]	; (82bc <_usb_d_dev_init+0xd8>)
    825a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    825c:	4b16      	ldr	r3, [pc, #88]	; (82b8 <_usb_d_dev_init+0xd4>)
    825e:	4a17      	ldr	r2, [pc, #92]	; (82bc <_usb_d_dev_init+0xd8>)
    8260:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    8262:	4b17      	ldr	r3, [pc, #92]	; (82c0 <_usb_d_dev_init+0xdc>)
    8264:	4798      	blx	r3

	_usb_load_calib();
    8266:	4b17      	ldr	r3, [pc, #92]	; (82c4 <_usb_d_dev_init+0xe0>)
    8268:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    826a:	2104      	movs	r1, #4
    826c:	68f8      	ldr	r0, [r7, #12]
    826e:	4b11      	ldr	r3, [pc, #68]	; (82b4 <_usb_d_dev_init+0xd0>)
    8270:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    8272:	4b15      	ldr	r3, [pc, #84]	; (82c8 <_usb_d_dev_init+0xe4>)
    8274:	4619      	mov	r1, r3
    8276:	68f8      	ldr	r0, [r7, #12]
    8278:	4b14      	ldr	r3, [pc, #80]	; (82cc <_usb_d_dev_init+0xe8>)
    827a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    827c:	7afb      	ldrb	r3, [r7, #11]
    827e:	f107 0210 	add.w	r2, r7, #16
    8282:	4413      	add	r3, r2
    8284:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    8288:	f043 0301 	orr.w	r3, r3, #1
    828c:	b2db      	uxtb	r3, r3
    828e:	b29b      	uxth	r3, r3
    8290:	4619      	mov	r1, r3
    8292:	68f8      	ldr	r0, [r7, #12]
    8294:	4b0e      	ldr	r3, [pc, #56]	; (82d0 <_usb_d_dev_init+0xec>)
    8296:	4798      	blx	r3

	return ERR_NONE;
    8298:	2300      	movs	r3, #0
}
    829a:	4618      	mov	r0, r3
    829c:	3710      	adds	r7, #16
    829e:	46bd      	mov	sp, r7
    82a0:	bd80      	pop	{r7, pc}
    82a2:	bf00      	nop
    82a4:	0000696d 	.word	0x0000696d
    82a8:	00006c95 	.word	0x00006c95
    82ac:	00006c69 	.word	0x00006c69
    82b0:	00006943 	.word	0x00006943
    82b4:	00006cc5 	.word	0x00006cc5
    82b8:	20000504 	.word	0x20000504
    82bc:	00006d27 	.word	0x00006d27
    82c0:	00008169 	.word	0x00008169
    82c4:	00006d41 	.word	0x00006d41
    82c8:	200005cc 	.word	0x200005cc
    82cc:	00006d0b 	.word	0x00006d0b
    82d0:	00006ced 	.word	0x00006ced

000082d4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    82d4:	b580      	push	{r7, lr}
    82d6:	b084      	sub	sp, #16
    82d8:	af00      	add	r7, sp, #0
    82da:	6078      	str	r0, [r7, #4]
    82dc:	460b      	mov	r3, r1
    82de:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    82e0:	687b      	ldr	r3, [r7, #4]
    82e2:	7c9b      	ldrb	r3, [r3, #18]
    82e4:	f003 030f 	and.w	r3, r3, #15
    82e8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    82ea:	78fa      	ldrb	r2, [r7, #3]
    82ec:	7bfb      	ldrb	r3, [r7, #15]
    82ee:	4611      	mov	r1, r2
    82f0:	4618      	mov	r0, r3
    82f2:	4b03      	ldr	r3, [pc, #12]	; (8300 <_usb_d_dev_ep_stall_get+0x2c>)
    82f4:	4798      	blx	r3
    82f6:	4603      	mov	r3, r0
}
    82f8:	4618      	mov	r0, r3
    82fa:	3710      	adds	r7, #16
    82fc:	46bd      	mov	sp, r7
    82fe:	bd80      	pop	{r7, pc}
    8300:	00006f95 	.word	0x00006f95

00008304 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    8304:	b580      	push	{r7, lr}
    8306:	b084      	sub	sp, #16
    8308:	af00      	add	r7, sp, #0
    830a:	6078      	str	r0, [r7, #4]
    830c:	460b      	mov	r3, r1
    830e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8310:	687b      	ldr	r3, [r7, #4]
    8312:	7c9b      	ldrb	r3, [r3, #18]
    8314:	f003 030f 	and.w	r3, r3, #15
    8318:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    831a:	78f9      	ldrb	r1, [r7, #3]
    831c:	7bfb      	ldrb	r3, [r7, #15]
    831e:	2201      	movs	r2, #1
    8320:	4618      	mov	r0, r3
    8322:	4b0a      	ldr	r3, [pc, #40]	; (834c <_usb_d_dev_ep_stall_set+0x48>)
    8324:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8326:	78fb      	ldrb	r3, [r7, #3]
    8328:	2220      	movs	r2, #32
    832a:	409a      	lsls	r2, r3
    832c:	7bfb      	ldrb	r3, [r7, #15]
    832e:	4611      	mov	r1, r2
    8330:	4618      	mov	r0, r3
    8332:	4b07      	ldr	r3, [pc, #28]	; (8350 <_usb_d_dev_ep_stall_set+0x4c>)
    8334:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    8336:	687a      	ldr	r2, [r7, #4]
    8338:	7cd3      	ldrb	r3, [r2, #19]
    833a:	f043 0308 	orr.w	r3, r3, #8
    833e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    8340:	2300      	movs	r3, #0
}
    8342:	4618      	mov	r0, r3
    8344:	3710      	adds	r7, #16
    8346:	46bd      	mov	sp, r7
    8348:	bd80      	pop	{r7, pc}
    834a:	bf00      	nop
    834c:	00006f3d 	.word	0x00006f3d
    8350:	00006ebd 	.word	0x00006ebd

00008354 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    8354:	b580      	push	{r7, lr}
    8356:	b084      	sub	sp, #16
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
    835c:	460b      	mov	r3, r1
    835e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	7c9b      	ldrb	r3, [r3, #18]
    8364:	f003 030f 	and.w	r3, r3, #15
    8368:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    836a:	78fa      	ldrb	r2, [r7, #3]
    836c:	7bfb      	ldrb	r3, [r7, #15]
    836e:	4611      	mov	r1, r2
    8370:	4618      	mov	r0, r3
    8372:	4b28      	ldr	r3, [pc, #160]	; (8414 <_usb_d_dev_ep_stall_clr+0xc0>)
    8374:	4798      	blx	r3
    8376:	4603      	mov	r3, r0
    8378:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    837a:	7bbb      	ldrb	r3, [r7, #14]
    837c:	f083 0301 	eor.w	r3, r3, #1
    8380:	b2db      	uxtb	r3, r3
    8382:	2b00      	cmp	r3, #0
    8384:	d001      	beq.n	838a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    8386:	2300      	movs	r3, #0
    8388:	e040      	b.n	840c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    838a:	78f9      	ldrb	r1, [r7, #3]
    838c:	7bfb      	ldrb	r3, [r7, #15]
    838e:	2200      	movs	r2, #0
    8390:	4618      	mov	r0, r3
    8392:	4b21      	ldr	r3, [pc, #132]	; (8418 <_usb_d_dev_ep_stall_clr+0xc4>)
    8394:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8396:	78fb      	ldrb	r3, [r7, #3]
    8398:	2220      	movs	r2, #32
    839a:	409a      	lsls	r2, r3
    839c:	7bfb      	ldrb	r3, [r7, #15]
    839e:	4611      	mov	r1, r2
    83a0:	4618      	mov	r0, r3
    83a2:	4b1e      	ldr	r3, [pc, #120]	; (841c <_usb_d_dev_ep_stall_clr+0xc8>)
    83a4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    83a6:	78fa      	ldrb	r2, [r7, #3]
    83a8:	7bfb      	ldrb	r3, [r7, #15]
    83aa:	4611      	mov	r1, r2
    83ac:	4618      	mov	r0, r3
    83ae:	4b1c      	ldr	r3, [pc, #112]	; (8420 <_usb_d_dev_ep_stall_clr+0xcc>)
    83b0:	4798      	blx	r3
    83b2:	4603      	mov	r3, r0
    83b4:	2b00      	cmp	r3, #0
    83b6:	d00b      	beq.n	83d0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    83b8:	78fa      	ldrb	r2, [r7, #3]
    83ba:	7bfb      	ldrb	r3, [r7, #15]
    83bc:	4611      	mov	r1, r2
    83be:	4618      	mov	r0, r3
    83c0:	4b18      	ldr	r3, [pc, #96]	; (8424 <_usb_d_dev_ep_stall_clr+0xd0>)
    83c2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    83c4:	78f9      	ldrb	r1, [r7, #3]
    83c6:	7bfb      	ldrb	r3, [r7, #15]
    83c8:	2200      	movs	r2, #0
    83ca:	4618      	mov	r0, r3
    83cc:	4b16      	ldr	r3, [pc, #88]	; (8428 <_usb_d_dev_ep_stall_clr+0xd4>)
    83ce:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    83d0:	687b      	ldr	r3, [r7, #4]
    83d2:	7cdb      	ldrb	r3, [r3, #19]
    83d4:	f003 0307 	and.w	r3, r3, #7
    83d8:	b2db      	uxtb	r3, r3
    83da:	2b01      	cmp	r3, #1
    83dc:	d110      	bne.n	8400 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    83de:	7bfb      	ldrb	r3, [r7, #15]
    83e0:	4619      	mov	r1, r3
    83e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    83e6:	4b11      	ldr	r3, [pc, #68]	; (842c <_usb_d_dev_ep_stall_clr+0xd8>)
    83e8:	4798      	blx	r3
    83ea:	4603      	mov	r3, r0
    83ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
    83f0:	2b00      	cmp	r3, #0
    83f2:	d10a      	bne.n	840a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    83f4:	687a      	ldr	r2, [r7, #4]
    83f6:	7cd3      	ldrb	r3, [r2, #19]
    83f8:	f36f 03c3 	bfc	r3, #3, #1
    83fc:	74d3      	strb	r3, [r2, #19]
    83fe:	e004      	b.n	840a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    8400:	687a      	ldr	r2, [r7, #4]
    8402:	7cd3      	ldrb	r3, [r2, #19]
    8404:	f36f 03c3 	bfc	r3, #3, #1
    8408:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    840a:	2300      	movs	r3, #0
}
    840c:	4618      	mov	r0, r3
    840e:	3710      	adds	r7, #16
    8410:	46bd      	mov	sp, r7
    8412:	bd80      	pop	{r7, pc}
    8414:	00006f95 	.word	0x00006f95
    8418:	00006f3d 	.word	0x00006f3d
    841c:	00006ee5 	.word	0x00006ee5
    8420:	00006fd9 	.word	0x00006fd9
    8424:	0000701d 	.word	0x0000701d
    8428:	00007109 	.word	0x00007109
    842c:	00006a51 	.word	0x00006a51

00008430 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    8430:	b580      	push	{r7, lr}
    8432:	b086      	sub	sp, #24
    8434:	af00      	add	r7, sp, #0
    8436:	4603      	mov	r3, r0
    8438:	460a      	mov	r2, r1
    843a:	71fb      	strb	r3, [r7, #7]
    843c:	4613      	mov	r3, r2
    843e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    8440:	79fb      	ldrb	r3, [r7, #7]
    8442:	f003 030f 	and.w	r3, r3, #15
    8446:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    8448:	79fb      	ldrb	r3, [r7, #7]
    844a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    844e:	2b00      	cmp	r3, #0
    8450:	bf14      	ite	ne
    8452:	2301      	movne	r3, #1
    8454:	2300      	moveq	r3, #0
    8456:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    8458:	7cba      	ldrb	r2, [r7, #18]
    845a:	7cfb      	ldrb	r3, [r7, #19]
    845c:	4611      	mov	r1, r2
    845e:	4618      	mov	r0, r3
    8460:	4b13      	ldr	r3, [pc, #76]	; (84b0 <_usb_d_dev_ep_stall+0x80>)
    8462:	4798      	blx	r3
    8464:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    8466:	7cfb      	ldrb	r3, [r7, #19]
    8468:	2b02      	cmp	r3, #2
    846a:	d902      	bls.n	8472 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    846c:	f06f 0311 	mvn.w	r3, #17
    8470:	e01a      	b.n	84a8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    8472:	79bb      	ldrb	r3, [r7, #6]
    8474:	2b01      	cmp	r3, #1
    8476:	d106      	bne.n	8486 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    8478:	7cbb      	ldrb	r3, [r7, #18]
    847a:	4619      	mov	r1, r3
    847c:	68f8      	ldr	r0, [r7, #12]
    847e:	4b0d      	ldr	r3, [pc, #52]	; (84b4 <_usb_d_dev_ep_stall+0x84>)
    8480:	4798      	blx	r3
    8482:	6178      	str	r0, [r7, #20]
    8484:	e00f      	b.n	84a6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8486:	79bb      	ldrb	r3, [r7, #6]
    8488:	2b00      	cmp	r3, #0
    848a:	d106      	bne.n	849a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    848c:	7cbb      	ldrb	r3, [r7, #18]
    848e:	4619      	mov	r1, r3
    8490:	68f8      	ldr	r0, [r7, #12]
    8492:	4b09      	ldr	r3, [pc, #36]	; (84b8 <_usb_d_dev_ep_stall+0x88>)
    8494:	4798      	blx	r3
    8496:	6178      	str	r0, [r7, #20]
    8498:	e005      	b.n	84a6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    849a:	7cbb      	ldrb	r3, [r7, #18]
    849c:	4619      	mov	r1, r3
    849e:	68f8      	ldr	r0, [r7, #12]
    84a0:	4b06      	ldr	r3, [pc, #24]	; (84bc <_usb_d_dev_ep_stall+0x8c>)
    84a2:	4798      	blx	r3
    84a4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    84a6:	697b      	ldr	r3, [r7, #20]
}
    84a8:	4618      	mov	r0, r3
    84aa:	3718      	adds	r7, #24
    84ac:	46bd      	mov	sp, r7
    84ae:	bd80      	pop	{r7, pc}
    84b0:	0000743d 	.word	0x0000743d
    84b4:	00008305 	.word	0x00008305
    84b8:	00008355 	.word	0x00008355
    84bc:	000082d5 	.word	0x000082d5

000084c0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    84c0:	b580      	push	{r7, lr}
    84c2:	b082      	sub	sp, #8
    84c4:	af00      	add	r7, sp, #0
    84c6:	6078      	str	r0, [r7, #4]
    84c8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    84ca:	687b      	ldr	r3, [r7, #4]
    84cc:	7c9b      	ldrb	r3, [r3, #18]
    84ce:	2bff      	cmp	r3, #255	; 0xff
    84d0:	d014      	beq.n	84fc <_usb_d_dev_trans_done+0x3c>
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	7cdb      	ldrb	r3, [r3, #19]
    84d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    84da:	b2db      	uxtb	r3, r3
    84dc:	2b00      	cmp	r3, #0
    84de:	d00d      	beq.n	84fc <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    84e0:	687a      	ldr	r2, [r7, #4]
    84e2:	7cd3      	ldrb	r3, [r2, #19]
    84e4:	f36f 1386 	bfc	r3, #6, #1
    84e8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    84ea:	4b06      	ldr	r3, [pc, #24]	; (8504 <_usb_d_dev_trans_done+0x44>)
    84ec:	691b      	ldr	r3, [r3, #16]
    84ee:	687a      	ldr	r2, [r7, #4]
    84f0:	7c90      	ldrb	r0, [r2, #18]
    84f2:	687a      	ldr	r2, [r7, #4]
    84f4:	6892      	ldr	r2, [r2, #8]
    84f6:	6839      	ldr	r1, [r7, #0]
    84f8:	4798      	blx	r3
    84fa:	e000      	b.n	84fe <_usb_d_dev_trans_done+0x3e>
		return;
    84fc:	bf00      	nop
}
    84fe:	3708      	adds	r7, #8
    8500:	46bd      	mov	sp, r7
    8502:	bd80      	pop	{r7, pc}
    8504:	20000504 	.word	0x20000504

00008508 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8508:	b580      	push	{r7, lr}
    850a:	b086      	sub	sp, #24
    850c:	af00      	add	r7, sp, #0
    850e:	60f8      	str	r0, [r7, #12]
    8510:	460b      	mov	r3, r1
    8512:	607a      	str	r2, [r7, #4]
    8514:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8516:	68fb      	ldr	r3, [r7, #12]
    8518:	7c9b      	ldrb	r3, [r3, #18]
    851a:	f003 030f 	and.w	r3, r3, #15
    851e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    8520:	4b1f      	ldr	r3, [pc, #124]	; (85a0 <_usb_d_dev_trans_stop+0x98>)
    8522:	881b      	ldrh	r3, [r3, #0]
    8524:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8526:	68fb      	ldr	r3, [r7, #12]
    8528:	7c9b      	ldrb	r3, [r3, #18]
    852a:	2bff      	cmp	r3, #255	; 0xff
    852c:	d033      	beq.n	8596 <_usb_d_dev_trans_stop+0x8e>
    852e:	68fb      	ldr	r3, [r7, #12]
    8530:	7cdb      	ldrb	r3, [r3, #19]
    8532:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8536:	b2db      	uxtb	r3, r3
    8538:	2b00      	cmp	r3, #0
    853a:	d02c      	beq.n	8596 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    853c:	7afb      	ldrb	r3, [r7, #11]
    853e:	2b00      	cmp	r3, #0
    8540:	d006      	beq.n	8550 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    8542:	7dfb      	ldrb	r3, [r7, #23]
    8544:	2200      	movs	r2, #0
    8546:	2101      	movs	r1, #1
    8548:	4618      	mov	r0, r3
    854a:	4b16      	ldr	r3, [pc, #88]	; (85a4 <_usb_d_dev_trans_stop+0x9c>)
    854c:	4798      	blx	r3
    854e:	e005      	b.n	855c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    8550:	7dfb      	ldrb	r3, [r7, #23]
    8552:	2200      	movs	r2, #0
    8554:	2100      	movs	r1, #0
    8556:	4618      	mov	r0, r3
    8558:	4b13      	ldr	r3, [pc, #76]	; (85a8 <_usb_d_dev_trans_stop+0xa0>)
    855a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    855c:	7afb      	ldrb	r3, [r7, #11]
    855e:	f107 0218 	add.w	r2, r7, #24
    8562:	4413      	add	r3, r2
    8564:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    8568:	461a      	mov	r2, r3
    856a:	7dfb      	ldrb	r3, [r7, #23]
    856c:	4611      	mov	r1, r2
    856e:	4618      	mov	r0, r3
    8570:	4b0e      	ldr	r3, [pc, #56]	; (85ac <_usb_d_dev_trans_stop+0xa4>)
    8572:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    8574:	7afb      	ldrb	r3, [r7, #11]
    8576:	f107 0218 	add.w	r2, r7, #24
    857a:	4413      	add	r3, r2
    857c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    8580:	461a      	mov	r2, r3
    8582:	7dfb      	ldrb	r3, [r7, #23]
    8584:	4611      	mov	r1, r2
    8586:	4618      	mov	r0, r3
    8588:	4b09      	ldr	r3, [pc, #36]	; (85b0 <_usb_d_dev_trans_stop+0xa8>)
    858a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    858c:	6879      	ldr	r1, [r7, #4]
    858e:	68f8      	ldr	r0, [r7, #12]
    8590:	4b08      	ldr	r3, [pc, #32]	; (85b4 <_usb_d_dev_trans_stop+0xac>)
    8592:	4798      	blx	r3
    8594:	e000      	b.n	8598 <_usb_d_dev_trans_stop+0x90>
		return;
    8596:	bf00      	nop
}
    8598:	3718      	adds	r7, #24
    859a:	46bd      	mov	sp, r7
    859c:	bd80      	pop	{r7, pc}
    859e:	bf00      	nop
    85a0:	000090f4 	.word	0x000090f4
    85a4:	0000738d 	.word	0x0000738d
    85a8:	000073e5 	.word	0x000073e5
    85ac:	00006e95 	.word	0x00006e95
    85b0:	00006ee5 	.word	0x00006ee5
    85b4:	000084c1 	.word	0x000084c1

000085b8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    85b8:	b580      	push	{r7, lr}
    85ba:	b086      	sub	sp, #24
    85bc:	af00      	add	r7, sp, #0
    85be:	4603      	mov	r3, r0
    85c0:	6039      	str	r1, [r7, #0]
    85c2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    85c4:	79fb      	ldrb	r3, [r7, #7]
    85c6:	f003 030f 	and.w	r3, r3, #15
    85ca:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    85cc:	7dfb      	ldrb	r3, [r7, #23]
    85ce:	015b      	lsls	r3, r3, #5
    85d0:	4a1e      	ldr	r2, [pc, #120]	; (864c <_usb_d_dev_ep_read_req+0x94>)
    85d2:	4413      	add	r3, r2
    85d4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    85d6:	693b      	ldr	r3, [r7, #16]
    85d8:	681b      	ldr	r3, [r3, #0]
    85da:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    85dc:	693b      	ldr	r3, [r7, #16]
    85de:	685b      	ldr	r3, [r3, #4]
    85e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    85e4:	b29b      	uxth	r3, r3
    85e6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    85e8:	7dfb      	ldrb	r3, [r7, #23]
    85ea:	2b02      	cmp	r3, #2
    85ec:	d802      	bhi.n	85f4 <_usb_d_dev_ep_read_req+0x3c>
    85ee:	683b      	ldr	r3, [r7, #0]
    85f0:	2b00      	cmp	r3, #0
    85f2:	d102      	bne.n	85fa <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    85f4:	f06f 0311 	mvn.w	r3, #17
    85f8:	e023      	b.n	8642 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    85fa:	7dfb      	ldrb	r3, [r7, #23]
    85fc:	4618      	mov	r0, r3
    85fe:	4b14      	ldr	r3, [pc, #80]	; (8650 <_usb_d_dev_ep_read_req+0x98>)
    8600:	4798      	blx	r3
    8602:	4603      	mov	r3, r0
    8604:	f083 0301 	eor.w	r3, r3, #1
    8608:	b2db      	uxtb	r3, r3
    860a:	2b00      	cmp	r3, #0
    860c:	d002      	beq.n	8614 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    860e:	f06f 0312 	mvn.w	r3, #18
    8612:	e016      	b.n	8642 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    8614:	7dfb      	ldrb	r3, [r7, #23]
    8616:	4618      	mov	r0, r3
    8618:	4b0e      	ldr	r3, [pc, #56]	; (8654 <_usb_d_dev_ep_read_req+0x9c>)
    861a:	4798      	blx	r3
    861c:	4603      	mov	r3, r0
    861e:	f083 0301 	eor.w	r3, r3, #1
    8622:	b2db      	uxtb	r3, r3
    8624:	2b00      	cmp	r3, #0
    8626:	d001      	beq.n	862c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    8628:	2300      	movs	r3, #0
    862a:	e00a      	b.n	8642 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    862c:	68fb      	ldr	r3, [r7, #12]
    862e:	2208      	movs	r2, #8
    8630:	4619      	mov	r1, r3
    8632:	6838      	ldr	r0, [r7, #0]
    8634:	4b08      	ldr	r3, [pc, #32]	; (8658 <_usb_d_dev_ep_read_req+0xa0>)
    8636:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    8638:	7dfb      	ldrb	r3, [r7, #23]
    863a:	4618      	mov	r0, r3
    863c:	4b07      	ldr	r3, [pc, #28]	; (865c <_usb_d_dev_ep_read_req+0xa4>)
    863e:	4798      	blx	r3

	return bytes;
    8640:	897b      	ldrh	r3, [r7, #10]
}
    8642:	4618      	mov	r0, r3
    8644:	3718      	adds	r7, #24
    8646:	46bd      	mov	sp, r7
    8648:	bd80      	pop	{r7, pc}
    864a:	bf00      	nop
    864c:	200005cc 	.word	0x200005cc
    8650:	00006f0d 	.word	0x00006f0d
    8654:	000070b9 	.word	0x000070b9
    8658:	00008d9d 	.word	0x00008d9d
    865c:	000070e9 	.word	0x000070e9

00008660 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    8660:	b580      	push	{r7, lr}
    8662:	b086      	sub	sp, #24
    8664:	af00      	add	r7, sp, #0
    8666:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    8668:	687b      	ldr	r3, [r7, #4]
    866a:	7a1b      	ldrb	r3, [r3, #8]
    866c:	f003 030f 	and.w	r3, r3, #15
    8670:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	7a1b      	ldrb	r3, [r3, #8]
    8676:	f003 0380 	and.w	r3, r3, #128	; 0x80
    867a:	2b00      	cmp	r3, #0
    867c:	bf14      	ite	ne
    867e:	2301      	movne	r3, #1
    8680:	2300      	moveq	r3, #0
    8682:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    8684:	7d7a      	ldrb	r2, [r7, #21]
    8686:	7dbb      	ldrb	r3, [r7, #22]
    8688:	4611      	mov	r1, r2
    868a:	4618      	mov	r0, r3
    868c:	4b5f      	ldr	r3, [pc, #380]	; (880c <_usb_d_dev_ep_trans+0x1ac>)
    868e:	4798      	blx	r3
    8690:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8692:	693b      	ldr	r3, [r7, #16]
    8694:	8a1b      	ldrh	r3, [r3, #16]
    8696:	f240 32ff 	movw	r2, #1023	; 0x3ff
    869a:	4293      	cmp	r3, r2
    869c:	d004      	beq.n	86a8 <_usb_d_dev_ep_trans+0x48>
    869e:	693b      	ldr	r3, [r7, #16]
    86a0:	8a1b      	ldrh	r3, [r3, #16]
    86a2:	3b01      	subs	r3, #1
    86a4:	b29b      	uxth	r3, r3
    86a6:	e001      	b.n	86ac <_usb_d_dev_ep_trans+0x4c>
    86a8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    86ac:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    86ae:	687b      	ldr	r3, [r7, #4]
    86b0:	685a      	ldr	r2, [r3, #4]
    86b2:	89fb      	ldrh	r3, [r7, #14]
    86b4:	4013      	ands	r3, r2
    86b6:	2b00      	cmp	r3, #0
    86b8:	bf14      	ite	ne
    86ba:	2301      	movne	r3, #1
    86bc:	2300      	moveq	r3, #0
    86be:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    86c0:	2300      	movs	r3, #0
    86c2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    86c4:	7dbb      	ldrb	r3, [r7, #22]
    86c6:	2b02      	cmp	r3, #2
    86c8:	d902      	bls.n	86d0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    86ca:	f06f 0311 	mvn.w	r3, #17
    86ce:	e098      	b.n	8802 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	681b      	ldr	r3, [r3, #0]
    86d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    86d8:	d31a      	bcc.n	8710 <_usb_d_dev_ep_trans+0xb0>
    86da:	687b      	ldr	r3, [r7, #4]
    86dc:	681b      	ldr	r3, [r3, #0]
    86de:	461a      	mov	r2, r3
    86e0:	687b      	ldr	r3, [r7, #4]
    86e2:	685b      	ldr	r3, [r3, #4]
    86e4:	4413      	add	r3, r2
    86e6:	4a4a      	ldr	r2, [pc, #296]	; (8810 <_usb_d_dev_ep_trans+0x1b0>)
    86e8:	4293      	cmp	r3, r2
    86ea:	d811      	bhi.n	8710 <_usb_d_dev_ep_trans+0xb0>
    86ec:	687b      	ldr	r3, [r7, #4]
    86ee:	681b      	ldr	r3, [r3, #0]
    86f0:	f003 0303 	and.w	r3, r3, #3
    86f4:	2b00      	cmp	r3, #0
    86f6:	d10b      	bne.n	8710 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    86f8:	7d7b      	ldrb	r3, [r7, #21]
    86fa:	f083 0301 	eor.w	r3, r3, #1
    86fe:	b2db      	uxtb	r3, r3
    8700:	2b00      	cmp	r3, #0
    8702:	d00e      	beq.n	8722 <_usb_d_dev_ep_trans+0xc2>
    8704:	687b      	ldr	r3, [r7, #4]
    8706:	685b      	ldr	r3, [r3, #4]
    8708:	693a      	ldr	r2, [r7, #16]
    870a:	8a12      	ldrh	r2, [r2, #16]
    870c:	4293      	cmp	r3, r2
    870e:	d208      	bcs.n	8722 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    8710:	693b      	ldr	r3, [r7, #16]
    8712:	68db      	ldr	r3, [r3, #12]
    8714:	2b00      	cmp	r3, #0
    8716:	d102      	bne.n	871e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    8718:	f06f 0312 	mvn.w	r3, #18
    871c:	e071      	b.n	8802 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    871e:	2301      	movs	r3, #1
    8720:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    8722:	7d7b      	ldrb	r3, [r7, #21]
    8724:	f083 0301 	eor.w	r3, r3, #1
    8728:	b2db      	uxtb	r3, r3
    872a:	2b00      	cmp	r3, #0
    872c:	d009      	beq.n	8742 <_usb_d_dev_ep_trans+0xe2>
    872e:	7b7b      	ldrb	r3, [r7, #13]
    8730:	2b00      	cmp	r3, #0
    8732:	d006      	beq.n	8742 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    8734:	693b      	ldr	r3, [r7, #16]
    8736:	68db      	ldr	r3, [r3, #12]
    8738:	2b00      	cmp	r3, #0
    873a:	d102      	bne.n	8742 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    873c:	f06f 0311 	mvn.w	r3, #17
    8740:	e05f      	b.n	8802 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    8742:	693b      	ldr	r3, [r7, #16]
    8744:	7cdb      	ldrb	r3, [r3, #19]
    8746:	f003 0308 	and.w	r3, r3, #8
    874a:	b2db      	uxtb	r3, r3
    874c:	2b00      	cmp	r3, #0
    874e:	d001      	beq.n	8754 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    8750:	2302      	movs	r3, #2
    8752:	e056      	b.n	8802 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    8754:	f107 0308 	add.w	r3, r7, #8
    8758:	4618      	mov	r0, r3
    875a:	4b2e      	ldr	r3, [pc, #184]	; (8814 <_usb_d_dev_ep_trans+0x1b4>)
    875c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    875e:	693b      	ldr	r3, [r7, #16]
    8760:	7cdb      	ldrb	r3, [r3, #19]
    8762:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8766:	b2db      	uxtb	r3, r3
    8768:	2b00      	cmp	r3, #0
    876a:	d006      	beq.n	877a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    876c:	f107 0308 	add.w	r3, r7, #8
    8770:	4618      	mov	r0, r3
    8772:	4b29      	ldr	r3, [pc, #164]	; (8818 <_usb_d_dev_ep_trans+0x1b8>)
    8774:	4798      	blx	r3
		return USB_BUSY;
    8776:	2301      	movs	r3, #1
    8778:	e043      	b.n	8802 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    877a:	693a      	ldr	r2, [r7, #16]
    877c:	7cd3      	ldrb	r3, [r2, #19]
    877e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8782:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    8784:	f107 0308 	add.w	r3, r7, #8
    8788:	4618      	mov	r0, r3
    878a:	4b23      	ldr	r3, [pc, #140]	; (8818 <_usb_d_dev_ep_trans+0x1b8>)
    878c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    878e:	687b      	ldr	r3, [r7, #4]
    8790:	681a      	ldr	r2, [r3, #0]
    8792:	693b      	ldr	r3, [r7, #16]
    8794:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	685a      	ldr	r2, [r3, #4]
    879a:	693b      	ldr	r3, [r7, #16]
    879c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    879e:	693b      	ldr	r3, [r7, #16]
    87a0:	2200      	movs	r2, #0
    87a2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    87a4:	693a      	ldr	r2, [r7, #16]
    87a6:	7cd3      	ldrb	r3, [r2, #19]
    87a8:	7d79      	ldrb	r1, [r7, #21]
    87aa:	f361 13c7 	bfi	r3, r1, #7, #1
    87ae:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    87b0:	693a      	ldr	r2, [r7, #16]
    87b2:	7cd3      	ldrb	r3, [r2, #19]
    87b4:	7df9      	ldrb	r1, [r7, #23]
    87b6:	f361 1345 	bfi	r3, r1, #5, #1
    87ba:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	7a5b      	ldrb	r3, [r3, #9]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d007      	beq.n	87d4 <_usb_d_dev_ep_trans+0x174>
    87c4:	7b7b      	ldrb	r3, [r7, #13]
    87c6:	f083 0301 	eor.w	r3, r3, #1
    87ca:	b2db      	uxtb	r3, r3
    87cc:	2b00      	cmp	r3, #0
    87ce:	d001      	beq.n	87d4 <_usb_d_dev_ep_trans+0x174>
    87d0:	2301      	movs	r3, #1
    87d2:	e000      	b.n	87d6 <_usb_d_dev_ep_trans+0x176>
    87d4:	2300      	movs	r3, #0
    87d6:	b2db      	uxtb	r3, r3
    87d8:	f003 0301 	and.w	r3, r3, #1
    87dc:	b2d9      	uxtb	r1, r3
    87de:	693a      	ldr	r2, [r7, #16]
    87e0:	7cd3      	ldrb	r3, [r2, #19]
    87e2:	f361 1304 	bfi	r3, r1, #4, #1
    87e6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    87e8:	7d7b      	ldrb	r3, [r7, #21]
    87ea:	2b00      	cmp	r3, #0
    87ec:	d004      	beq.n	87f8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    87ee:	2100      	movs	r1, #0
    87f0:	6938      	ldr	r0, [r7, #16]
    87f2:	4b0a      	ldr	r3, [pc, #40]	; (881c <_usb_d_dev_ep_trans+0x1bc>)
    87f4:	4798      	blx	r3
    87f6:	e003      	b.n	8800 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    87f8:	2100      	movs	r1, #0
    87fa:	6938      	ldr	r0, [r7, #16]
    87fc:	4b08      	ldr	r3, [pc, #32]	; (8820 <_usb_d_dev_ep_trans+0x1c0>)
    87fe:	4798      	blx	r3
	}

	return ERR_NONE;
    8800:	2300      	movs	r3, #0
}
    8802:	4618      	mov	r0, r3
    8804:	3718      	adds	r7, #24
    8806:	46bd      	mov	sp, r7
    8808:	bd80      	pop	{r7, pc}
    880a:	bf00      	nop
    880c:	0000743d 	.word	0x0000743d
    8810:	20031fff 	.word	0x20031fff
    8814:	000015c5 	.word	0x000015c5
    8818:	000015eb 	.word	0x000015eb
    881c:	00007705 	.word	0x00007705
    8820:	0000791d 	.word	0x0000791d

00008824 <_usb_d_dev_register_ep_callback>:
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    8824:	b480      	push	{r7}
    8826:	b085      	sub	sp, #20
    8828:	af00      	add	r7, sp, #0
    882a:	4603      	mov	r3, r0
    882c:	6039      	str	r1, [r7, #0]
    882e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    8830:	683b      	ldr	r3, [r7, #0]
    8832:	2b00      	cmp	r3, #0
    8834:	d001      	beq.n	883a <_usb_d_dev_register_ep_callback+0x16>
    8836:	683b      	ldr	r3, [r7, #0]
    8838:	e000      	b.n	883c <_usb_d_dev_register_ep_callback+0x18>
    883a:	4b0e      	ldr	r3, [pc, #56]	; (8874 <_usb_d_dev_register_ep_callback+0x50>)
    883c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    883e:	79fb      	ldrb	r3, [r7, #7]
    8840:	2b00      	cmp	r3, #0
    8842:	d103      	bne.n	884c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    8844:	4a0c      	ldr	r2, [pc, #48]	; (8878 <_usb_d_dev_register_ep_callback+0x54>)
    8846:	68fb      	ldr	r3, [r7, #12]
    8848:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    884a:	e00c      	b.n	8866 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    884c:	79fb      	ldrb	r3, [r7, #7]
    884e:	2b01      	cmp	r3, #1
    8850:	d103      	bne.n	885a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    8852:	4a09      	ldr	r2, [pc, #36]	; (8878 <_usb_d_dev_register_ep_callback+0x54>)
    8854:	68fb      	ldr	r3, [r7, #12]
    8856:	60d3      	str	r3, [r2, #12]
}
    8858:	e005      	b.n	8866 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    885a:	79fb      	ldrb	r3, [r7, #7]
    885c:	2b02      	cmp	r3, #2
    885e:	d102      	bne.n	8866 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    8860:	4a05      	ldr	r2, [pc, #20]	; (8878 <_usb_d_dev_register_ep_callback+0x54>)
    8862:	68fb      	ldr	r3, [r7, #12]
    8864:	6113      	str	r3, [r2, #16]
}
    8866:	bf00      	nop
    8868:	3714      	adds	r7, #20
    886a:	46bd      	mov	sp, r7
    886c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8870:	4770      	bx	lr
    8872:	bf00      	nop
    8874:	00006d27 	.word	0x00006d27
    8878:	20000504 	.word	0x20000504

0000887c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    887c:	b580      	push	{r7, lr}
    887e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    8880:	4b01      	ldr	r3, [pc, #4]	; (8888 <USB_0_Handler+0xc>)
    8882:	4798      	blx	r3
}
    8884:	bf00      	nop
    8886:	bd80      	pop	{r7, pc}
    8888:	000080f5 	.word	0x000080f5

0000888c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    888c:	b580      	push	{r7, lr}
    888e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    8890:	4b01      	ldr	r3, [pc, #4]	; (8898 <USB_1_Handler+0xc>)
    8892:	4798      	blx	r3
}
    8894:	bf00      	nop
    8896:	bd80      	pop	{r7, pc}
    8898:	000080f5 	.word	0x000080f5

0000889c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    889c:	b580      	push	{r7, lr}
    889e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    88a0:	4b01      	ldr	r3, [pc, #4]	; (88a8 <USB_2_Handler+0xc>)
    88a2:	4798      	blx	r3
}
    88a4:	bf00      	nop
    88a6:	bd80      	pop	{r7, pc}
    88a8:	000080f5 	.word	0x000080f5

000088ac <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    88ac:	b580      	push	{r7, lr}
    88ae:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    88b0:	4b01      	ldr	r3, [pc, #4]	; (88b8 <USB_3_Handler+0xc>)
    88b2:	4798      	blx	r3
}
    88b4:	bf00      	nop
    88b6:	bd80      	pop	{r7, pc}
    88b8:	000080f5 	.word	0x000080f5

000088bc <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    88bc:	b480      	push	{r7}
    88be:	b083      	sub	sp, #12
    88c0:	af00      	add	r7, sp, #0
    88c2:	6078      	str	r0, [r7, #4]
    88c4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    88c6:	bf00      	nop
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	689a      	ldr	r2, [r3, #8]
    88cc:	683b      	ldr	r3, [r7, #0]
    88ce:	4013      	ands	r3, r2
    88d0:	2b00      	cmp	r3, #0
    88d2:	d1f9      	bne.n	88c8 <hri_wdt_wait_for_sync+0xc>
	};
}
    88d4:	bf00      	nop
    88d6:	370c      	adds	r7, #12
    88d8:	46bd      	mov	sp, r7
    88da:	f85d 7b04 	ldr.w	r7, [sp], #4
    88de:	4770      	bx	lr

000088e0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    88e0:	b580      	push	{r7, lr}
    88e2:	b084      	sub	sp, #16
    88e4:	af00      	add	r7, sp, #0
    88e6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    88e8:	210e      	movs	r1, #14
    88ea:	6878      	ldr	r0, [r7, #4]
    88ec:	4b0a      	ldr	r3, [pc, #40]	; (8918 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    88ee:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	781b      	ldrb	r3, [r3, #0]
    88f4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    88f6:	7bfb      	ldrb	r3, [r7, #15]
    88f8:	085b      	lsrs	r3, r3, #1
    88fa:	b2db      	uxtb	r3, r3
    88fc:	f003 0301 	and.w	r3, r3, #1
    8900:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8902:	7bfb      	ldrb	r3, [r7, #15]
    8904:	2b00      	cmp	r3, #0
    8906:	bf14      	ite	ne
    8908:	2301      	movne	r3, #1
    890a:	2300      	moveq	r3, #0
    890c:	b2db      	uxtb	r3, r3
}
    890e:	4618      	mov	r0, r3
    8910:	3710      	adds	r7, #16
    8912:	46bd      	mov	sp, r7
    8914:	bd80      	pop	{r7, pc}
    8916:	bf00      	nop
    8918:	000088bd 	.word	0x000088bd

0000891c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    891c:	b580      	push	{r7, lr}
    891e:	b082      	sub	sp, #8
    8920:	af00      	add	r7, sp, #0
    8922:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    8924:	687b      	ldr	r3, [r7, #4]
    8926:	781b      	ldrb	r3, [r3, #0]
    8928:	b2db      	uxtb	r3, r3
    892a:	f023 0304 	bic.w	r3, r3, #4
    892e:	b2da      	uxtb	r2, r3
    8930:	687b      	ldr	r3, [r7, #4]
    8932:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    8934:	210e      	movs	r1, #14
    8936:	6878      	ldr	r0, [r7, #4]
    8938:	4b02      	ldr	r3, [pc, #8]	; (8944 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    893a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    893c:	bf00      	nop
    893e:	3708      	adds	r7, #8
    8940:	46bd      	mov	sp, r7
    8942:	bd80      	pop	{r7, pc}
    8944:	000088bd 	.word	0x000088bd

00008948 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    8948:	b580      	push	{r7, lr}
    894a:	b084      	sub	sp, #16
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    8950:	210e      	movs	r1, #14
    8952:	6878      	ldr	r0, [r7, #4]
    8954:	4b08      	ldr	r3, [pc, #32]	; (8978 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    8956:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    8958:	687b      	ldr	r3, [r7, #4]
    895a:	781b      	ldrb	r3, [r3, #0]
    895c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    895e:	7bfb      	ldrb	r3, [r7, #15]
    8960:	09db      	lsrs	r3, r3, #7
    8962:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8964:	7bfb      	ldrb	r3, [r7, #15]
    8966:	2b00      	cmp	r3, #0
    8968:	bf14      	ite	ne
    896a:	2301      	movne	r3, #1
    896c:	2300      	moveq	r3, #0
    896e:	b2db      	uxtb	r3, r3
}
    8970:	4618      	mov	r0, r3
    8972:	3710      	adds	r7, #16
    8974:	46bd      	mov	sp, r7
    8976:	bd80      	pop	{r7, pc}
    8978:	000088bd 	.word	0x000088bd

0000897c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    897c:	b480      	push	{r7}
    897e:	b085      	sub	sp, #20
    8980:	af00      	add	r7, sp, #0
    8982:	6078      	str	r0, [r7, #4]
    8984:	460b      	mov	r3, r1
    8986:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	785b      	ldrb	r3, [r3, #1]
    898c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    898e:	7bfb      	ldrb	r3, [r7, #15]
    8990:	f023 030f 	bic.w	r3, r3, #15
    8994:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    8996:	78fb      	ldrb	r3, [r7, #3]
    8998:	f003 030f 	and.w	r3, r3, #15
    899c:	b2da      	uxtb	r2, r3
    899e:	7bfb      	ldrb	r3, [r7, #15]
    89a0:	4313      	orrs	r3, r2
    89a2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    89a4:	687b      	ldr	r3, [r7, #4]
    89a6:	7bfa      	ldrb	r2, [r7, #15]
    89a8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    89aa:	bf00      	nop
    89ac:	3714      	adds	r7, #20
    89ae:	46bd      	mov	sp, r7
    89b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    89b4:	4770      	bx	lr
	...

000089b8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    89b8:	b580      	push	{r7, lr}
    89ba:	b082      	sub	sp, #8
    89bc:	af00      	add	r7, sp, #0
    89be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    89c0:	687b      	ldr	r3, [r7, #4]
    89c2:	2b00      	cmp	r3, #0
    89c4:	d005      	beq.n	89d2 <_wdt_init+0x1a>
    89c6:	687b      	ldr	r3, [r7, #4]
    89c8:	681b      	ldr	r3, [r3, #0]
    89ca:	2b00      	cmp	r3, #0
    89cc:	d001      	beq.n	89d2 <_wdt_init+0x1a>
    89ce:	2301      	movs	r3, #1
    89d0:	e000      	b.n	89d4 <_wdt_init+0x1c>
    89d2:	2300      	movs	r3, #0
    89d4:	f003 0301 	and.w	r3, r3, #1
    89d8:	b2db      	uxtb	r3, r3
    89da:	2250      	movs	r2, #80	; 0x50
    89dc:	4913      	ldr	r1, [pc, #76]	; (8a2c <_wdt_init+0x74>)
    89de:	4618      	mov	r0, r3
    89e0:	4b13      	ldr	r3, [pc, #76]	; (8a30 <_wdt_init+0x78>)
    89e2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    89e4:	687b      	ldr	r3, [r7, #4]
    89e6:	681b      	ldr	r3, [r3, #0]
    89e8:	4618      	mov	r0, r3
    89ea:	4b12      	ldr	r3, [pc, #72]	; (8a34 <_wdt_init+0x7c>)
    89ec:	4798      	blx	r3
    89ee:	4603      	mov	r3, r0
    89f0:	2b00      	cmp	r3, #0
    89f2:	d107      	bne.n	8a04 <_wdt_init+0x4c>
    89f4:	687b      	ldr	r3, [r7, #4]
    89f6:	681b      	ldr	r3, [r3, #0]
    89f8:	4618      	mov	r0, r3
    89fa:	4b0f      	ldr	r3, [pc, #60]	; (8a38 <_wdt_init+0x80>)
    89fc:	4798      	blx	r3
    89fe:	4603      	mov	r3, r0
    8a00:	2b00      	cmp	r3, #0
    8a02:	d002      	beq.n	8a0a <_wdt_init+0x52>
		return ERR_DENIED;
    8a04:	f06f 0310 	mvn.w	r3, #16
    8a08:	e00b      	b.n	8a22 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    8a0a:	687b      	ldr	r3, [r7, #4]
    8a0c:	681b      	ldr	r3, [r3, #0]
    8a0e:	4618      	mov	r0, r3
    8a10:	4b0a      	ldr	r3, [pc, #40]	; (8a3c <_wdt_init+0x84>)
    8a12:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	681b      	ldr	r3, [r3, #0]
    8a18:	2107      	movs	r1, #7
    8a1a:	4618      	mov	r0, r3
    8a1c:	4b08      	ldr	r3, [pc, #32]	; (8a40 <_wdt_init+0x88>)
    8a1e:	4798      	blx	r3
	}

	return ERR_NONE;
    8a20:	2300      	movs	r3, #0
}
    8a22:	4618      	mov	r0, r3
    8a24:	3708      	adds	r7, #8
    8a26:	46bd      	mov	sp, r7
    8a28:	bd80      	pop	{r7, pc}
    8a2a:	bf00      	nop
    8a2c:	000090f8 	.word	0x000090f8
    8a30:	00002249 	.word	0x00002249
    8a34:	00008949 	.word	0x00008949
    8a38:	000088e1 	.word	0x000088e1
    8a3c:	0000891d 	.word	0x0000891d
    8a40:	0000897d 	.word	0x0000897d

00008a44 <hri_port_set_DIR_reg>:
{
    8a44:	b480      	push	{r7}
    8a46:	b085      	sub	sp, #20
    8a48:	af00      	add	r7, sp, #0
    8a4a:	60f8      	str	r0, [r7, #12]
    8a4c:	460b      	mov	r3, r1
    8a4e:	607a      	str	r2, [r7, #4]
    8a50:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8a52:	7afb      	ldrb	r3, [r7, #11]
    8a54:	68fa      	ldr	r2, [r7, #12]
    8a56:	01db      	lsls	r3, r3, #7
    8a58:	4413      	add	r3, r2
    8a5a:	3308      	adds	r3, #8
    8a5c:	687a      	ldr	r2, [r7, #4]
    8a5e:	601a      	str	r2, [r3, #0]
}
    8a60:	bf00      	nop
    8a62:	3714      	adds	r7, #20
    8a64:	46bd      	mov	sp, r7
    8a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a6a:	4770      	bx	lr

00008a6c <hri_port_clear_DIR_reg>:
{
    8a6c:	b480      	push	{r7}
    8a6e:	b085      	sub	sp, #20
    8a70:	af00      	add	r7, sp, #0
    8a72:	60f8      	str	r0, [r7, #12]
    8a74:	460b      	mov	r3, r1
    8a76:	607a      	str	r2, [r7, #4]
    8a78:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8a7a:	7afb      	ldrb	r3, [r7, #11]
    8a7c:	68fa      	ldr	r2, [r7, #12]
    8a7e:	01db      	lsls	r3, r3, #7
    8a80:	4413      	add	r3, r2
    8a82:	3304      	adds	r3, #4
    8a84:	687a      	ldr	r2, [r7, #4]
    8a86:	601a      	str	r2, [r3, #0]
}
    8a88:	bf00      	nop
    8a8a:	3714      	adds	r7, #20
    8a8c:	46bd      	mov	sp, r7
    8a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a92:	4770      	bx	lr

00008a94 <hri_port_set_OUT_reg>:
{
    8a94:	b480      	push	{r7}
    8a96:	b085      	sub	sp, #20
    8a98:	af00      	add	r7, sp, #0
    8a9a:	60f8      	str	r0, [r7, #12]
    8a9c:	460b      	mov	r3, r1
    8a9e:	607a      	str	r2, [r7, #4]
    8aa0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8aa2:	7afb      	ldrb	r3, [r7, #11]
    8aa4:	68fa      	ldr	r2, [r7, #12]
    8aa6:	01db      	lsls	r3, r3, #7
    8aa8:	4413      	add	r3, r2
    8aaa:	3318      	adds	r3, #24
    8aac:	687a      	ldr	r2, [r7, #4]
    8aae:	601a      	str	r2, [r3, #0]
}
    8ab0:	bf00      	nop
    8ab2:	3714      	adds	r7, #20
    8ab4:	46bd      	mov	sp, r7
    8ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aba:	4770      	bx	lr

00008abc <hri_port_clear_OUT_reg>:
{
    8abc:	b480      	push	{r7}
    8abe:	b085      	sub	sp, #20
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	60f8      	str	r0, [r7, #12]
    8ac4:	460b      	mov	r3, r1
    8ac6:	607a      	str	r2, [r7, #4]
    8ac8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8aca:	7afb      	ldrb	r3, [r7, #11]
    8acc:	68fa      	ldr	r2, [r7, #12]
    8ace:	01db      	lsls	r3, r3, #7
    8ad0:	4413      	add	r3, r2
    8ad2:	3314      	adds	r3, #20
    8ad4:	687a      	ldr	r2, [r7, #4]
    8ad6:	601a      	str	r2, [r3, #0]
}
    8ad8:	bf00      	nop
    8ada:	3714      	adds	r7, #20
    8adc:	46bd      	mov	sp, r7
    8ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae2:	4770      	bx	lr

00008ae4 <hri_port_write_WRCONFIG_reg>:
{
    8ae4:	b480      	push	{r7}
    8ae6:	b085      	sub	sp, #20
    8ae8:	af00      	add	r7, sp, #0
    8aea:	60f8      	str	r0, [r7, #12]
    8aec:	460b      	mov	r3, r1
    8aee:	607a      	str	r2, [r7, #4]
    8af0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8af2:	7afb      	ldrb	r3, [r7, #11]
    8af4:	68fa      	ldr	r2, [r7, #12]
    8af6:	01db      	lsls	r3, r3, #7
    8af8:	4413      	add	r3, r2
    8afa:	3328      	adds	r3, #40	; 0x28
    8afc:	687a      	ldr	r2, [r7, #4]
    8afe:	601a      	str	r2, [r3, #0]
}
    8b00:	bf00      	nop
    8b02:	3714      	adds	r7, #20
    8b04:	46bd      	mov	sp, r7
    8b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b0a:	4770      	bx	lr

00008b0c <_gpio_set_direction>:
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b082      	sub	sp, #8
    8b10:	af00      	add	r7, sp, #0
    8b12:	4603      	mov	r3, r0
    8b14:	6039      	str	r1, [r7, #0]
    8b16:	71fb      	strb	r3, [r7, #7]
    8b18:	4613      	mov	r3, r2
    8b1a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    8b1c:	79bb      	ldrb	r3, [r7, #6]
    8b1e:	2b01      	cmp	r3, #1
    8b20:	d01c      	beq.n	8b5c <_gpio_set_direction+0x50>
    8b22:	2b02      	cmp	r3, #2
    8b24:	d037      	beq.n	8b96 <_gpio_set_direction+0x8a>
    8b26:	2b00      	cmp	r3, #0
    8b28:	d14e      	bne.n	8bc8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    8b2a:	79fb      	ldrb	r3, [r7, #7]
    8b2c:	683a      	ldr	r2, [r7, #0]
    8b2e:	4619      	mov	r1, r3
    8b30:	482a      	ldr	r0, [pc, #168]	; (8bdc <_gpio_set_direction+0xd0>)
    8b32:	4b2b      	ldr	r3, [pc, #172]	; (8be0 <_gpio_set_direction+0xd4>)
    8b34:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    8b36:	683b      	ldr	r3, [r7, #0]
    8b38:	b29b      	uxth	r3, r3
    8b3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    8b3e:	79fb      	ldrb	r3, [r7, #7]
    8b40:	4619      	mov	r1, r3
    8b42:	4826      	ldr	r0, [pc, #152]	; (8bdc <_gpio_set_direction+0xd0>)
    8b44:	4b27      	ldr	r3, [pc, #156]	; (8be4 <_gpio_set_direction+0xd8>)
    8b46:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    8b48:	683b      	ldr	r3, [r7, #0]
    8b4a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    8b4c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    8b50:	79fb      	ldrb	r3, [r7, #7]
    8b52:	4619      	mov	r1, r3
    8b54:	4821      	ldr	r0, [pc, #132]	; (8bdc <_gpio_set_direction+0xd0>)
    8b56:	4b23      	ldr	r3, [pc, #140]	; (8be4 <_gpio_set_direction+0xd8>)
    8b58:	4798      	blx	r3
		break;
    8b5a:	e03a      	b.n	8bd2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    8b5c:	79fb      	ldrb	r3, [r7, #7]
    8b5e:	683a      	ldr	r2, [r7, #0]
    8b60:	4619      	mov	r1, r3
    8b62:	481e      	ldr	r0, [pc, #120]	; (8bdc <_gpio_set_direction+0xd0>)
    8b64:	4b1e      	ldr	r3, [pc, #120]	; (8be0 <_gpio_set_direction+0xd4>)
    8b66:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    8b68:	683b      	ldr	r3, [r7, #0]
    8b6a:	b29b      	uxth	r3, r3
    8b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8b74:	79f9      	ldrb	r1, [r7, #7]
    8b76:	461a      	mov	r2, r3
    8b78:	4818      	ldr	r0, [pc, #96]	; (8bdc <_gpio_set_direction+0xd0>)
    8b7a:	4b1a      	ldr	r3, [pc, #104]	; (8be4 <_gpio_set_direction+0xd8>)
    8b7c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    8b7e:	683b      	ldr	r3, [r7, #0]
    8b80:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    8b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    8b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8b8a:	79f9      	ldrb	r1, [r7, #7]
    8b8c:	461a      	mov	r2, r3
    8b8e:	4813      	ldr	r0, [pc, #76]	; (8bdc <_gpio_set_direction+0xd0>)
    8b90:	4b14      	ldr	r3, [pc, #80]	; (8be4 <_gpio_set_direction+0xd8>)
    8b92:	4798      	blx	r3
		break;
    8b94:	e01d      	b.n	8bd2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    8b96:	79fb      	ldrb	r3, [r7, #7]
    8b98:	683a      	ldr	r2, [r7, #0]
    8b9a:	4619      	mov	r1, r3
    8b9c:	480f      	ldr	r0, [pc, #60]	; (8bdc <_gpio_set_direction+0xd0>)
    8b9e:	4b12      	ldr	r3, [pc, #72]	; (8be8 <_gpio_set_direction+0xdc>)
    8ba0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    8ba2:	683b      	ldr	r3, [r7, #0]
    8ba4:	b29b      	uxth	r3, r3
    8ba6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    8baa:	79fb      	ldrb	r3, [r7, #7]
    8bac:	4619      	mov	r1, r3
    8bae:	480b      	ldr	r0, [pc, #44]	; (8bdc <_gpio_set_direction+0xd0>)
    8bb0:	4b0c      	ldr	r3, [pc, #48]	; (8be4 <_gpio_set_direction+0xd8>)
    8bb2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    8bb4:	683b      	ldr	r3, [r7, #0]
    8bb6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    8bb8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    8bbc:	79fb      	ldrb	r3, [r7, #7]
    8bbe:	4619      	mov	r1, r3
    8bc0:	4806      	ldr	r0, [pc, #24]	; (8bdc <_gpio_set_direction+0xd0>)
    8bc2:	4b08      	ldr	r3, [pc, #32]	; (8be4 <_gpio_set_direction+0xd8>)
    8bc4:	4798      	blx	r3
		break;
    8bc6:	e004      	b.n	8bd2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    8bc8:	2246      	movs	r2, #70	; 0x46
    8bca:	4908      	ldr	r1, [pc, #32]	; (8bec <_gpio_set_direction+0xe0>)
    8bcc:	2000      	movs	r0, #0
    8bce:	4b08      	ldr	r3, [pc, #32]	; (8bf0 <_gpio_set_direction+0xe4>)
    8bd0:	4798      	blx	r3
}
    8bd2:	bf00      	nop
    8bd4:	3708      	adds	r7, #8
    8bd6:	46bd      	mov	sp, r7
    8bd8:	bd80      	pop	{r7, pc}
    8bda:	bf00      	nop
    8bdc:	41008000 	.word	0x41008000
    8be0:	00008a6d 	.word	0x00008a6d
    8be4:	00008ae5 	.word	0x00008ae5
    8be8:	00008a45 	.word	0x00008a45
    8bec:	00009110 	.word	0x00009110
    8bf0:	00002249 	.word	0x00002249

00008bf4 <_gpio_set_level>:
{
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b082      	sub	sp, #8
    8bf8:	af00      	add	r7, sp, #0
    8bfa:	4603      	mov	r3, r0
    8bfc:	6039      	str	r1, [r7, #0]
    8bfe:	71fb      	strb	r3, [r7, #7]
    8c00:	4613      	mov	r3, r2
    8c02:	71bb      	strb	r3, [r7, #6]
	if (level) {
    8c04:	79bb      	ldrb	r3, [r7, #6]
    8c06:	2b00      	cmp	r3, #0
    8c08:	d006      	beq.n	8c18 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    8c0a:	79fb      	ldrb	r3, [r7, #7]
    8c0c:	683a      	ldr	r2, [r7, #0]
    8c0e:	4619      	mov	r1, r3
    8c10:	4806      	ldr	r0, [pc, #24]	; (8c2c <_gpio_set_level+0x38>)
    8c12:	4b07      	ldr	r3, [pc, #28]	; (8c30 <_gpio_set_level+0x3c>)
    8c14:	4798      	blx	r3
}
    8c16:	e005      	b.n	8c24 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    8c18:	79fb      	ldrb	r3, [r7, #7]
    8c1a:	683a      	ldr	r2, [r7, #0]
    8c1c:	4619      	mov	r1, r3
    8c1e:	4803      	ldr	r0, [pc, #12]	; (8c2c <_gpio_set_level+0x38>)
    8c20:	4b04      	ldr	r3, [pc, #16]	; (8c34 <_gpio_set_level+0x40>)
    8c22:	4798      	blx	r3
}
    8c24:	bf00      	nop
    8c26:	3708      	adds	r7, #8
    8c28:	46bd      	mov	sp, r7
    8c2a:	bd80      	pop	{r7, pc}
    8c2c:	41008000 	.word	0x41008000
    8c30:	00008a95 	.word	0x00008a95
    8c34:	00008abd 	.word	0x00008abd

00008c38 <main>:
#define LEDSB           BIT07 | BIT23 | BIT24 | BIT25 | BIT26 | BIT27 | BIT28 | BIT29
#define LEDSC           BIT16 | BIT17 | BIT18 | BIT21 | BIT25 | BIT26 | BIT28
#define LEDSD           BIT10 | BIT11 | BIT12

int main(void)
{
    8c38:	b580      	push	{r7, lr}
    8c3a:	b082      	sub	sp, #8
    8c3c:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    8c3e:	4b39      	ldr	r3, [pc, #228]	; (8d24 <main+0xec>)
    8c40:	4798      	blx	r3
    
    _gpio_set_direction(GPIO_PORTA, BIT19, GPIO_DIRECTION_OUT);
    8c42:	2202      	movs	r2, #2
    8c44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    8c48:	2000      	movs	r0, #0
    8c4a:	4b37      	ldr	r3, [pc, #220]	; (8d28 <main+0xf0>)
    8c4c:	4798      	blx	r3
    
    _gpio_set_direction(GPIO_PORTA, LEDSA, GPIO_DIRECTION_OUT);
    8c4e:	2202      	movs	r2, #2
    8c50:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    8c54:	2000      	movs	r0, #0
    8c56:	4b34      	ldr	r3, [pc, #208]	; (8d28 <main+0xf0>)
    8c58:	4798      	blx	r3
    _gpio_set_direction(GPIO_PORTB, LEDSB, GPIO_DIRECTION_OUT);
    8c5a:	2202      	movs	r2, #2
    8c5c:	4933      	ldr	r1, [pc, #204]	; (8d2c <main+0xf4>)
    8c5e:	2001      	movs	r0, #1
    8c60:	4b31      	ldr	r3, [pc, #196]	; (8d28 <main+0xf0>)
    8c62:	4798      	blx	r3
    _gpio_set_direction(GPIO_PORTC, LEDSC, GPIO_DIRECTION_OUT);
    8c64:	2202      	movs	r2, #2
    8c66:	4932      	ldr	r1, [pc, #200]	; (8d30 <main+0xf8>)
    8c68:	2002      	movs	r0, #2
    8c6a:	4b2f      	ldr	r3, [pc, #188]	; (8d28 <main+0xf0>)
    8c6c:	4798      	blx	r3
    _gpio_set_direction(GPIO_PORTD, LEDSD, GPIO_DIRECTION_OUT);
    8c6e:	2202      	movs	r2, #2
    8c70:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
    8c74:	2003      	movs	r0, #3
    8c76:	4b2c      	ldr	r3, [pc, #176]	; (8d28 <main+0xf0>)
    8c78:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
        
        _gpio_set_level(GPIO_PORTA, BIT19, 1);
    8c7a:	2201      	movs	r2, #1
    8c7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    8c80:	2000      	movs	r0, #0
    8c82:	4b2c      	ldr	r3, [pc, #176]	; (8d34 <main+0xfc>)
    8c84:	4798      	blx	r3
        uint32_t delayVal = 80;
    8c86:	2350      	movs	r3, #80	; 0x50
    8c88:	607b      	str	r3, [r7, #4]
        while (delayVal != 0) {--delayVal;}
    8c8a:	e002      	b.n	8c92 <main+0x5a>
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	3b01      	subs	r3, #1
    8c90:	607b      	str	r3, [r7, #4]
    8c92:	687b      	ldr	r3, [r7, #4]
    8c94:	2b00      	cmp	r3, #0
    8c96:	d1f9      	bne.n	8c8c <main+0x54>
        _gpio_set_level(GPIO_PORTA, BIT19, 0);
    8c98:	2200      	movs	r2, #0
    8c9a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    8c9e:	2000      	movs	r0, #0
    8ca0:	4b24      	ldr	r3, [pc, #144]	; (8d34 <main+0xfc>)
    8ca2:	4798      	blx	r3
        
        
        
        
        _gpio_set_level(GPIO_PORTA, LEDSA, 1);
    8ca4:	2201      	movs	r2, #1
    8ca6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    8caa:	2000      	movs	r0, #0
    8cac:	4b21      	ldr	r3, [pc, #132]	; (8d34 <main+0xfc>)
    8cae:	4798      	blx	r3
        _gpio_set_level(GPIO_PORTB, LEDSB, 1);
    8cb0:	2201      	movs	r2, #1
    8cb2:	491e      	ldr	r1, [pc, #120]	; (8d2c <main+0xf4>)
    8cb4:	2001      	movs	r0, #1
    8cb6:	4b1f      	ldr	r3, [pc, #124]	; (8d34 <main+0xfc>)
    8cb8:	4798      	blx	r3
        _gpio_set_level(GPIO_PORTC, LEDSC, 1);
    8cba:	2201      	movs	r2, #1
    8cbc:	491c      	ldr	r1, [pc, #112]	; (8d30 <main+0xf8>)
    8cbe:	2002      	movs	r0, #2
    8cc0:	4b1c      	ldr	r3, [pc, #112]	; (8d34 <main+0xfc>)
    8cc2:	4798      	blx	r3
        _gpio_set_level(GPIO_PORTD, LEDSD, 1);
    8cc4:	2201      	movs	r2, #1
    8cc6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
    8cca:	2003      	movs	r0, #3
    8ccc:	4b19      	ldr	r3, [pc, #100]	; (8d34 <main+0xfc>)
    8cce:	4798      	blx	r3
        delayVal = 800000;
    8cd0:	4b19      	ldr	r3, [pc, #100]	; (8d38 <main+0x100>)
    8cd2:	607b      	str	r3, [r7, #4]
        while (delayVal != 0) {--delayVal;}
    8cd4:	e002      	b.n	8cdc <main+0xa4>
    8cd6:	687b      	ldr	r3, [r7, #4]
    8cd8:	3b01      	subs	r3, #1
    8cda:	607b      	str	r3, [r7, #4]
    8cdc:	687b      	ldr	r3, [r7, #4]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d1f9      	bne.n	8cd6 <main+0x9e>
            
        _gpio_set_level(GPIO_PORTA, LEDSA, 0);
    8ce2:	2200      	movs	r2, #0
    8ce4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    8ce8:	2000      	movs	r0, #0
    8cea:	4b12      	ldr	r3, [pc, #72]	; (8d34 <main+0xfc>)
    8cec:	4798      	blx	r3
        _gpio_set_level(GPIO_PORTB, LEDSB, 0);
    8cee:	2200      	movs	r2, #0
    8cf0:	490e      	ldr	r1, [pc, #56]	; (8d2c <main+0xf4>)
    8cf2:	2001      	movs	r0, #1
    8cf4:	4b0f      	ldr	r3, [pc, #60]	; (8d34 <main+0xfc>)
    8cf6:	4798      	blx	r3
        _gpio_set_level(GPIO_PORTC, LEDSC, 0);
    8cf8:	2200      	movs	r2, #0
    8cfa:	490d      	ldr	r1, [pc, #52]	; (8d30 <main+0xf8>)
    8cfc:	2002      	movs	r0, #2
    8cfe:	4b0d      	ldr	r3, [pc, #52]	; (8d34 <main+0xfc>)
    8d00:	4798      	blx	r3
        _gpio_set_level(GPIO_PORTD, LEDSD, 0);
    8d02:	2200      	movs	r2, #0
    8d04:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
    8d08:	2003      	movs	r0, #3
    8d0a:	4b0a      	ldr	r3, [pc, #40]	; (8d34 <main+0xfc>)
    8d0c:	4798      	blx	r3
         delayVal = 800000;
    8d0e:	4b0a      	ldr	r3, [pc, #40]	; (8d38 <main+0x100>)
    8d10:	607b      	str	r3, [r7, #4]
         while (delayVal != 0) {--delayVal;}
    8d12:	e002      	b.n	8d1a <main+0xe2>
    8d14:	687b      	ldr	r3, [r7, #4]
    8d16:	3b01      	subs	r3, #1
    8d18:	607b      	str	r3, [r7, #4]
    8d1a:	687b      	ldr	r3, [r7, #4]
    8d1c:	2b00      	cmp	r3, #0
    8d1e:	d1f9      	bne.n	8d14 <main+0xdc>
	while (1) {
    8d20:	e7ab      	b.n	8c7a <main+0x42>
    8d22:	bf00      	nop
    8d24:	000002d1 	.word	0x000002d1
    8d28:	00008b0d 	.word	0x00008b0d
    8d2c:	3f800080 	.word	0x3f800080
    8d30:	16270000 	.word	0x16270000
    8d34:	00008bf5 	.word	0x00008bf5
    8d38:	000c3500 	.word	0x000c3500

00008d3c <ffs>:
    8d3c:	b140      	cbz	r0, 8d50 <ffs+0x14>
    8d3e:	2200      	movs	r2, #0
    8d40:	fa40 f102 	asr.w	r1, r0, r2
    8d44:	1c53      	adds	r3, r2, #1
    8d46:	07c9      	lsls	r1, r1, #31
    8d48:	461a      	mov	r2, r3
    8d4a:	d5f9      	bpl.n	8d40 <ffs+0x4>
    8d4c:	4618      	mov	r0, r3
    8d4e:	4770      	bx	lr
    8d50:	4603      	mov	r3, r0
    8d52:	e7fb      	b.n	8d4c <ffs+0x10>

00008d54 <__libc_init_array>:
    8d54:	b570      	push	{r4, r5, r6, lr}
    8d56:	4e0d      	ldr	r6, [pc, #52]	; (8d8c <__libc_init_array+0x38>)
    8d58:	4c0d      	ldr	r4, [pc, #52]	; (8d90 <__libc_init_array+0x3c>)
    8d5a:	1ba4      	subs	r4, r4, r6
    8d5c:	10a4      	asrs	r4, r4, #2
    8d5e:	2500      	movs	r5, #0
    8d60:	42a5      	cmp	r5, r4
    8d62:	d109      	bne.n	8d78 <__libc_init_array+0x24>
    8d64:	4e0b      	ldr	r6, [pc, #44]	; (8d94 <__libc_init_array+0x40>)
    8d66:	4c0c      	ldr	r4, [pc, #48]	; (8d98 <__libc_init_array+0x44>)
    8d68:	f000 f9e0 	bl	912c <_init>
    8d6c:	1ba4      	subs	r4, r4, r6
    8d6e:	10a4      	asrs	r4, r4, #2
    8d70:	2500      	movs	r5, #0
    8d72:	42a5      	cmp	r5, r4
    8d74:	d105      	bne.n	8d82 <__libc_init_array+0x2e>
    8d76:	bd70      	pop	{r4, r5, r6, pc}
    8d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8d7c:	4798      	blx	r3
    8d7e:	3501      	adds	r5, #1
    8d80:	e7ee      	b.n	8d60 <__libc_init_array+0xc>
    8d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8d86:	4798      	blx	r3
    8d88:	3501      	adds	r5, #1
    8d8a:	e7f2      	b.n	8d72 <__libc_init_array+0x1e>
    8d8c:	00009138 	.word	0x00009138
    8d90:	00009138 	.word	0x00009138
    8d94:	00009138 	.word	0x00009138
    8d98:	0000913c 	.word	0x0000913c

00008d9c <memcpy>:
    8d9c:	b510      	push	{r4, lr}
    8d9e:	1e43      	subs	r3, r0, #1
    8da0:	440a      	add	r2, r1
    8da2:	4291      	cmp	r1, r2
    8da4:	d100      	bne.n	8da8 <memcpy+0xc>
    8da6:	bd10      	pop	{r4, pc}
    8da8:	f811 4b01 	ldrb.w	r4, [r1], #1
    8dac:	f803 4f01 	strb.w	r4, [r3, #1]!
    8db0:	e7f7      	b.n	8da2 <memcpy+0x6>

00008db2 <memset>:
    8db2:	4402      	add	r2, r0
    8db4:	4603      	mov	r3, r0
    8db6:	4293      	cmp	r3, r2
    8db8:	d100      	bne.n	8dbc <memset+0xa>
    8dba:	4770      	bx	lr
    8dbc:	f803 1b01 	strb.w	r1, [r3], #1
    8dc0:	e7f9      	b.n	8db6 <memset+0x4>
    8dc2:	0000      	movs	r0, r0
    8dc4:	682f2e2e 	.word	0x682f2e2e
    8dc8:	702f6c70 	.word	0x702f6c70
    8dcc:	2f74726f 	.word	0x2f74726f
    8dd0:	5f6c7068 	.word	0x5f6c7068
    8dd4:	6f697067 	.word	0x6f697067
    8dd8:	7361625f 	.word	0x7361625f
    8ddc:	00682e65 	.word	0x00682e65
    8de0:	682f2e2e 	.word	0x682f2e2e
    8de4:	692f6c61 	.word	0x692f6c61
    8de8:	756c636e 	.word	0x756c636e
    8dec:	682f6564 	.word	0x682f6564
    8df0:	775f6c61 	.word	0x775f6c61
    8df4:	682e7464 	.word	0x682e7464
    8df8:	00000000 	.word	0x00000000
    8dfc:	682f2e2e 	.word	0x682f2e2e
    8e00:	732f6c61 	.word	0x732f6c61
    8e04:	682f6372 	.word	0x682f6372
    8e08:	615f6c61 	.word	0x615f6c61
    8e0c:	735f6364 	.word	0x735f6364
    8e10:	2e636e79 	.word	0x2e636e79
    8e14:	00000063 	.word	0x00000063
    8e18:	682f2e2e 	.word	0x682f2e2e
    8e1c:	732f6c61 	.word	0x732f6c61
    8e20:	682f6372 	.word	0x682f6372
    8e24:	695f6c61 	.word	0x695f6c61
    8e28:	6d5f6332 	.word	0x6d5f6332
    8e2c:	7973615f 	.word	0x7973615f
    8e30:	632e636e 	.word	0x632e636e
    8e34:	00000000 	.word	0x00000000
    8e38:	682f2e2e 	.word	0x682f2e2e
    8e3c:	732f6c61 	.word	0x732f6c61
    8e40:	682f6372 	.word	0x682f6372
    8e44:	695f6c61 	.word	0x695f6c61
    8e48:	735f6332 	.word	0x735f6332
    8e4c:	7973615f 	.word	0x7973615f
    8e50:	632e636e 	.word	0x632e636e
    8e54:	00000000 	.word	0x00000000
    8e58:	682f2e2e 	.word	0x682f2e2e
    8e5c:	732f6c61 	.word	0x732f6c61
    8e60:	682f6372 	.word	0x682f6372
    8e64:	745f6c61 	.word	0x745f6c61
    8e68:	72656d69 	.word	0x72656d69
    8e6c:	0000632e 	.word	0x0000632e
    8e70:	682f2e2e 	.word	0x682f2e2e
    8e74:	752f6c61 	.word	0x752f6c61
    8e78:	736c6974 	.word	0x736c6974
    8e7c:	6372732f 	.word	0x6372732f
    8e80:	6974752f 	.word	0x6974752f
    8e84:	6c5f736c 	.word	0x6c5f736c
    8e88:	2e747369 	.word	0x2e747369
    8e8c:	00000063 	.word	0x00000063
    8e90:	682f2e2e 	.word	0x682f2e2e
    8e94:	752f6c61 	.word	0x752f6c61
    8e98:	736c6974 	.word	0x736c6974
    8e9c:	6372732f 	.word	0x6372732f
    8ea0:	6974752f 	.word	0x6974752f
    8ea4:	725f736c 	.word	0x725f736c
    8ea8:	62676e69 	.word	0x62676e69
    8eac:	65666675 	.word	0x65666675
    8eb0:	00632e72 	.word	0x00632e72

00008eb4 <_adcs>:
    8eb4:	00000000 00030000 00000000 00000000     ................
    8ec4:	00000000 00010000 00000000 00000003     ................
	...
    8ee0:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    8ef0:	632e6364 00000000                       dc.c....

00008ef8 <_cfgs>:
	...

00008ff8 <_map>:
    8ff8:	0000000a 0000002a 0000000b 0000002b     ....*.......+...
    9008:	0000000c 0000002c 0000000d 0000002d     ....,.......-...
    9018:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    9028:	632e6369 00000000 682f2e2e 722f6c70     ic.c....../hpl/r
    9038:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    9048:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    9058:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    9068:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    9078:	43000400 43000800 43000c00              ...C...C...C

00009084 <sercomspi_regs>:
	...
    9098:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    90a8:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
    90b8:	4101c000 42001400 42001800 43001400     ...A...B...B...C
    90c8:	43001800                                ...C

000090cc <_usb_ep_cfgs>:
    90cc:	20000444 00000000 00000040 20000484     D.. ....@...... 
    90dc:	00000000 00000040 200004c4 00000000     ....@...... ....
    90ec:	00000040 00000804 00004a25 682f2e2e     @.......%J..../h
    90fc:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    910c:	00000000 682f2e2e 702f6c70 2f74726f     ....../hpl/port/
    911c:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.

0000912c <_init>:
    912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    912e:	bf00      	nop
    9130:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9132:	bc08      	pop	{r3}
    9134:	469e      	mov	lr, r3
    9136:	4770      	bx	lr

00009138 <__init_array_start>:
    9138:	00000289 	.word	0x00000289

0000913c <_fini>:
    913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    913e:	bf00      	nop
    9140:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9142:	bc08      	pop	{r3}
    9144:	469e      	mov	lr, r3
    9146:	4770      	bx	lr

00009148 <__fini_array_start>:
    9148:	00000265 	.word	0x00000265
